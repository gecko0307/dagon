/*
Copyright (c) 2023 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dagon.graphics.world;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.container.array;
import dlib.math.matrix;

import dagon.graphics.entity;
import dagon.graphics.light;

/*
 * Object that stores entities and provides entity groups
 */
class World: Owner
{
    Matrix4x4f rootTransformation;
    Matrix4x4f rootInvTransformation;
    Matrix4x4f prevRootTransformation;
    
    protected Array!Entity entities;
    
    EntityGroupSpatial spatial;
    EntityGroupSpatialOpaque spatialOpaqueStatic;
    EntityGroupSpatialOpaque spatialOpaqueDynamic;
    EntityGroupSpatialTransparent spatialTransparent;
    EntityGroupBackground background;
    EntityGroupForeground foreground;
    EntityGroupLights lights;
    EntityGroupSunLights sunLights;
    EntityGroupAreaLights areaLights;
    EntityGroupDecals decals;
    EntityGroupProbes probes;

    this(Owner owner)
    {
        super(owner);
        
        rootTransformation = Matrix4x4f.identity;
        rootInvTransformation = Matrix4x4f.identity;
        prevRootTransformation = Matrix4x4f.identity;
        
        spatial = New!EntityGroupSpatial(this, this);
        spatialOpaqueStatic = New!EntityGroupSpatialOpaque(this, false, this);
        spatialOpaqueDynamic = New!EntityGroupSpatialOpaque(this, true, this);
        spatialTransparent = New!EntityGroupSpatialTransparent(this, this);
        background = New!EntityGroupBackground(this, this);
        foreground = New!EntityGroupForeground(this, this);
        lights = New!EntityGroupLights(this, this);
        sunLights = New!EntityGroupSunLights(this, this);
        areaLights = New!EntityGroupAreaLights(this, this);
        decals = New!EntityGroupDecals(this, this);
        probes = New!EntityGroupProbes(this, this);
    }

    void add(Entity e)
    {
        entities.append(e);
    }
    
    Entity addEntity(Entity parent = null)
    {
        Entity e = New!Entity(this);
        if (parent)
            e.setParent(parent);
        return e;
    }
    
    int opApply(scope int delegate(size_t, ref Entity) dg)
    {
        return entities.opApply(dg);
    }
    
    int opApply(scope int delegate(ref Entity) dg)
    {
        return entities.opApply(dg);
    }
    
    int opApplyReverse(scope int delegate(size_t, ref Entity) dg)
    {
        return entities.opApplyReverse(dg);
    }
    
    int opApplyReverse(scope int delegate(ref Entity) dg)
    {
        return entities.opApplyReverse(dg);
    }
    
    size_t length()
    {
        return entities.length;
    }

    ~this()
    {
        entities.free();
    }
}

class EntityGroupSpatial: Owner, EntityGroup
{
    World world;

    this(World world, Owner owner)
    {
        super(owner);
        this.world = world;
    }

    int opApply(scope int delegate(Entity) dg)
    {
        int res = 0;
        foreach(size_t i, Entity e; world)
        {
            if (e.layer == EntityLayer.Spatial && !e.decal && !e.probe)
            {
                res = dg(e);
                if (res)
                    break;
            }
        }
        return res;
    }
}

class EntityGroupDecals: Owner, EntityGroup
{
    World world;

    this(World world, Owner owner)
    {
        super(owner);
        this.world = world;
    }

    int opApply(scope int delegate(Entity) dg)
    {
        int res = 0;
        foreach(size_t i, Entity e; world)
        {
            if (e.decal)
            {
                res = dg(e);
                if (res)
                    break;
            }
        }
        return res;
    }
}

class EntityGroupProbes: Owner, EntityGroup
{
    World world;

    this(World world, Owner owner)
    {
        super(owner);
        this.world = world;
    }

    int opApply(scope int delegate(Entity) dg)
    {
        int res = 0;
        foreach(size_t i, Entity e; world)
        {
            if (e.probe)
            {
                res = dg(e);
                if (res)
                    break;
            }
        }
        return res;
    }
}

class EntityGroupSpatialOpaque: Owner, EntityGroup
{
    World world;
    bool dynamic = true;

    this(World world, bool dynamic, Owner owner)
    {
        super(owner);
        this.world = world;
        this.dynamic = dynamic;
    }

    int opApply(scope int delegate(Entity) dg)
    {
        int res = 0;
        foreach(size_t i, Entity e; world)
        {
            if (e.layer == EntityLayer.Spatial && !e.decal && !e.probe)
            {
                bool transparent = false;
                
                if (e.material)
                    transparent = e.material.isTransparent;
                
                transparent = transparent || e.transparent || e.opacity < 1.0f;
                
                if (!transparent && e.dynamic == dynamic)
                {
                    res = dg(e);
                    if (res)
                        break;
                }
            }
        }
        return res;
    }
}

class EntityGroupSpatialTransparent: Owner, EntityGroup
{
    World world;

    this(World world, Owner owner)
    {
        super(owner);
        this.world = world;
    }

    int opApply(scope int delegate(Entity) dg)
    {
        int res = 0;
        foreach(size_t i, Entity e; world)
        {
            if (e.layer == EntityLayer.Spatial && !e.decal && !e.probe)
            {
                bool transparent = false;
                
                if (e.material)
                    transparent = e.material.isTransparent;
                
                transparent = transparent || e.transparent || e.opacity < 1.0f;
                
                if (transparent)
                {
                    res = dg(e);
                    if (res)
                        break;
                }
            }
        }
        return res;
    }
}

class EntityGroupBackground: Owner, EntityGroup
{
    World world;

    this(World world, Owner owner)
    {
        super(owner);
        this.world = world;
    }

    int opApply(scope int delegate(Entity) dg)
    {
        int res = 0;
        foreach(size_t i, Entity e; world)
        {
            if (e.layer == EntityLayer.Background)
            {
                res = dg(e);
                if (res)
                    break;
            }
        }
        return res;
    }
}

class EntityGroupForeground: Owner, EntityGroup
{
    World world;

    this(World world, Owner owner)
    {
        super(owner);
        this.world = world;
    }

    int opApply(scope int delegate(Entity) dg)
    {
        int res = 0;
        foreach(size_t i, Entity e; world)
        {
            if (e.layer == EntityLayer.Foreground)
            {
                res = dg(e);
                if (res)
                    break;
            }
        }
        return res;
    }
}

class EntityGroupLights: Owner, EntityGroup
{
    World world;

    this(World world, Owner owner)
    {
        super(owner);
        this.world = world;
    }

    int opApply(scope int delegate(Entity) dg)
    {
        int res = 0;
        foreach(size_t i, Entity e; world)
        {
            Light light = cast(Light)e;
            if (light)
            {
                res = dg(e);
                if (res)
                    break;
            }
        }
        return res;
    }
}

class EntityGroupSunLights: Owner, EntityGroup
{
    World world;

    this(World world, Owner owner)
    {
        super(owner);
        this.world = world;
    }

    int opApply(scope int delegate(Entity) dg)
    {
        int res = 0;
        foreach(size_t i, Entity e; world)
        {
            Light light = cast(Light)e;
            if (light)
            {
                if (light.type == LightType.Sun)
                {
                    res = dg(e);
                    if (res)
                        break;
                }
            }
        }
        return res;
    }
}

class EntityGroupAreaLights: Owner, EntityGroup
{
    World world;

    this(World world, Owner owner)
    {
        super(owner);
        this.world = world;
    }

    int opApply(scope int delegate(Entity) dg)
    {
        int res = 0;
        foreach(size_t i, Entity e; world)
        {
            Light light = cast(Light)e;
            if (light)
            {
                if (light.type == LightType.AreaSphere ||
                    light.type == LightType.AreaTube ||
                    light.type == LightType.Spot)
                {
                    res = dg(e);
                    if (res)
                        break;
                }
            }
        }
        return res;
    }
}
