/*
Copyright (c) 2017-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Provides the core interface and grouping utilities for renderable objects.
 *
 * Description:
 * The `dagon.graphics.drawable` module provides the `Drawable` interface,
 * which must be implemented by any object that can be rendered,
 * and the `DrawableGroup` class, which allows grouping multiple drawables
 * for batched rendering.
 *
 * Copyright: Timur Gafarov 2017-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.graphics.drawable;

import dlib.core.ownership;
import dlib.container.array;
public import dagon.graphics.state;

/**
 * Interface for renderable objects.
 *
 * Any object that can be rendered must implement this interface.
 */
interface Drawable
{
    /**
     * Renders the object using the provided graphics pipeline state.
     *
     * Params:
     *   state = Pointer to the graphics pipeline state.
     */
    void render(GraphicsState* state);
}

/**
 * A group of drawables that can be rendered together.
 *
 * The `DrawableGroup` class allows you to add multiple `Drawable` objects and
 * render them all at once.
 */
class DrawableGroup: Owner, Drawable
{
    /// The array of drawables in this group.
    Array!Drawable drawables;
    
    /**
     * Constructs an empty drawable group.
     *
     * Params:
     *   owner = The owner object.
     */
    this(Owner owner)
    {
        super(owner);
    }
    
    /// Destructor. Frees the drawables array.
    ~this()
    {
        drawables.free();
    }
    
    /**
     * Constructs a drawable group with a single drawable.
     *
     * Params:
     *   drawable = The drawable to add.
     *   owner    = The owner object.
     */
    this(Drawable drawable, Owner owner)
    {
        super(owner);
        add(drawable);
    }
    
    /**
     * Constructs a drawable group with an array of drawables.
     *
     * Params:
     *   drawablesArr = The array of drawables to add.
     *   owner        = The owner object.
     */
    this(Drawable[] drawablesArr, Owner owner)
    {
        super(owner);
        foreach(d; drawablesArr)
            add(d);
    }
    
    /**
     * Adds a drawable to the group.
     *
     * Params:
     *   d = The drawable to add.
     */
    void add(Drawable d)
    {
        drawables.append(d);
    }
    
    /**
     * Renders all drawables in the group.
     *
     * Params:
     *   state = Pointer to the graphics pipeline state.
     */
    void render(GraphicsState* state)
    {
        foreach(d; drawables)
            d.render(state);
    }
}
