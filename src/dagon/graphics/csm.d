/*
Copyright (c) 2017-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Provides classes and utilities for cascaded shadow mapping (CSM).
 *
 * Description:
 * Cascaded shadow mapping is a technique for rendering high-quality shadows
 * over large scenes by splitting the camera frustum into multiple regions
 * (cascades), each with its own shadow map. This module defines
 * the `CascadedShadowMap` class, which manage the projection, view, and
 * shadow matrices for each cascade, as well as OpenGL resources for multi-layered
 * shadow maps.
 *
 * Copyright: Timur Gafarov 2017-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.graphics.csm;

import std.math;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.math.vector;
import dlib.math.matrix;
import dlib.math.transformation;
import dlib.image.color;

import dagon.core.bindings;
import dagon.core.time;
import dagon.graphics.state;
import dagon.graphics.shadowmap;
import dagon.graphics.light;
import dagon.graphics.camera;
import dagon.graphics.shader;
import dagon.graphics.entity;

/**
 * Represents a single shadow area (cascade) for cascaded shadow mapping.
 * Stores projection, view, and shadow matrices, as well as the position
 * and size of the cascade. Used internally by `CascadedShadowMap`
 * to manage each shadow region.
 */
class ShadowArea: Owner
{
    Matrix4x4f biasMatrix;
    Matrix4x4f projectionMatrix;
    Matrix4x4f shadowMatrix;
    Matrix4x4f viewMatrix;
    Matrix4x4f invViewMatrix;
    Vector3f position;
    float projectionSize;
    float zStart;
    float zEnd;
    
    /**
     * Constructs a shadow area with the given projection size and depth range.
     *
     * Params:
     *   projectionSize = The width/height of the orthographic projection.
     *   zStart         = Near plane of the projection.
     *   zEnd           = Far plane of the projection.
     *   owner          = Owner object.
     */
    this(float projectionSize, float zStart, float zEnd, Owner owner)
    {
        super(owner);
        
        this.biasMatrix = matrixf(
            0.5f, 0.0f, 0.0f, 0.5f,
            0.0f, 0.5f, 0.0f, 0.5f,
            0.0f, 0.0f, 0.5f, 0.5f,
            0.0f, 0.0f, 0.0f, 1.0f,
        );
        
        resize(projectionSize, zStart, zEnd);
        
        this.shadowMatrix = Matrix4x4f.identity;
        this.viewMatrix = Matrix4x4f.identity;
        this.invViewMatrix = Matrix4x4f.identity;
        this.position = Vector3f(0.0f, 0.0f, 0.0f);
    }
    
    /**
     * Resizes the shadow area projection.
     *
     * Params:
     *   projectionSize = New projection size.
     *   zStart         = New near plane.
     *   zEnd           = New far plane.
     */
    void resize(float projectionSize, float zStart, float zEnd)
    {
        this.projectionSize = projectionSize;
        this.zStart = zStart;
        this.zEnd = zEnd;
        float hSize = projectionSize * 0.5f;
        this.projectionMatrix = orthoMatrix(-hSize, hSize, -hSize, hSize, zStart, zEnd);
    }
    
    /**
     * Updates the shadow area matrices based on the light and camera.
     *
     * Params:
     *   light  = The light source.
     *   camera = The camera for which shadows are rendered.
     */
    void update(Light light, Camera camera)
    {
        invViewMatrix = translationMatrix(position) * light.rotationAbsolute.toMatrix4x4;
        viewMatrix = invViewMatrix.inverse;
        shadowMatrix = biasMatrix * projectionMatrix * viewMatrix * camera.invViewMatrix;
    }
}

/**
 * Implements cascaded shadow mapping with three cascades.
 *
 * Description:
 * Manages three `ShadowArea` instances, a layered depth texture,
 * and three framebuffers for rendering each cascade. Handles
 * OpenGL resource allocation, resizing, and updating of shadow matrices.
 */
class CascadedShadowMap: ShadowMap
{
    /// The camera for which shadows are rendered.
    Camera camera;

    /// The three shadow cascades.
    ShadowArea[3] area;
    
    /// Layered depth texture for all cascades.
    GLuint depthTexture;

    /// Framebuffer for cascade 1.
    GLuint framebuffer1;

    /// Framebuffer for cascade 2.
    GLuint framebuffer2;

    /// Framebuffer for cascade 3.
    GLuint framebuffer3;
    
    /// Resolution of each shadow map.
    uint shadowMapResolution = 2048; // TODO: store in DeferredRenderer

    /// Projection size for each cascade.
    float[3] projectionSize = [20, 60, 400];

    /// Near plane for all cascades.
    float zStart = -10_000.0f;

    /// Far plane for all cascades.
    float zEnd = 10_000.0f;
    
    /**
     * Constructs a cascaded shadow map for the given light.
     *
     * Params:
     *   light = The light source.
     *   owner = Owner object.
     */
    this(Light light, Owner owner)
    {
        super(owner);
        this.light = light;
        resize(shadowMapResolution);
        area[0] = New!ShadowArea(projectionSize[0], zStart, zEnd, this);
        area[1] = New!ShadowArea(projectionSize[1], zStart, zEnd, this);
        area[2] = New!ShadowArea(projectionSize[2], zStart, zEnd, this);
    }
    
    /// Destructor. Releases all OpenGL resources.
    ~this()
    {
        releaseBuffer();
    }
    
    /**
     * Resizes the shadow map textures and framebuffers.
     *
     * Params:
     *   res = New resolution for each cascade.
     */
    override void resize(uint res)
    {
        this.resolution = res;
        
        releaseBuffer();
        
        glGenTextures(1, &depthTexture);
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D_ARRAY, depthTexture);
        glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_BORDER);
        glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_BORDER);
        
        Color4f borderColor = Color4f(1, 1, 1, 1);

        glTexParameterfv(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_BORDER_COLOR, borderColor.arrayof.ptr);
        glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_COMPARE_MODE, GL_COMPARE_REF_TO_TEXTURE);
        glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_COMPARE_FUNC, GL_LEQUAL);
        
        glTexImage3D(GL_TEXTURE_2D_ARRAY, 0, GL_DEPTH_COMPONENT24, resolution, resolution, 3, 0, GL_DEPTH_COMPONENT, GL_FLOAT, null);
        
        glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_BASE_LEVEL, 0);
        glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_MAX_LEVEL, 0);

        glBindTexture(GL_TEXTURE_2D_ARRAY, 0);
        
        glGenFramebuffers(1, &framebuffer1);
        glBindFramebuffer(GL_FRAMEBUFFER, framebuffer1);
        glDrawBuffer(GL_NONE);
        glReadBuffer(GL_NONE);
        glFramebufferTextureLayer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, depthTexture, 0, 0);
        glBindFramebuffer(GL_FRAMEBUFFER, 0);
        
        glGenFramebuffers(1, &framebuffer2);
        glBindFramebuffer(GL_FRAMEBUFFER, framebuffer2);
        glDrawBuffer(GL_NONE);
        glReadBuffer(GL_NONE);
        glFramebufferTextureLayer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, depthTexture, 0, 1);
        glBindFramebuffer(GL_FRAMEBUFFER, 0);
        
        glGenFramebuffers(1, &framebuffer3);
        glBindFramebuffer(GL_FRAMEBUFFER, framebuffer3);
        glDrawBuffer(GL_NONE);
        glReadBuffer(GL_NONE);
        glFramebufferTextureLayer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, depthTexture, 0, 2);
        glBindFramebuffer(GL_FRAMEBUFFER, 0);
    }
    
    /// Releases all OpenGL resources associated with the shadow map.
    void releaseBuffer()
    {
        if (glIsFramebuffer(framebuffer1))
            glDeleteFramebuffers(1, &framebuffer1);
            
        if (glIsFramebuffer(framebuffer2))
            glDeleteFramebuffers(1, &framebuffer2);
            
        if (glIsFramebuffer(framebuffer3))
            glDeleteFramebuffers(1, &framebuffer3);
        
        if (glIsTexture(depthTexture))
            glDeleteTextures(1, &depthTexture);
    }

    /**
     * Updates the shadow map for the current frame.
     *
     * Params:
     *   t = Frame timing information.
     */
    override void update(Time t)
    {
        if (camera)
        {
            Vector3f cameraDirection = -camera.directionAbsolute;
            Vector3f round(Vector3f a, float resolution)
            {
                return Vector3f(a.x - fmod(a.x, resolution), a.y - fmod(a.y, resolution), a.z - fmod(a.z, resolution));
            }
            
            float res1 = projectionSize[0] / shadowMapResolution * 5;
            area[0].position = round(camera.positionAbsolute + cameraDirection * (projectionSize[0]  * 0.48f - 1.0f), res1);
            area[0].update(light, camera);
            
            foreach(i; 1..projectionSize.length)
            {
                auto res = projectionSize[i] / shadowMapResolution * (i == 1? 10 : 100);
                area[i].position = round(camera.positionAbsolute + cameraDirection * projectionSize[i] * 0.5f, res);
                area[i].update(light, camera);
            }
        }
    }
}
