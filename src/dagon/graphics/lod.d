/*
Copyright (c) 2019-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Provides level-of-detail (LOD) functionality.
 *
 * Description:
 * The `dagon.graphics.lod` module defines the `LODDrawable` class,
 * which manages multiple LOD levels and selects the appropriate drawable
 * and material based on camera distance at render time. This enables efficient
 * rendering of complex objects by reducing detail as distance from the camera increases.
 *
 * Copyright: Timur Gafarov 2019-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.graphics.lod;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.math.vector;
import dlib.math.transformation;
import dlib.container.array;

import dagon.core.bindings;
import dagon.graphics.drawable;
import dagon.graphics.material;

/**
 * Represents a single level of detail for a drawable object.
 */
struct LODLevel
{
    /// The drawable object for this LOD level.
    Drawable drawable;

    /// The material to use for this LOD level.
    Material material;

    /// The minimum camera distance at which this LOD is active.
    float startDistance;

    /// The maximum camera distance for this LOD.
    float endDistance;

    /// The distance over which to fade between LODs.
    float fadeDistance;
}

/**
 * A drawable object with multiple levels of detail.
 *
 * Description:
 * The `LODDrawable` class manages an array of `LODLevel` objects
 * and selects the appropriate drawable and material to render based
 * on the camera's distance. This improves performance by reducing
 * detail for distant objects.
 */
class LODDrawable: Owner, Drawable
{
    /// Array of LOD levels.
    Array!LODLevel levels;

    /**
     * Constructs an empty `LODDrawable`.
     *
     * Params:
     *   owner = The owner object.
     */
    this(Owner owner)
    {
        super(owner);
    }

    /// Destructor. Frees all LOD levels.
    ~this()
    {
        levels.free();
    }

    /**
     * Adds a new LOD level.
     *
     * Params:
     *   drawable   = The drawable object for this LOD.
     *   material   = The material for this LOD.
     *   startDist  = The minimum camera distance for this LOD.
     *   endDist    = The maximum camera distance for this LOD.
     *   fadeDist   = The fade distance for blending between LODs.
     */
    void addLevel(Drawable drawable, Material material, float startDist, float endDist, float fadeDist)
    {
        levels.append(LODLevel(drawable, material, startDist, endDist, fadeDist));
    }

    /**
     * Renders a single LOD level.
     *
     * Params:
     *   level = Pointer to the `LODLevel`.
     *   dist = distance to the camera.
     *   state =  Pointer to the current graphics pipeline state.
     */
    void renderLevel(LODLevel* level, float dist, GraphicsState* state)
    {
        if (level.drawable)
        {
            if (level.material)
            {
                level.material.bind(state);
                state.shader.bindParameters(state);
            }
            
            level.drawable.render(state);
            
            if (level.material)
            {
                state.shader.unbindParameters(state);
                level.material.unbind(state);
            }
        }
    }

    /**
     * Renders the appropriate LOD level based on camera distance.
     *
     * Params:
     *   state = Pointer to the current graphics pipeline state.
     */
    void render(GraphicsState* state)
    {
        float distanceToCam = distance(state.cameraPosition, state.modelMatrix.translation);
        
        for(size_t i = 0; i < levels.length; i++)
        {
            LODLevel* level = &levels.data[i];
            if (distanceToCam >= level.startDistance && distanceToCam < level.endDistance)
            {
                renderLevel(level, distanceToCam, state);
            }
        }
    }
}
