/*
Copyright (c) 2019-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Provides reusable components for `Entity`.
 *
 * Components extend the functionality of entities by adding logic or
 * behavior that can be attached to any `Entity`. This module includes
 * components such as `PositionSync`, which synchronizes an entity's position
 * with another entity, enabling hierarchical or dependent transformations.
 *
 * Copyright: Timur Gafarov 2019-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.graphics.components;

import dlib.math.vector;
import dlib.math.matrix;
import dlib.math.transformation;

import dagon.core.event;
import dagon.core.time;
import dagon.graphics.entity;

/**
 * A component that synchronizes an entity's position with another entity.
 *
 * Description:
 * When attached, this component updates the entity's transformation so that
 * its position is always relative to the specified parent entity. Useful for
 * building dynamic hierarhies, when entities can switch parents in runtime.
 * `PositionSync` intentionally doesn't take parent's rotation and scaling
 * into account, which makes possible to implement custom logics for rotation and
 * scaling on user side.
 */
class PositionSync: EntityComponent
{
    /// The parent entity to synchronize with.
    Entity parent;
    
    /// Parent position mask that allows to ignore some of the axes.
    Vector3f mask = Vector3f(1.0f, 1.0f, 1.0f);

    /**
     * Constructs a `PositionSync` component.
     *
     * Params:
     *   eventManager = The event manager.
     *   hostEntity   = The entity to attach this component to.
     *   parent       = The parent entity to synchronize with.
     */
    this(EventManager eventManager, Entity hostEntity, Entity parent)
    {
        super(eventManager, hostEntity);
        this.parent = parent;
    }

    /**
     * Updates the entity's transformation to match the parent's
     * absolute position plus its own offset.
     *
     * Params:
     *   time = The current frame's timing information.
     */
    override void update(Time time)
    {
        Vector3f pos = parent.positionAbsolute * mask + entity.position;

        entity.transformation =
            translationMatrix(pos) *
            entity.rotation.toMatrix4x4 *
            scaleMatrix(entity.scaling);
        entity.invTransformation = entity.transformation.inverse;

        entity.absoluteTransformation = entity.transformation;
        entity.invAbsoluteTransformation = entity.invTransformation;
        entity.prevAbsoluteTransformation = entity.prevTransformation;
    }
}
