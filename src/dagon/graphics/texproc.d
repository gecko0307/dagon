/*
Copyright (c) 2022-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Provides utilities for GPU-accelerated texture processing.
 *
 * Copyright: Timur Gafarov 2022-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.graphics.texproc;

import std.stdio;
import std.math;
import std.algorithm;
import std.traits;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.math.vector;
import dlib.math.matrix;
import dlib.math.transformation;
import dlib.image.color;
import dlib.text.str;

import dagon.core.bindings;
import dagon.core.logger;
import dagon.graphics.texture;
import dagon.graphics.shader;
import dagon.graphics.state;
import dagon.graphics.screensurface;

/**
 * Shader for combining up to four textures into a single output.
 *
 * Description:
 * The `TextureCombinerShader` binds up to four input textures (channels) and
 * outputs a combined result.
 */
class TextureCombinerShader: Shader
{
    String vs, fs;
    Texture[4] channels;
    
    /**
     * Constructs a texture combiner shader with the given channels.
     *
     * Params:
     *   channels = Array of up to four textures to combine.
     *   owner    = Owner object.
     */
    this(Texture[4] channels, Owner owner)
    {
        vs = Shader.load("data/__internal/shaders/TextureCombiner/TextureCombiner.vert.glsl");
        fs = Shader.load("data/__internal/shaders/TextureCombiner/TextureCombiner.frag.glsl");

        auto myProgram = New!ShaderProgram(vs, fs, this);
        super(myProgram, owner);
        
        this.channels[] = channels[];
    }
    
    /// Destructor. Releases shader source resources.
    ~this()
    {
        vs.free();
        fs.free();
    }
    
    /**
     * Binds shader parameters and input textures for rendering.
     *
     * Params:
     *   state = Pointer to the current graphics state.
     */
    override void bindParameters(GraphicsState* state)
    {
        // Channel0
        glActiveTexture(GL_TEXTURE0);
        setParameter("texChannel0", cast(int)0);
        setParameter("valueChannel0", 0.0f);
        if (channels[0])
        {
            channels[0].bind();
            setParameterSubroutine("channel0", ShaderType.Fragment, "channel0Texture");
        }
        else
        {
            glBindTexture(GL_TEXTURE_2D, 0);
            setParameterSubroutine("channel0", ShaderType.Fragment, "channel0Value");
        }
        
        // Channel1
        glActiveTexture(GL_TEXTURE1);
        setParameter("texChannel1", cast(int)1);
        setParameter("valueChannel1", 0.0f);
        if (channels[1])
        {
            channels[1].bind();
            setParameterSubroutine("channel1", ShaderType.Fragment, "channel1Texture");
        }
        else
        {
            glBindTexture(GL_TEXTURE_2D, 0);
            setParameterSubroutine("channel1", ShaderType.Fragment, "channel1Value");
        }
        
        // Channel2
        glActiveTexture(GL_TEXTURE2);
        setParameter("texChannel2", cast(int)2);
        setParameter("valueChannel2", 0.0f);
        if (channels[2])
        {
            channels[2].bind();
            setParameterSubroutine("channel2", ShaderType.Fragment, "channel2Texture");
        }
        else
        {
            glBindTexture(GL_TEXTURE_2D, 0);
            setParameterSubroutine("channel2", ShaderType.Fragment, "channel2Value");
        }
        
        // Channel3
        glActiveTexture(GL_TEXTURE3);
        setParameter("texChannel3", cast(int)3);
        setParameter("valueChannel3", 0.0f);
        if (channels[3])
        {
            channels[3].bind();
            setParameterSubroutine("channel3", ShaderType.Fragment, "channel3Texture");
        }
        else
        {
            glBindTexture(GL_TEXTURE_2D, 0);
            setParameterSubroutine("channel3", ShaderType.Fragment, "channel3Value");
        }
        
        glActiveTexture(GL_TEXTURE0);
        
        super.bindParameters(state);
    }
    
    /**
     * Unbinds shader parameters and input textures.
     *
     * Params:
     *   state = Pointer to the current graphics pipeline state.
     */
    override void unbindParameters(GraphicsState* state)
    {
        super.unbindParameters(state);

        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE1);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE2);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE3);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE0);
    }
}

/**
 * Combines up to four textures into a single output texture using the GPU.
 *
 * Params:
 *   channels = Array of up to four input textures.
 *   output   = Output texture to write the result to.
 */
void combineTextures(Texture[4] channels, Texture output)
{
    GLuint framebuffer;
    glGenFramebuffers(1, &framebuffer);
    glBindFramebuffer(GL_FRAMEBUFFER, framebuffer);
    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, output.texture, 0);
    GLenum[1] drawBuffers = [GL_COLOR_ATTACHMENT0];
    glDrawBuffers(drawBuffers.length, drawBuffers.ptr);
    GLenum status = glCheckFramebufferStatus(GL_FRAMEBUFFER);
    if (status != GL_FRAMEBUFFER_COMPLETE)
    {
        logError("combineTextures failed: framebuffer status = ", status);
        glBindFramebuffer(GL_FRAMEBUFFER, 0);
        glDeleteFramebuffers(1, &framebuffer);
        return;
    }
    
    ScreenSurface screenSurface = New!ScreenSurface(null);
    TextureCombinerShader shader = New!TextureCombinerShader(channels, null);
    
    GraphicsState state;
    state.reset();
    state.resolution = Vector2f(output.size.width, output.size.height);
    
    glScissor(0, 0, output.size.width, output.size.height);
    glViewport(0, 0, output.size.width, output.size.height);
    
    glDisable(GL_DEPTH_TEST);
    glDepthMask(GL_FALSE);
    shader.bind();
    shader.bindParameters(&state);
    screenSurface.render(&state);
    shader.unbindParameters(&state);
    shader.unbind();
    glDepthMask(GL_TRUE);
    glEnable(GL_DEPTH_TEST);
    
    Delete(shader);
    Delete(screenSurface);
    
    glBindFramebuffer(GL_FRAMEBUFFER, 0);
    glDeleteFramebuffers(1, &framebuffer);
}

/**
 * Combines up to four textures into a new output texture of the given size using the GPU.
 *
 * Params:
 *   w        = Output texture width.
 *   h        = Output texture height.
 *   channels = Array of up to four input textures.
 *   owner    = Owner object for resulting texture.
 * Returns:
 *   The combined output texture.
 */
Texture combineTextures(uint w, uint h, Texture[4] channels, Owner owner)
{
    Texture output = New!Texture(owner);
    output.createBlank(w, h, 4, 8, false, Color4f(0.0f, 0.0f, 0.0f, 1.0f));
    combineTextures(channels, output);
    output.generateMipmap();
    return output;
}

/**
 * Shader for converting equirectangular environment maps to cube maps.
 */
class CubemapGeneratorShader: Shader
{
    String vs, fs;
    Texture envmap;
    CubeFace cubeFace;
    
    /**
     * Constructs a cube map generation shader with the given environment map.
     *
     * Params:
     *   envmap = Equirectangular environment map.
     *   owner  = Owner object.
     */
    this(Texture envmap, Owner owner)
    {
        vs = Shader.load("data/__internal/shaders/CubemapGenerator/CubemapGenerator.vert.glsl");
        fs = Shader.load("data/__internal/shaders/CubemapGenerator/CubemapGenerator.frag.glsl");

        auto myProgram = New!ShaderProgram(vs, fs, this);
        super(myProgram, owner);
        
        this.envmap = envmap;
    }
    
    /// Destructor. Releases shader source resources.
    ~this()
    {
        vs.free();
        fs.free();
    }
    
    /**
     * Binds shader parameters and input textures for rendering.
     *
     * Params:
     *   state = Pointer to the current graphics state.
     */
    override void bindParameters(GraphicsState* state)
    {
        glActiveTexture(GL_TEXTURE0);
        setParameter("envmap", cast(int)0);
        envmap.bind();
        
        Matrix4x4f pixelToWorldMatrix = cubeFaceMatrix(cubeFace);
        setParameter("pixelToWorldMatrix", pixelToWorldMatrix);
        
        super.bindParameters(state);
    }
    
    /**
     * Unbinds shader parameters and input textures.
     *
     * Params:
     *   state = Pointer to the current graphics pipeline state.
     */
    override void unbindParameters(GraphicsState* state)
    {
        super.unbindParameters(state);
        
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, 0);
    }
}

/**
 * Creates a cube map texture from an equirectangular environment map using the GPU.
 *
 * Params:
 *   inputEnvmap = Input texture.
 *   output      = Output cube map to write the result to.
 */
void generateCubemap(Texture inputEnvmap, Texture output)
{
    ScreenSurface screenSurface = New!ScreenSurface(null);
    CubemapGeneratorShader shader = New!CubemapGeneratorShader(inputEnvmap, null);
    
    inputEnvmap.useMipmapFiltering = false;
    inputEnvmap.enableRepeat(false);
    
    GraphicsState state;
    state.reset();
    state.resolution = Vector2f(output.size.width, output.size.height);
    
    GLuint framebuffer;
    glGenFramebuffers(1, &framebuffer);
    glBindFramebuffer(GL_FRAMEBUFFER, framebuffer);
    
    GLenum drawBuffer = GL_COLOR_ATTACHMENT0;
    glDrawBuffers(1, &drawBuffer);
    
    foreach(cubeFace; EnumMembers!CubeFace)
    {
        glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, cubeFace, output.texture, 0);
        
        GLenum status = glCheckFramebufferStatus(GL_FRAMEBUFFER);
        if (status != GL_FRAMEBUFFER_COMPLETE)
        {
            logError("generateCubemap failed: framebuffer status = ", status);
            glBindFramebuffer(GL_FRAMEBUFFER, 0);
            glDeleteFramebuffers(1, &framebuffer);
            return;
        }
        
        glScissor(0, 0, output.size.width, output.size.height);
        glViewport(0, 0, output.size.width, output.size.height);
        
        glDisable(GL_DEPTH_TEST);
        glDepthMask(GL_FALSE);
        
        shader.cubeFace = cubeFace;
        shader.bind();
        shader.bindParameters(&state);
        screenSurface.render(&state);
        shader.unbindParameters(&state);
        shader.unbind();
        
        glDepthMask(GL_TRUE);
        glEnable(GL_DEPTH_TEST);
    }
    
    glBindFramebuffer(GL_FRAMEBUFFER, 0);
    glDeleteFramebuffers(1, &framebuffer);
    
    Delete(shader);
    Delete(screenSurface);
}

/**
 * Creates a cube map texture from an equirectangular environment map using the GPU.
 *
 * Params:
 *   resolution  = Output cube map resolution.
 *   inputEnvmap = Input texture.
 *   owner       = Owner object for resulting cube map.
 * Returns:
 *   The cube map texture.
 */
Texture generateCubemap(uint resolution, Texture inputEnvmap, Owner owner)
{
    TextureFormat format = {
        target: GL_TEXTURE_CUBE_MAP,
        format: GL_RGBA,
        internalFormat: GL_RGBA16F,
        pixelType: GL_HALF_FLOAT,
        blockSize: 0,
        cubeFaces: CubeFaceBit.All
    };
    
    Texture cubemap = New!Texture(owner);
    cubemap.createBlankCubemap(format, resolution);
    generateCubemap(inputEnvmap, cubemap);
    cubemap.generateMipmap();
    
    return cubemap;
}

/**
 * Shader for prefiltering cube maps (convolving with the GGX BRDF).
 */
class CubemapPrefilterShader: Shader
{
    Texture cubemap;
    CubeFace cubeFace;
    float roughness = 0.5f;
    float inputMipLevel = 0.0f;
    float inputThreshold = 10.0f;
    float inputScale = 2.0f;
    
    ShaderParameter!Vector2f resolutionUniform;
    ShaderParameter!int cubemapFaceIndexUniform;
    ShaderParameter!float inputMipLevelUniform;
    ShaderParameter!float roughnessUniform;
    ShaderParameter!int envmapUniform;
    ShaderParameter!float inputThresholdUniform;
    ShaderParameter!float inputScaleUniform;
    
    /**
     * Constructs a prefiltering shader with the given cube map.
     *
     * Params:
     *   cubemap = an input cube map.
     *   owner   = Owner object.
     */
    this(Texture cubemap, Owner owner)
    {
        this.cubemap = cubemap;
        
        string vs = Shader.load("data/__internal/shaders/CubemapPrefilter/CubemapPrefilter.vert.glsl");
        string fs = Shader.load("data/__internal/shaders/CubemapPrefilter/CubemapPrefilter.frag.glsl");
        auto shaderProgram = New!ShaderProgram(vs, fs, this);
        super(shaderProgram, owner);
        
        resolutionUniform = createParameter!Vector2f("resolution");
        cubemapFaceIndexUniform = createParameter!int("cubemapFaceIndex");
        inputMipLevelUniform = createParameter!float("inputMipLevel");
        roughnessUniform = createParameter!float("roughness");
        envmapUniform = createParameter!int("envmap");
        inputThresholdUniform = createParameter!float("inputThreshold");
        inputScaleUniform = createParameter!float("inputScale");
    }
    
    /**
     * Binds shader parameters and input textures for rendering.
     *
     * Params:
     *   state = Pointer to the current graphics state.
     */
    override void bindParameters(GraphicsState* state)
    {
        resolutionUniform = state.resolution;
        
        if (cubeFace == CubeFace.PositiveX) cubemapFaceIndexUniform = 0;
        if (cubeFace == CubeFace.NegativeX) cubemapFaceIndexUniform = 1;
        if (cubeFace == CubeFace.PositiveY) cubemapFaceIndexUniform = 2;
        if (cubeFace == CubeFace.NegativeY) cubemapFaceIndexUniform = 3;
        if (cubeFace == CubeFace.PositiveZ) cubemapFaceIndexUniform = 4;
        if (cubeFace == CubeFace.NegativeZ) cubemapFaceIndexUniform = 5;
        
        inputMipLevelUniform = inputMipLevel;
        roughnessUniform = roughness;
        inputThresholdUniform = inputThreshold;
        inputScaleUniform = inputScale;
        
        glActiveTexture(GL_TEXTURE0);
        envmapUniform = 0;
        if (cubemap)
            cubemap.bind();
        else
            glBindTexture(GL_TEXTURE_2D, 0);
        
        super.bindParameters(state);
    }
}

/**
 * Prefilters a cube map texture using the GPU.
 *
 * Params:
 *   inputCubemap  = Input cube map.
 *   outputCubemap = Output cube map to write the result to. Should already have an allocated mip chain.
 */
void prefilterCubemap(Texture inputCubemap, Texture outputCubemap)
{
    ScreenSurface screenSurface = New!ScreenSurface(null);
    CubemapPrefilterShader shader = New!CubemapPrefilterShader(inputCubemap, null);
    
    GraphicsState state;
    state.reset();
    
    GLuint framebuffer;
    glGenFramebuffers(1, &framebuffer);
    glBindFramebuffer(GL_FRAMEBUFFER, framebuffer);
    
    GLenum drawBuffer = GL_COLOR_ATTACHMENT0;
    glDrawBuffers(1, &drawBuffer);
    
    glDisable(GL_DEPTH_TEST);
    glDepthMask(GL_FALSE);
    
    foreach(cubeFace; EnumMembers!CubeFace)
    {
        for(int mipLevel = 0; mipLevel < outputCubemap.mipLevels; mipLevel++)
        {
            GLint width, height;
            glGetTextureLevelParameteriv(outputCubemap.texture, mipLevel, GL_TEXTURE_WIDTH, &width);
            glGetTextureLevelParameteriv(outputCubemap.texture, mipLevel, GL_TEXTURE_HEIGHT, &height);
            state.resolution = Vector2f(width, height);
            
            shader.cubeFace = cubeFace;
            shader.roughness = cast(float)mipLevel / (cast(float)outputCubemap.mipLevels - 1.0f);
            shader.roughness = min(0.9f, shader.roughness * shader.roughness);
            shader.inputMipLevel = 0;
            
            glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, cubeFace, outputCubemap.texture, mipLevel);
            
            GLenum status = glCheckFramebufferStatus(GL_FRAMEBUFFER);
            if (status != GL_FRAMEBUFFER_COMPLETE)
            {
                logError("filterCubemap failed: framebuffer status = ", status);
                glBindFramebuffer(GL_FRAMEBUFFER, 0);
                glDeleteFramebuffers(1, &framebuffer);
                return;
            }
            
            glScissor(0, 0, width, height);
            glViewport(0, 0, width, height);
            
            shader.bind();
            shader.bindParameters(&state);
            screenSurface.render(&state);
            shader.unbindParameters(&state);
            shader.unbind();
        }
    }
    
    glDepthMask(GL_TRUE);
    glEnable(GL_DEPTH_TEST);
    
    glBindFramebuffer(GL_FRAMEBUFFER, 0);
    glDeleteFramebuffers(1, &framebuffer);
    
    Delete(shader);
    Delete(screenSurface);
}

/**
 * Prefilters a cube map texture using the GPU.
 *
 * Params:
 *   resolution   = Output cube map resolution.
 *   inputCubemap = Input cube map texture.
 *   owner        = Owner object for resulting cube map.
 * Returns:
 *   The cube map texture.
 */
Texture prefilterCubemap(uint resolution, Texture inputCubemap, Owner owner)
{
    TextureFormat format = {
        target: GL_TEXTURE_CUBE_MAP,
        format: GL_RGBA,
        internalFormat: GL_RGBA16F,
        pixelType: GL_HALF_FLOAT,
        blockSize: 0,
        cubeFaces: CubeFaceBit.All
    };
    
    Texture outputCubemap = New!Texture(owner);
    outputCubemap.createBlankCubemap(format, resolution);
    outputCubemap.generateMipmap();
    
    prefilterCubemap(inputCubemap, outputCubemap);
    
    return outputCubemap;
}
