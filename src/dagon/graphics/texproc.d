/*
Copyright (c) 2022-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Provides utilities for GPU-accelerated texture processing.
 *
 * Description:
 * The `dagon.graphics.texproc` module defines the `TextureCombinerShader` class
 * for combining up to four textures into a single output texture. This is useful for
 * merging channels and generating composite roughnes-metallic maps for PBR.
 *
 * Copyright: Timur Gafarov 2022-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.graphics.texproc;

import std.stdio;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.math.vector;
import dlib.math.matrix;
import dlib.math.transformation;
import dlib.image.color;
import dlib.text.str;

import dagon.core.bindings;
import dagon.core.logger;
import dagon.graphics.texture;
import dagon.graphics.shader;
import dagon.graphics.state;
import dagon.graphics.screensurface;

/**
 * Shader for combining up to four textures into a single output.
 *
 * Description:
 * The `TextureCombinerShader` binds up to four input textures (channels) and
 * outputs a combined result.
 */
class TextureCombinerShader: Shader
{
    String vs, fs;
    Texture[4] channels;
    
    /**
     * Constructs a texture combiner shader with the given channels.
     *
     * Params:
     *   channels = Array of up to four textures to combine.
     *   owner    = Owner object.
     */
    this(Texture[4] channels, Owner owner)
    {
        vs = Shader.load("data/__internal/shaders/TextureCombiner/TextureCombiner.vert.glsl");
        fs = Shader.load("data/__internal/shaders/TextureCombiner/TextureCombiner.frag.glsl");

        auto myProgram = New!ShaderProgram(vs, fs, this);
        super(myProgram, owner);
        
        this.channels[] = channels[];
    }
    
    /// Destructor. Releases shader source resources.
    ~this()
    {
        vs.free();
        fs.free();
    }
    
    /**
     * Binds shader parameters and input textures for rendering.
     *
     * Params:
     *   state = Pointer to the current graphics state.
     */
    override void bindParameters(GraphicsState* state)
    {
        // Channel0
        glActiveTexture(GL_TEXTURE0);
        setParameter("texChannel0", cast(int)0);
        setParameter("valueChannel0", 0.0f);
        if (channels[0])
        {
            channels[0].bind();
            setParameterSubroutine("channel0", ShaderType.Fragment, "channel0Texture");
        }
        else
        {
            glBindTexture(GL_TEXTURE_2D, 0);
            setParameterSubroutine("channel0", ShaderType.Fragment, "channel0Value");
        }
        
        // Channel1
        glActiveTexture(GL_TEXTURE1);
        setParameter("texChannel1", cast(int)1);
        setParameter("valueChannel1", 0.0f);
        if (channels[1])
        {
            channels[1].bind();
            setParameterSubroutine("channel1", ShaderType.Fragment, "channel1Texture");
        }
        else
        {
            glBindTexture(GL_TEXTURE_2D, 0);
            setParameterSubroutine("channel1", ShaderType.Fragment, "channel1Value");
        }
        
        // Channel2
        glActiveTexture(GL_TEXTURE2);
        setParameter("texChannel2", cast(int)2);
        setParameter("valueChannel2", 0.0f);
        if (channels[2])
        {
            channels[2].bind();
            setParameterSubroutine("channel2", ShaderType.Fragment, "channel2Texture");
        }
        else
        {
            glBindTexture(GL_TEXTURE_2D, 0);
            setParameterSubroutine("channel2", ShaderType.Fragment, "channel2Value");
        }
        
        // Channel3
        glActiveTexture(GL_TEXTURE3);
        setParameter("texChannel3", cast(int)3);
        setParameter("valueChannel3", 0.0f);
        if (channels[3])
        {
            channels[3].bind();
            setParameterSubroutine("channel3", ShaderType.Fragment, "channel3Texture");
        }
        else
        {
            glBindTexture(GL_TEXTURE_2D, 0);
            setParameterSubroutine("channel3", ShaderType.Fragment, "channel3Value");
        }
        
        glActiveTexture(GL_TEXTURE0);
        
        super.bindParameters(state);
    }
    
    /**
     * Unbinds shader parameters and input textures.
     *
     * Params:
     *   state = Pointer to the current graphics pipeline state.
     */
    override void unbindParameters(GraphicsState* state)
    {
        super.unbindParameters(state);

        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE1);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE2);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE3);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE0);
    }
}

/**
 * Combines up to four textures into a single output texture using the GPU.
 *
 * Params:
 *   channels = Array of up to four input textures.
 *   output   = Output texture to write the result to.
 */
void combineTextures(Texture[4] channels, Texture output)
{
    GLuint framebuffer;
    glGenFramebuffers(1, &framebuffer);
    glBindFramebuffer(GL_FRAMEBUFFER, framebuffer);
    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, output.texture, 0);
    GLenum[1] drawBuffers = [GL_COLOR_ATTACHMENT0];
    glDrawBuffers(drawBuffers.length, drawBuffers.ptr);
    GLenum status = glCheckFramebufferStatus(GL_FRAMEBUFFER);
    if (status != GL_FRAMEBUFFER_COMPLETE)
    {
        logError("combineTextures failed: framebuffer status = ", status);
        glBindFramebuffer(GL_FRAMEBUFFER, 0);
        glDeleteFramebuffers(1, &framebuffer);
        return;
    }
    
    ScreenSurface screenSurface = New!ScreenSurface(null);
    TextureCombinerShader shader = New!TextureCombinerShader(channels, null);
    
    GraphicsState state;
    state.reset();
    state.resolution = Vector2f(output.size.width, output.size.height);
    
    glScissor(0, 0, output.size.width, output.size.height);
    glViewport(0, 0, output.size.width, output.size.height);
    
    glDisable(GL_DEPTH_TEST);
    glDepthMask(GL_FALSE);
    shader.bind();
    shader.bindParameters(&state);
    screenSurface.render(&state);
    shader.unbindParameters(&state);
    shader.unbind();
    glDepthMask(GL_TRUE);
    glEnable(GL_DEPTH_TEST);
    
    Delete(shader);
    Delete(screenSurface);
    
    glBindFramebuffer(GL_FRAMEBUFFER, 0);
    glDeleteFramebuffers(1, &framebuffer);
}

/**
 * Combines up to four textures into a new output texture of the given size.
 *
 * Params:
 *   w        = Output texture width.
 *   h        = Output texture height.
 *   channels = Array of up to four input textures.
 *   owner    = Owner object for memory/resource management.
 * Returns:
 *   The combined output texture.
 */
Texture combineTextures(uint w, uint h, Texture[4] channels, Owner owner)
{
    Texture output = New!Texture(owner);
    output.createBlank(w, h, 4, 8, false, Color4f(0.0f, 0.0f, 0.0f, 1.0f));
    combineTextures(channels, output);
    output.generateMipmap();
    return output;
}
