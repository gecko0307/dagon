/*
Copyright (c) 2017-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dagon.graphics.material;

import std.traits;
import std.math;
import std.algorithm;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.math.vector;
import dlib.math.matrix;
import dlib.image.color;
import dlib.image.image;
import dlib.image.unmanaged;
import dlib.container.dict;

import dagon.core.bindings;
import dagon.graphics.texture;
import dagon.graphics.state;
import dagon.graphics.shader;
import dagon.graphics.light;

enum
{
    CBlack = Color4f(0.0f, 0.0f, 0.0f, 1.0f),
    CWhite = Color4f(1.0f, 1.0f, 1.0f, 1.0f),
    CRed = Color4f(1.0f, 0.0f, 0.0f, 1.0f),
    COrange = Color4f(1.0f, 0.5f, 0.0f, 1.0f),
    CYellow = Color4f(1.0f, 1.0f, 0.0f, 1.0f),
    CGreen = Color4f(0.0f, 1.0f, 0.0f, 1.0f),
    CCyan = Color4f(0.0f, 1.0f, 1.0f, 1.0f),
    CBlue = Color4f(0.0f, 0.0f, 1.0f, 1.0f),
    CPurple = Color4f(0.5f, 0.0f, 1.0f, 1.0f),
    CMagenta = Color4f(1.0f, 0.0f, 1.0f, 1.0f)
}

enum int None = 0;

enum int ShadowFilterNone = 0;
enum int ShadowFilterPCF = 1;

enum int ParallaxNone = 0;
enum int ParallaxSimple = 1;
enum int ParallaxOcclusionMapping = 2;

enum int Opaque = 0;
enum int Transparent = 1;
enum int Additive = 2;

class Material: Owner
{
    Shader shader;
    Light sun;
    Texture baseColorTexture;
    Texture roughnessMetallicTexture;
    Texture emissionTexture;
    Texture normalTexture;
    Texture heightTexture;
    Texture maskTexture;
    Color4f baseColorFactor = Color4f(1.0f, 1.0f, 1.0f, 1.0f);
    Color4f emissionFactor = Color4f(0.0f, 0.0f, 0.0f, 1.0f);
    Vector3f normalFactor = Vector3f(0.0f, 0.0f, 1.0f);
    Matrix3x3f textureTransformation;
    float heightFactor = 0.0f;
    float emissionEnergy = 1.0f;
    float opacity = 1.0f;
    float alphaTestThreshold = 0.5f;
    float roughnessFactor = 0.5f;
    float metallicFactor = 0.0f;
    float specularity = 1.0f;
    float subsurfaceScattering = 0.0f;
    float parallaxScale = 0.03f;
    float parallaxBias = -0.01f;
    float maskFactor = 1.0f;
    int parallaxMode = ParallaxNone;
    int shadowFilter = ShadowFilterPCF;
    int blendMode = Opaque;
    bool shadeless = false;
    bool invertNormalY = true;
    bool useShadows = true;
    bool useFog = true;
    bool useCulling = true;
    bool sphericalNormal = false;
    bool colorWrite = true;
    bool depthWrite = true;
    bool outputColor = true;
    bool outputNormal = true;
    bool outputPBR = true;
    bool outputEmission = true;
    
    protected Vector2f textureOffsetInternal = Vector2f(0.0f, 0.0f);
    protected Vector2f textureScalingInternal = Vector2f(1.0f, 1.0f);
    
    this(Owner o)
    {
        super(o);
        textureTransformation = Matrix3x3f.identity;
    }
    
    ~this()
    {
    }
    
    bool isTransparent()
    {
        return (blendMode != Opaque);
    }
    
    Vector2f textureOffset()
    {
        return textureOffsetInternal;
    }
    
    void textureOffset(Vector2f v)
    {
        textureOffsetInternal = v;
        textureTransformation.a13 = v.x;
        textureTransformation.a23 = v.y;
    }
    
    Vector2f textureScale()
    {
        return textureScalingInternal;
    }
    
    void textureScale(Vector2f s)
    {
        textureScalingInternal = s;
        textureTransformation.a11 = s.x;
        textureTransformation.a22 = s.y;
    }
    
    void setSprite(Vector2f uvSize, Vector2f uvPosition)
    {
        textureScale = uvSize;
        textureOffset = uvPosition;
    }
    
    void bind(GraphicsState* state)
    {
        if (blendMode == Transparent)
        {
            glEnablei(GL_BLEND, 0);
            glEnablei(GL_BLEND, 1);
            glEnablei(GL_BLEND, 2);
            glEnablei(GL_BLEND, 3);
            glEnablei(GL_BLEND, 4);
            glBlendFuncSeparatei(0, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
            glBlendFuncSeparatei(1, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
            glBlendFuncSeparatei(2, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
            glBlendFuncSeparatei(3, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
            glBlendFuncSeparatei(4, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
        }
        else if (blendMode == Additive)
        {
            glEnablei(GL_BLEND, 0);
            glEnablei(GL_BLEND, 1);
            glEnablei(GL_BLEND, 2);
            glEnablei(GL_BLEND, 3);
            glEnablei(GL_BLEND, 4);
            glBlendFunci(0, GL_SRC_ALPHA, GL_ONE);
            glBlendFunci(1, GL_SRC_ALPHA, GL_ONE);
            glBlendFunci(2, GL_SRC_ALPHA, GL_ONE);
            glBlendFunci(3, GL_SRC_ALPHA, GL_ONE);
            glBlendFunci(4, GL_SRC_ALPHA, GL_ONE);
        }

        if (useCulling && state.culling)
        {
            glEnable(GL_CULL_FACE);
        }
        else
        {
            glDisable(GL_CULL_FACE);
        }

        if (!colorWrite || !state.colorMask)
        {
            glColorMask(GL_FALSE, GL_FALSE, GL_FALSE, GL_FALSE);
        }

        if (!depthWrite || !state.depthMask)
        {
            glDepthMask(GL_FALSE);
        }

        state.material = this;
    }

    void unbind(GraphicsState* state)
    {
        state.material = null;

        glDepthMask(GL_TRUE);
        glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);

        glDisable(GL_CULL_FACE);

        glDisablei(GL_BLEND, 0);
        glDisablei(GL_BLEND, 1);
        glDisablei(GL_BLEND, 2);
        glDisablei(GL_BLEND, 3);
        glDisablei(GL_BLEND, 4);
    }
}
