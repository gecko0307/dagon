/*
Copyright (c) 2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Provides boilerplate for perspective shadow mapping (PSM)
 * that is used for spot lights.
 *
 * Copyright: Timur Gafarov 2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.graphics.psm;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.image.color;
import dlib.math.matrix;
import dlib.math.transformation;

import dagon.core.logger;
import dagon.core.bindings;
import dagon.core.time;
import dagon.graphics.shadowmap;
import dagon.graphics.light;

/**
 * Perspective shadow map.
 */
class PerspectiveShadowMap: ShadowMap
{
    /// Resolution of the depth texture.
    uint shadowMapResolution = 1024;
    
    /// Light-space depth texture.
    GLuint depthTexture;
    
    /// Framebuffer to render the depth texture.
    GLuint framebuffer;
    
    /// Transforms world-space coordinates to the light space.
    Matrix4x4f viewMatrix;
    
    /// Inverse of the `viewMatrix`.
    Matrix4x4f invViewMatrix;
    
    /// Perspective shadow projection.
    Matrix4x4f projectionMatrix;
    
    /// Transforms world-space coordinates to the shadow texture space.
    Matrix4x4f shadowMatrix;
    
    /// Near plane of the orthographic projection.
    float zNear = 0.01f;
    
    /**
     * Constructs a perspective shadow map for the given light.
     *
     * Params:
     *   light = The light source.
     *   owner = Owner object.
     */
    this(Light light, Owner owner)
    {
        super(owner);
        this.light = light;
        resize(shadowMapResolution);
        viewMatrix = Matrix4x4f.identity;
        invViewMatrix = Matrix4x4f.identity;
        projectionMatrix = Matrix4x4f.identity;
        shadowMatrix = Matrix4x4f.identity;
    }
    
    ~this()
    {
        releaseBuffer();
    }
    
    /**
     * Resizes the depth texture.
     *
     * Params:
     *   res = New depth texture resolution.
     */
    override void resize(uint res)
    {
        this.resolution = res;
        
        releaseBuffer();
        
        glActiveTexture(GL_TEXTURE0);
        
        glGenTextures(1, &depthTexture);
        glBindTexture(GL_TEXTURE_2D, depthTexture);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_COMPARE_MODE, GL_COMPARE_REF_TO_TEXTURE);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_COMPARE_FUNC, GL_LEQUAL);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_DEPTH_COMPONENT24, resolution, resolution, 0, GL_DEPTH_COMPONENT, GL_FLOAT, null);
        
        glBindTexture(GL_TEXTURE_2D, 0);
        
        glGenFramebuffers(1, &framebuffer);
        glBindFramebuffer(GL_FRAMEBUFFER, framebuffer);
        glDrawBuffer(GL_NONE);
        glReadBuffer(GL_NONE);
        glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D, depthTexture, 0);
        
        GLenum status = glCheckFramebufferStatus(GL_FRAMEBUFFER);
        if (status != GL_FRAMEBUFFER_COMPLETE)
            logError("Framebuffer ", framebuffer, " incomplete: ", status);
        
        glBindFramebuffer(GL_FRAMEBUFFER, 0);
    }
    
    /// Releases all OpenGL resources associated with the shadow map.
    void releaseBuffer()
    {
        if (glIsFramebuffer(framebuffer))
            glDeleteFramebuffers(1, &framebuffer);
        
        if (glIsTexture(depthTexture))
            glDeleteTextures(1, &depthTexture);
    }
    
    /**
     * Updates the shadow map for the current frame.
     *
     * Params:
     *   t = Frame timing information.
     */
    override void update(Time t)
    {
        invViewMatrix = translationMatrix(light.positionAbsolute) * light.rotationAbsolute.toMatrix4x4;
        viewMatrix = invViewMatrix.inverse;
        projectionMatrix = perspectiveMatrix(light.spotOuterCutoff * 2.0f, 1.0f, zNear, light.volumeRadius);
        shadowMatrix = projectionMatrix * viewMatrix;
    }
}
