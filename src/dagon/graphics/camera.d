/*
Copyright (c) 2019-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Defines the camera class.
 *
 * Description:
 * The `dagon.graphics.camera` module provides the `Camera` class,
 * which inherits from `Entity` and represents a view into the scene.
 * The camera supports perspective projection parameters (field of view,
 * near and far planes) and provides methods to obtain the view and inverse
 * view matrices for rendering.
 *
 * Copyright: Timur Gafarov 2019-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.graphics.camera;

import dlib.core.ownership;
import dlib.math.matrix;
import dlib.math.transformation;
import dagon.graphics.entity;

/**
 * Represents a camera in the scene, inheriting from `Entity`.
 *
 * Description:
 * The camera defines a view into the scene with projection parameters.
 * It provides methods to obtain the view and inverse view matrices
 * for rendering.
 */
class Camera: Entity
{
    /// Field of view in degrees (vertical) for perspective projection.
    float fov = 60.0f;

    /// Near clipping plane distance.
    float zNear = 0.01f;

    /// Far clipping plane distance.
    float zFar = 1000.0f;
    
    /**
     * Constructs a camera entity.
     *
     * Params:
     *   owner = The owner object.
     */
    this(Owner owner)
    {
        super(owner);
        
        visible = false;
        castShadow = false;
    }
    
    /**
     * Returns the view matrix for this camera.
     *
     * Returns:
     *   The inverse of the absolute transformation matrix.
     */
    Matrix4x4f viewMatrix()
    {
        return invAbsoluteTransformation;
    }
    
    /**
     * Returns the inverse view matrix for this camera.
     *
     * Returns:
     *   The absolute transformation matrix.
     */
    Matrix4x4f invViewMatrix()
    {
        return absoluteTransformation;
    }
    
    /**
     * Returns the projection matrix (perspective transform) for this camera
     * and given aspect ratio.
     *
     * Returns:
     *   The projection matrix.
     */
    Matrix4x4f projectionMatrix(float aspectRatio)
    {
         return perspectiveMatrix(fov, aspectRatio, zNear, zFar);
    }
}
