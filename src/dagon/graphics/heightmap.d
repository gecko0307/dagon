/*
Copyright (c) 2018-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Provides interfaces and implementations for height data sources.
 *
 * The `dagon.graphics.heightmap` module defines the `Heightmap` interface
 * for querying height values at arbitrary coordinates, and provides
 * implementations such as `ImageHeightmap` (using a grayscale image)
 * and `OpenSimplexHeightmap` (using procedural noise).
 * Heightmaps are used for terrain rendering and collision detection.
 *
 * Copyright: Timur Gafarov 2018-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.graphics.heightmap;

import std.math;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.image.image;

import dagon.graphics.opensimplex;

/**
 * Interface for heightmap data sources.
 * Implement this interface to provide height values for terrain or
 * procedural geometry.
 */
interface Heightmap
{
    /**
     * Returns the height value at the given (x, z) coordinates.
     *
     * Params:
     *   x = X coordinate (normalized or world space).
     *   z = Z coordinate (normalized or world space).
     * Returns:
     *   The height value at the specified coordinates.
     */
    float getHeight(float x, float z);
}

/**
 * Heightmap implementation based on a grayscale image.
 *
 * Description:
 * Samples height values from a `SuperImage` using bilinear
 * interpolation and a scale factor.
 */
class ImageHeightmap: Owner, Heightmap
{
    /// The source image.
    SuperImage img;

    /// Height scale factor.
    float scale;

    /**
     * Constructs an image-based heightmap.
     *
     * Params:
     *   img   = The source image. Its R-channel is used as a height source.
     *   scale = Height scale factor.
     *   owner = Owner object for memory/resource management.
     */
    this(SuperImage img, float scale, Owner owner)
    {
        super(owner);
        this.img = img;
        this.scale = scale;
    }

    /**
     * Returns the height value at the given (x, z) coordinates
     * multiplied by the `scale` parameter.
     *
     * Params:
     *   x = X coordinate (normalized 0..1).
     *   z = Z coordinate (normalized 0..1).
     * Returns:
     *   The scaled height value.
     */
    float getHeight(float x, float z)
    {
        return img.bilinearPixel(
            x * cast(float)img.width,
            z * cast(float)img.height).r * scale;
    }
}

/**
 * Heightmap implementation using procedural OpenSimplex noise.
 * Generates smooth, tileable height values using multiple noise layers.
 */
class OpenSimplexHeightmap: Owner, Heightmap
{
     /// The OpenSimplex noise generator.
    OpenSimplexNoise!float noise;

    /// If true, generates tileable noise.
    bool tiling = true;

    /// Scale and amplitude for each noise layer.
    float[2][3] scaleLayers =
    [
        [1.0, 15.0],
        [8.0, 20.0],
        [19.4, 15.0],
    ];

    /**
     * Constructs a procedural OpenSimplex heightmap.
     *
     * Params:
     *   owner = Owner object.
     */
    this(Owner owner)
    {
        super(owner);
        noise = New!(OpenSimplexNoise!float)(this);
    }

    /**
     * Returns the height value at the given (x, z) coordinates.
     *
     * Params:
     *   x = X coordinate (normalized 0..1).
     *   z = Z coordinate (normalized 0..1).
     * Returns:
     *   The height value.
     */
    float getHeight(float x, float z)
    {
        float multiplier = 1.0f / (2.0f * PI);
        
        float y = 0;
        foreach(psl; scaleLayers)
        {
            if (tiling)
            {
                float nx = cos(x * 2.0f * PI) * multiplier;
                float ny = cos(z * 2.0f * PI) * multiplier;
                float nz = sin(x * 2.0f * PI) * multiplier;
                float nw = sin(z * 2.0f * PI) * multiplier;
                
                y += noise.eval(nx * psl[0], ny * psl[0], nz * psl[0], nw * psl[0]) * psl[1];
            }
            else
            {
                y += noise.eval(x * psl[0], z * psl[0]) * psl[1];
            }
        }
        return y;
    }
}
