/*
Copyright (c) 2019-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Animation for entity properties.
 *
 * Description:
 * The `dagon.graphics.tween` module defines the `Tween` struct,
 * which supports smooth interpolation (tweening) of `Entity` properties
 * such as position, rotation, scaling, and color over time, using various
 * easing functions. Tweens can be paused, played, restarted, repeated, and killed,
 * and are typically used for procedural animation, cutscenes, and UI effects.
 *
 * Copyright: Timur Gafarov 2019-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.graphics.tween;

import dlib.math.vector;
import dlib.math.quaternion;
import dlib.math.interpolation;
import dlib.math.utils;
import dlib.image.color;
import dagon.graphics.entity;

/**
 * Types of data that can be tweened.
 */
enum TweenDataType
{
    Float,
    Vector,
    Color
}

/**
 * Types of tweenable properties.
 */
enum TweenType
{
    Unknown = 0,
    Position,
    Rotation,
    Scaling,
    Color,
    Alpha,
}

/**
 * Supported easing functions for tweening.
 */
enum Easing
{
    Linear,
    QuadIn,
    QuadOut,
    QuadInOut,
    BackIn,
    BackOut,
    BackInOut,
    BounceOut
}

/**
 * Tween struct for animating entity properties over time.
 *
 * Description:
 * Supports position, rotation, scaling, and color interpolation
 * with various easing functions. Tweens can be paused, played,
 * restarted, repeated, and killed.
 */
struct Tween
{
    /// The type of data being tweened.
    TweenDataType dataType;

    /// The property being tweened.
    TweenType type = TweenType.Unknown;

    /// The easing function used.
    Easing easing;

    /// If `true`, the tween is active.
    bool active = false;

    /// The entity being animated.
    Entity entity;

    /// Duration of the tween in seconds.
    double duration;

    /// Current time in the tween.
    double time = 0.0f;

    /// Number of times to repeat the tween.
    uint repeat = 1;

    /// Current repeat count.
    uint repeatCounter = 0;

    /// If true, the tween is playing.
    bool isPlaying = true;

    union
    {
        Color4f fromColor;
        Vector3f fromVector;
        float fromFloat;
    }

    union
    {
        Color4f toColor;
        Vector3f toVector;
        float toFloat;
    }

    void delegate(Tween* thisTween) onRepeat;
    void delegate(Tween* thisTween) onComplete;
    
    /// Constructs a no-op tween that animates nothing.
    this(Entity entity, double duration)
    {
        this.dataType = TweenDataType.Float;
        this.type = TweenType.Unknown;
        this.easing = Easing.Linear;
        this.active = true;
        this.entity = entity;
        this.duration = duration;
        this.time = 0.0f;
        this.fromFloat = 0.0f;
        this.toFloat = 0.0f;
        this.repeatCounter = 0;
        this.isPlaying = true;
    }

    /// Constructs a vector tween for position, rotation, or scaling.
    this(Entity entity, TweenType type, Vector3f start, Vector3f end, double duration, Easing easing = Easing.Linear)
    {
        this.dataType = TweenDataType.Vector;
        this.type = type;
        this.easing = easing;
        this.active = true;
        this.entity = entity;
        this.duration = duration;
        this.time = 0.0f;
        this.fromVector = start;
        this.toVector = end;
        this.repeatCounter = 0;
        this.isPlaying = true;
    }

    /// Constructs a color tween.
    this(Entity entity, TweenType type, Color4f start, Color4f end, double duration, Easing easing = Easing.Linear)
    {
        this.dataType = TweenDataType.Color;
        this.type = type;
        this.easing = easing;
        this.active = true;
        this.entity = entity;
        this.duration = duration;
        this.time = 0.0f;
        this.fromColor = start;
        this.toColor = end;
        this.repeatCounter = 0;
        this.isPlaying = true;
    }

    /// Constructs a float tween (e.g., opacity).
    this(Entity entity, TweenType type, float start, float end, double duration, Easing easing = Easing.Linear)
    {
        this.dataType = TweenDataType.Float;
        this.type = type;
        this.easing = easing;
        this.active = true;
        this.entity = entity;
        this.duration = duration;
        this.time = 0.0f;
        this.fromFloat = start;
        this.toFloat = end;
        this.repeatCounter = 0;
        this.isPlaying = true;
    }

    /// Pauses the tween.
    void pause()
    {
        isPlaying = false;
    }

    /// Resumes the tween.
    void play()
    {
        isPlaying = true;
    }

    /// Kills the tween and resets its state.
    void kill()
    {
        active = false;
        time = 0.0;
        repeatCounter = 0;
        isPlaying = false;
    }

    /// Restarts the tween from the beginning.
    void restart()
    {
        time = 0.0;
    }

    /**
     * Updates the tween by the given time delta.
     *
     * Params:
     *   dt = Time delta in seconds.
     */
    void update(double dt)
    {
        if (active && entity && isPlaying)
        {
            time += dt;
            float t;

            if (time >= duration)
            {
                time = duration;
                applyTween(1.0f);
                if (repeat >= 0)
                {
                    repeatCounter++;
                    if (repeatCounter == repeat)
                    {
                        active = false;
                        isPlaying = false;
                        t = 1.0f;
                        if (onComplete)
                            onComplete(&this);
                        repeatCounter = 0;
                    }
                    else
                    {
                        time = 0.0;
                        t = 0.0f;
                        if (onRepeat)
                            onRepeat(&this);
                    }
                }
                else
                {
                    time = 0.0;
                    t = 0.0f;
                    if (onRepeat)
                        onRepeat(&this);
                }
            }
            else
            {
                t = time / duration;
                applyTween(t);
            }
        }
    }

    /**
     * Applies the tweened value to the entity at the given normalized time.
     *
     * Params:
     *   t = Normalized time (0.0 .. 1.0).
     */
    void applyTween(float t)
    {
        if (type == TweenType.Position)
            entity.position = lerp(fromVector, toVector, ease(t));
        else if (type == TweenType.Rotation)
            entity.angles = lerp(fromVector, toVector, ease(t));
        else if (type == TweenType.Scaling)
            entity.scaling = lerp(fromVector, toVector, ease(t));
        else if (type == TweenType.Alpha)
            entity.opacity = lerp(fromFloat, toFloat, ease(t));
    }

    /**
     * Calculates the eased time value according to the selected easing function.
     *
     * Params:
     *   t = Normalized time (0.0 .. 1.0).
     * Returns:
     *   The eased time value.
     */
    float ease(float t)
    {
        if (easing == Easing.Linear) return t;
        else if (easing == Easing.QuadIn) return easeInQuad(t);
        else if (easing == Easing.QuadOut) return easeOutQuad(t);
        else if (easing == Easing.QuadInOut) return easeInOutQuad(t);
        else if (easing == Easing.BackIn) return easeInBack(t);
        else if (easing == Easing.BackOut) return easeOutBack(t);
        else if (easing == Easing.BackInOut) return easeInOutBack(t);
        else if (easing == Easing.BounceOut) return easeOutBounce(t);
        else return t;
    }
}
