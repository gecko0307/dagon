/*
Copyright (c) 2018-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * A screen-aligned quad mesh for post-processing and fullscreen effects.
 *
 * Description:
 * The `dagon.graphics.screensurface` module defines the `ScreenSurface` class,
 * which creates and manages a fullscreen quad mesh with vertex and texture
 * coordinates, OpenGL buffers, and rendering logic. This is typically used
 * for post-processing passes, screen-space effects, and rendering
 * to the backbuffer or offscreen targets.
 *
 * Copyright: Timur Gafarov 2018-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.graphics.screensurface;

import dlib.core.ownership;
import dlib.math.vector;
import dlib.math.matrix;

import dagon.core.bindings;
import dagon.graphics.drawable;
import dagon.graphics.state;

/**
 * A drawable screen-aligned quad for fullscreen rendering and post-processing.
 *
 * Description:
 * The `ScreenSurface` class manages vertex and texture coordinate buffers,
 * OpenGL VAO/VBO/EBO, and provides a render method for drawing the quad.
 * Useful for post-processing, compositing, and screen-space effects.
 */
class ScreenSurface: Owner, Drawable
{
    /// Quad vertex positions in normalized device coordinates.
    Vector2f[4] vertices;

    /// Quad texture coordinates.
    Vector2f[4] texcoords;

    /// Triangle indices for the quad.
    uint[3][2] indices;
    
    /// OpenGL vertex array object.
    GLuint vao = 0;

    /// OpenGL vertex buffer object for positions.
    GLuint vbo = 0;

    /// OpenGL vertex buffer object for texture coordinates.
    GLuint tbo = 0;

    /// OpenGL element array object for indices.
    GLuint eao = 0;
    
    /**
     * Constructs a screen surface quad and initializes OpenGL buffers.
     *
     * Params:
     *   owner = The owner object.
     */
    this(Owner owner)
    {
        super(owner);
        
        vertices[0] = Vector2f(0, 0);
        vertices[1] = Vector2f(0, 1);
        vertices[2] = Vector2f(1, 0);
        vertices[3] = Vector2f(1, 1);
        
        texcoords[0] = Vector2f(0, 1);
        texcoords[1] = Vector2f(0, 0);
        texcoords[2] = Vector2f(1, 1);
        texcoords[3] = Vector2f(1, 0);
        
        indices[0][0] = 0;
        indices[0][1] = 1;
        indices[0][2] = 2;
        
        indices[1][0] = 2;
        indices[1][1] = 1;
        indices[1][2] = 3;
        
        glGenBuffers(1, &vbo);
        glBindBuffer(GL_ARRAY_BUFFER, vbo);
        glBufferData(GL_ARRAY_BUFFER, vertices.length * float.sizeof * 2, vertices.ptr, GL_STATIC_DRAW); 

        glGenBuffers(1, &tbo);
        glBindBuffer(GL_ARRAY_BUFFER, tbo);
        glBufferData(GL_ARRAY_BUFFER, texcoords.length * float.sizeof * 2, texcoords.ptr, GL_STATIC_DRAW);

        glGenBuffers(1, &eao);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, eao);
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.length * uint.sizeof * 3, indices.ptr, GL_STATIC_DRAW);

        glGenVertexArrays(1, &vao);
        glBindVertexArray(vao);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, eao);
    
        glEnableVertexAttribArray(0);
        glBindBuffer(GL_ARRAY_BUFFER, vbo);
        glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 0, null);
    
        glEnableVertexAttribArray(1);
        glBindBuffer(GL_ARRAY_BUFFER, tbo);
        glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 0, null);

        glBindVertexArray(0);
    }
    
    /// Destructor. Releases all OpenGL resources.
    ~this()
    {
        glDeleteVertexArrays(1, &vao);
        glDeleteBuffers(1, &vbo);
        glDeleteBuffers(1, &tbo);
        glDeleteBuffers(1, &eao);
    }
    
    /**
     * Renders the screen-aligned quad using the provided graphics pipeline state.
     *
     * Params:
     *   state = Pointer to the current graphics pipeline state.
     */
    void render(GraphicsState* state)
    {
        glDisable(GL_DEPTH_TEST);
        glDepthMask(GL_FALSE);
        glBindVertexArray(vao);
        glDrawElements(GL_TRIANGLES, cast(uint)indices.length * 3, GL_UNSIGNED_INT, cast(void*)0);
        glBindVertexArray(0);
        glDepthMask(GL_TRUE);
        glEnable(GL_DEPTH_TEST);
    }
}
