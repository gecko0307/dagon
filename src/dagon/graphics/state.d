/*
Copyright (c) 2019-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Graphics pipeline state.
 *
 * Description:
 * The `dagon.graphics.state` module defines the `GraphicsState` structure,
 * which encapsulates all rendering state and context information needed
 * for drawing objects.
 * `GraphicsState` includes transformation matrices, camera parameters,
 * material and shader references, render targets, timing, and various
 * rendering flags. It is fed to the render passes and `Drawable` objects
 * to provide all necessary context for rendering.
 *
 * Copyright: Timur Gafarov 2019-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.graphics.state;

import dlib.math.vector;
import dlib.math.matrix;
import dlib.geometry.frustum;
import dlib.image.color;

import dagon.core.bindings;
import dagon.core.time;
import dagon.graphics.material;
import dagon.graphics.shader;
import dagon.graphics.environment;
import dagon.graphics.light;
import dagon.graphics.pose;

/**
 * Encapsulates all rendering state and context for a draw call.
 */
struct GraphicsState
{
    /// Color used for debug rendering.
    Color4f debugColor;

    /// If `true`, enables debug rendering.
    bool debugMode;
    
    /// Render layer index.
    int layer;

    /// Velocity output mask value (for motion blur).
    float blurMask;

    /// G-buffer output mask value.
    float gbufferMask;

    /// Output resolution (viewport width, height).
    Vector2f resolution;

    /// Near clipping plane.
    float zNear;

    /// Far clipping plane.
    float zFar;

    /// Camera position in world space.
    Vector3f cameraPosition;

    /// Matrix that transforms from model space to world space.
    Matrix4x4f modelMatrix;

    /// Inverse model matrix.
    Matrix4x4f invModelMatrix;

    /// Inverse of the view rotation matrix.
    Matrix4x4f invViewRotationMatrix;

    /// View (camera) matrix. Transforms from world space to eye space
    Matrix4x4f viewMatrix;

    /// Inverse view matrix.
    Matrix4x4f invViewMatrix;

    /// Projection matrix. Transforms from eye space to clip space
    Matrix4x4f projectionMatrix;

    /// Inverse projection matrix.
    Matrix4x4f invProjectionMatrix;

    /// Combined model-view matrix.
    Matrix4x4f modelViewMatrix;

    /// Model matrix for transforming normals.
    Matrix4x4f normalMatrix;
    
    /// Previous frame's view matrix.
    Matrix4x4f prevViewMatrix;

    /// Previous frame's model-view matrix.
    Matrix4x4f prevModelViewMatrix;
    
    /// View frustum for culling.
    Frustum frustum;

    /// Material used for rendering.
    Material material;

    /// Shader used for rendering.
    Shader shader;

    /// Environment options (IBL, fog, etc.).
    Environment environment;

    /// Main light affecting the draw call.
    Light light;

    /// Fixed lights array for forward pipelines.
    Light[8] lights;
    
    /// Number of fixed lights.
    uint numLights;

    /// Skeletal pose for GPU skinning.
    Pose pose;

    /// If `false`, disables color buffer writes.
    bool colorMask;

    /// If `false`, disables depth buffer writes.
    bool depthMask;

    /// If `true`, enables face culling.
    bool culling;
    
    /// Opacity value for alpha blending.
    float opacity;

    /// Input color buffer texture.
    GLuint colorTexture;

    /// Input depth buffer texture.
    GLuint depthTexture;

    /// Input normal buffer texture.
    GLuint normalTexture;
    
    /// Input PBR buffer texture.
    GLuint pbrTexture;

    /// Input occlusion buffer texture.
    GLuint occlusionTexture;
    
    /// Input emission buffer texture.
    GLuint emissionTexture;

    /// Input texcoord buffer texture (used only for terrains).
    GLuint texcoordTexture;
    
    /// Frame timing information.
    Time time;
    
    /// Normalized local time (0.0 .. 1.0).
    float localTime;

    /**
     * Resets all fields of the graphics state to their default values.
     */
    void reset()
    {
        debugColor = Color4f(0.0f, 0.0f, 0.0f, 0.0f);
        debugMode = false;

        layer = 1;
        blurMask = 1.0f;
        gbufferMask = 1.0f;

        resolution = Vector2f(0.0f, 0.0f);
        zNear = 0.0f;
        zFar = 0.0f;

        cameraPosition = Vector3f(0.0f, 0.0f, 0.0f);

        modelMatrix = Matrix4x4f.identity;
        invModelMatrix = Matrix4x4f.identity;

        viewMatrix = Matrix4x4f.identity;
        invViewMatrix = Matrix4x4f.identity;
        invViewRotationMatrix = Matrix4x4f.identity;

        projectionMatrix = Matrix4x4f.identity;
        invProjectionMatrix = Matrix4x4f.identity;

        modelViewMatrix = Matrix4x4f.identity;
        normalMatrix = Matrix4x4f.identity;
        
        prevViewMatrix = Matrix4x4f.identity;
        prevModelViewMatrix = Matrix4x4f.identity;

        material = null;
        shader = null;
        environment = null;
        light = null;
        lights[] = null;
        numLights = 0;
        pose = null;

        colorMask = true;
        depthMask = true;

        culling = true;
        
        opacity = 1.0f;

        colorTexture = 0;
        depthTexture = 0;
        normalTexture = 0;
        pbrTexture = 0;
        occlusionTexture = 0;
        texcoordTexture = 0;
        
        time = Time(0.0, 0.0);
        localTime = 0.0f;
    }
}
