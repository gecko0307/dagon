/*
Copyright (c) 2017-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Provides the base class for shadow mapping.
 *
 * Description:
 * The `dagon.graphics.shadowmap` module defines the abstract `ShadowMap` class,
 * which provides an interface for managing and using a shadow map.
 * Derived classes implement specific shadow mapping techniques.
 * Shadow maps are used to render and sample shadows cast by lights in the scene.
 *
 * Copyright: Timur Gafarov 2017-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.graphics.shadowmap;

import dlib.core.ownership;

import dagon.core.bindings;
import dagon.core.time;
import dagon.graphics.light;
import dagon.graphics.shader;

/**
 * Abstract base class for shadow maps.
 *
 * Description:
 * Manages the resolution, associated light, and provides
 * an interface for enabling, resizing, and updating shadow maps.
 * Derived classes implement specific shadow mapping techniques.
 */
abstract class ShadowMap: Owner
{
    /// The resolution of the shadow map texture.
    uint resolution;

    /// The light source associated with this shadow map.
    Light light;

    /**
     * Constructs a shadow map for the given owner.
     *
     * Params:
     *   owner = The owner object.
     */
    this(Owner owner)
    {
        super(owner);
    }

    /// Returns `true` if the shadow map is enabled (the light casts shadows).
    bool enabled() const @property
    {
        return light.shadowEnabled;
    }
    
    /**
     * Resizes the shadow map to the given resolution.
     *
     * Params:
     *   res = The new resolution.
     */
    void resize(uint res) {}

    /**
     * Updates the shadow map for the current frame.
     *
     * Params:
     *   t = Frame timing information.
     */
    void update(Time t) {}
}
