/*
Copyright (c) 2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * An abstract interface for skeletal animation poses.
 *
 * The `dagon.graphics.pose` module defines the `Pose` abstract class,
 * which manages bone transformation matrices for GPU skinning,
 * animation timing, and playback state. Implementations of `Pose` should
 * allocate and fill the `boneMatrices` array, which is used by vertex
 * shaders for skeletal animation. Dagon supports up to 128 bone matrices
 * for GPU skinning per pose.
 *
 * Copyright: Timur Gafarov 2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.graphics.pose;

import dlib.core.ownership;
import dlib.math.matrix;
import dagon.core.time;

/**
 * Abstract interface for a skeletal animation pose.
 *
 * Implementations should allocate and fill `boneMatrices` with up to
 * 128 bone transforms. If the `Pose` object is set in `GraphicsState`,
 * its bone matrices will be fed to mesh vertex shaders.
 * A single bone matrix applies a bone's local transform to a model-space vertex.
 */
abstract class Pose: Owner
{
    /// Array of bone transformation matrices (max 128).
    Matrix4x4f[] boneMatrices;

    /// Animation timing information.
    Time time;

    /// True if the pose is valid and ready for use.
    bool valid = false;

    /// True if the animation is currently playing.
    bool playing = false;
    
    /**
     * Constructs a pose object.
     *
     * Params:
     *   owner = Owner object.
     */
    this(Owner owner)
    {
        super(owner);
        this.time = Time(0.0, 0.0);
    }
    
    /**
     * Updates the pose for the given time.
     *
     * Params:
     *   t = Frame timing information.
     */
    void update(Time t);
    
    /// Starts or resumes animation playback.
    void play()
    {
        playing = true;
    }
    
    /// Pauses animation playback.
    void pause()
    {
        playing = false;
    }
    
    /// Resets the animation time to zero.
    void reset()
    {
        time.elapsed = 0;
    }
}
