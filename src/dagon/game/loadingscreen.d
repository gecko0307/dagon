/*
Copyright (c) 2019-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * A simple loading screen implementation.
 *
 * Description:
 * The `dagon.game.loadingscreen` module defines the `LoadingScreen` class,
 * which displays a progress bar during asset or scene loading.
 *
 * Copyright: Timur Gafarov 2019-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.game.loadingscreen;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.math.vector;
import dlib.math.matrix;
import dlib.math.transformation;
import dlib.math.interpolation;
import dlib.image.color;

import dagon.core.bindings;
import dagon.core.application;
import dagon.core.event;
import dagon.core.time;
import dagon.graphics.state;
import dagon.graphics.entity;
import dagon.graphics.shapes;
import dagon.graphics.material;
import dagon.render.hud;

/**
 * Displays a loading progress bar on the screen during asset or scene loading.
 */
class LoadingScreen: EventListener
{
    /// The application object.
    Application app;

    /// The quad shape representing the progress bar.
    ShapeQuad progressBarShape;

    /// The entity for the progress bar.
    Entity progressBarEntity;

    /// The HUD shader used for rendering.
    HUDShader hudShader;

    /**
     * Constructs a loading screen for the given application.
     *
     * Params:
     *   app    = The application object.
     *   owner  = The owner object.
     */
    this(Application app, Owner owner)
    {
        super(app.eventManager, owner);
        this.app = app;
        progressBarShape = New!ShapeQuad(this);
        progressBarEntity = New!Entity(this);
        progressBarEntity.drawable = progressBarShape;
        hudShader = New!HUDShader(this);
        progressBarEntity.material = New!Material(this);
        progressBarEntity.material.baseColorFactor = Color4f(1.0f, 1.0f, 1.0f, 1.0f);
        progressBarEntity.material.useCulling = false;
    }

    /**
     * Updates the loading progress bar.
     *
     * Params:
     *   t        = Frame timing information.
     *   progress = Loading progress (0..1).
     */
    void update(Time t, float progress)
    {
        float maxWidth = eventManager.windowWidth * 0.33f;
        float x = (eventManager.windowWidth - maxWidth) * 0.5f;
        float y = eventManager.windowHeight * 0.5f - 10;
        float w = progress * maxWidth;
        progressBarEntity.position = Vector3f(x, y, 0);
        progressBarEntity.scaling = Vector3f(w, 10, 1);
        progressBarEntity.update(t);
    }

    /// Renders the loading screen and progress bar.
    void render()
    {
        GraphicsState state;
        state.reset();
        state.modelViewMatrix = progressBarEntity.absoluteTransformation;
        state.projectionMatrix = orthoMatrix(0.0f, eventManager.windowWidth, eventManager.windowHeight, 0.0f, 0.0f, 1000.0f);
        state.invProjectionMatrix = state.projectionMatrix.inverse;
        state.resolution = Vector2f(eventManager.windowWidth, eventManager.windowHeight);
        state.zNear = 0.0f;
        state.zFar = 1000.0f;

        glScissor(0, 0, eventManager.windowWidth, eventManager.windowHeight);
        glViewport(0, 0, eventManager.windowWidth, eventManager.windowHeight);

        glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        state.modelViewMatrix = state.viewMatrix * progressBarEntity.absoluteTransformation;
        state.normalMatrix = state.modelViewMatrix.inverse.transposed;
        state.shader = hudShader;

        if (progressBarEntity.material)
            progressBarEntity.material.bind(&state);

        hudShader.bind();
        hudShader.bindParameters(&state);

        if (progressBarEntity.drawable)
            progressBarEntity.drawable.render(&state);

        hudShader.unbindParameters(&state);
        hudShader.unbind();

        if (progressBarEntity.material)
            progressBarEntity.material.unbind(&state);
    }
}
