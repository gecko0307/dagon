/*
Copyright (c) 2019-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Core game logic for Dagon-based applications.
 *
 * Description:
 * The `dagon.game.game` module defines the `Game` class, which serves
 * as a basic template for creating a game application using Dagon's built-in
 * rendering and resource management systems. The `Game` class provides
 * deferred renderer, post-processing renderer, methods for managing scenes,
 * and handles window resize event for correctly updating all render
 * targets.
 *
 * Copyright: Timur Gafarov 2019-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.game.game;

import std.stdio;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.core.stream;
import dlib.container.dict;

import dagon.core.logger;
import dagon.core.bindings;
import dagon.core.event;
import dagon.core.time;
import dagon.core.config;
import dagon.core.application;
import dagon.graphics.state;
import dagon.graphics.entity;
import dagon.resource.scene;
import dagon.resource.asset;
import dagon.render.renderer;
import dagon.render.deferred;
import dagon.render.postproc;
import dagon.render.present;
import dagon.render.hud;

/**
 * Main game class for Dagon applications.
 *
 * Description:
 * Manages scenes and rendering. The `Game` class is a subclass
 * of `Application` and provides a framework for creating games
 * that use Dagon's deferred renderer.
 */
class Game: Application
{
    /// Global asset manager.
    AssetManager assetManager;
    
    /// The dictionary of scenes, mapping scene objects to their names.
    Dict!(Scene, string) scenes;

    /// The current scene being processed and rendered.
    Scene currentScene;

    /// The configuration object for storing user-defined renderer settings.
    Configuration rendererConfig;

    /// Active renderer.
    Renderer renderer;

    /// Deferred renderer.
    DeferredRenderer deferredRenderer;

    /// Post-processing renderer.
    PostProcRenderer postProcessingRenderer;

    /// Present renderer.
    PresentRenderer presentRenderer;

    /// HUD renderer.
    HUDRenderer hudRenderer;
    
    alias deferred = deferredRenderer;
    alias postProc = postProcessingRenderer;
    alias present = presentRenderer;
    alias hud = hudRenderer;
    
    /// If `true`, the viewport will be resized dynamically with the application window.
    bool dynamicViewport = true;
    
    Scene sceneForDeletion = null;

    /**
     * Constructs a new game instance.
     *
     * Params:
     *   w = Default window width (if `windowWidth` is not defined in `setting.conf`).
     *   h = Default window height (if `windowHeight` is not defined in `setting.conf`).
     *   fullscreen = Default fullscreen mode (if `fullscreen` is not defined in `setting.conf`).
     *   title = Default window title (if `windowTitle` not defined in `setting.conf`).
     *   args = Optional command line arguments.
     *   appFolder = Optional game data folder name (used under the HOME or APPDATA directory). ".dagon" by default.
     */
    this(uint w, uint h, bool fullscreen, string title, string[] args, string appFolder = ".dagon")
    {
        super(w, h, fullscreen, title, args, appFolder);
        
        assetManager = New!AssetManager(eventManager, vfs, this);
        assetManager.application = this;
        
        scenes = dict!(Scene, string);
        
        rendererConfig = New!Configuration(this);
        foreach(fs; vfs.mounted)
        {
            rendererConfig.fromFile(fs, "render.conf");
        }
        
        deferredRenderer = New!DeferredRenderer(eventManager, this);
        renderer = deferredRenderer;
        postProcessingRenderer = New!PostProcRenderer(eventManager, deferredRenderer.outputBuffer, deferredRenderer.gbuffer, this);
        presentRenderer = New!PresentRenderer(eventManager, postProcessingRenderer.outputBuffer, this);
        hudRenderer = New!HUDRenderer(eventManager, this);
        
        renderer.setViewport(0, 0, drawableWidth, drawableHeight);
        postProcessingRenderer.setViewport(0, 0, drawableWidth, drawableHeight);
        presentRenderer.setViewport(0, 0, drawableWidth, drawableHeight);
        hudRenderer.setViewport(0, 0, drawableWidth, drawableHeight);
        
        // Default renderer configuration
        if ("ssao.enabled" in rendererConfig.props)
            deferredRenderer.ssaoEnabled = cast(bool)(rendererConfig.props["ssao.enabled"].toUInt);
        if ("ssao.samples" in rendererConfig.props)
            deferredRenderer.ssaoSamples = rendererConfig.props["ssao.samples"].toUInt;
        if ("ssao.radius" in rendererConfig.props)
            deferredRenderer.ssaoRadius = rendererConfig.props["ssao.radius"].toFloat;
        if ("ssao.power" in rendererConfig.props)
            deferredRenderer.ssaoPower = rendererConfig.props["ssao.power"].toFloat;
        if ("ssao.denoise" in rendererConfig.props)
            deferredRenderer.ssaoDenoise = rendererConfig.props["ssao.denoise"].toFloat;
        if ("ssao.occlusionBufferDetail" in rendererConfig.props)
            deferredRenderer.occlusionBufferDetail = rendererConfig.props["ssao.occlusionBufferDetail"].toFloat;
        
        if ("motionBlur.enabled" in rendererConfig.props)
            postProcessingRenderer.motionBlurEnabled = cast(bool)(rendererConfig.props["motionBlur.enabled"].toUInt);
        if ("motionBlur.samples" in rendererConfig.props)
            postProcessingRenderer.motionBlurSamples = rendererConfig.props["motionBlur.samples"].toUInt;
        if ("motionBlur.framerate" in rendererConfig.props)
            postProcessingRenderer.motionBlurFramerate = rendererConfig.props["motionBlur.framerate"].toUInt;
        if ("motionBlur.randomness" in rendererConfig.props)
            postProcessingRenderer.motionBlurRandomness = rendererConfig.props["motionBlur.randomness"].toFloat;
        if ("motionBlur.minDistance" in rendererConfig.props)
            postProcessingRenderer.motionBlurMinDistance = rendererConfig.props["motionBlur.minDistance"].toFloat;
        if ("motionBlur.maxDistance" in rendererConfig.props)
            postProcessingRenderer.motionBlurMaxDistance = rendererConfig.props["motionBlur.maxDistance"].toFloat;
        if ("motionBlur.radialBlurAmount" in rendererConfig.props)
            postProcessingRenderer.radialBlurAmount = rendererConfig.props["motionBlur.radialBlurAmount"].toFloat;
        
        if ("glow.enabled" in rendererConfig.props)
            postProcessingRenderer.glowEnabled = cast(bool)(rendererConfig.props["glow.enabled"].toUInt);
        if ("glow.viewScale" in rendererConfig.props)
            postProcessingRenderer.glowViewScale = rendererConfig.props["glow.viewScale"].toFloat;
        if ("glow.threshold" in rendererConfig.props)
            postProcessingRenderer.glowThreshold = rendererConfig.props["glow.threshold"].toFloat;
        if ("glow.intensity" in rendererConfig.props)
            postProcessingRenderer.glowIntensity = rendererConfig.props["glow.intensity"].toFloat;
        if ("glow.radius" in rendererConfig.props)
            postProcessingRenderer.glowRadius = rendererConfig.props["glow.radius"].toUInt;
        
        if ("fxaa.enabled" in rendererConfig.props)
            postProcessingRenderer.fxaaEnabled = cast(bool)(rendererConfig.props["fxaa.enabled"].toUInt);
        
        if ("lensDistortion.enabled" in rendererConfig.props)
            postProcessingRenderer.lensDistortionEnabled = cast(bool)(rendererConfig.props["lensDistortion.enabled"].toUInt);
        if ("lensDistortion.scale" in rendererConfig.props)
            postProcessingRenderer.lensDistortionScale = rendererConfig.props["lensDistortion.scale"].toFloat;
        if ("lensDistortion.dispersion" in rendererConfig.props)
            postProcessingRenderer.lensDistortionDispersion = rendererConfig.props["lensDistortion.dispersion"].toFloat;
        
        if ("hdr.tonemapper" in rendererConfig.props)
        {
            string tonemapper = rendererConfig.props["hdr.tonemapper"].toString;
            if (tonemapper == "None")
                postProcessingRenderer.tonemapper = Tonemapper.None;
            else if (tonemapper == "Reinhard")
                postProcessingRenderer.tonemapper = Tonemapper.Reinhard;
            else if (tonemapper == "Hable")
                postProcessingRenderer.tonemapper = Tonemapper.Hable;
            else if (tonemapper == "Uncharted")
                postProcessingRenderer.tonemapper = Tonemapper.Uncharted;
            else if (tonemapper == "ACES")
                postProcessingRenderer.tonemapper = Tonemapper.ACES;
            else if (tonemapper == "Filmic")
                postProcessingRenderer.tonemapper = Tonemapper.Filmic;
            else if (tonemapper == "Reinhard2")
                postProcessingRenderer.tonemapper = Tonemapper.Reinhard2;
            else if (tonemapper == "Unreal")
                postProcessingRenderer.tonemapper = Tonemapper.Unreal;
            else if (tonemapper == "AgX_Base")
                postProcessingRenderer.tonemapper = Tonemapper.AgX_Base;
            else if (tonemapper == "AgX_Punchy")
                postProcessingRenderer.tonemapper = Tonemapper.AgX_Punchy;
            else if (tonemapper == "KhronosPBRNeutral")
                postProcessingRenderer.tonemapper = Tonemapper.KhronosPBRNeutral;
            else
                logError("Unknown tonemapper: \"", tonemapper, "\"");
        }
        if ("hdr.exposure" in rendererConfig.props)
            postProcessingRenderer.exposure = rendererConfig.props["hdr.exposure"].toFloat;
        
        if ("dof.enabled" in rendererConfig.props)
            postProcessingRenderer.depthOfFieldEnabled = cast(bool)(rendererConfig.props["dof.enabled"].toUInt);
        if ("dof.autofocus" in rendererConfig.props)
            postProcessingRenderer.autofocus = cast(bool)(rendererConfig.props["dof.autofocus"].toUInt);
        if ("dof.focalDepth" in rendererConfig.props)
            postProcessingRenderer.focalDepth = rendererConfig.props["dof.focalDepth"].toFloat;
        if ("dof.focalLength" in rendererConfig.props)
            postProcessingRenderer.focalLength = rendererConfig.props["dof.focalLength"].toFloat;
        if ("dof.fStop" in rendererConfig.props)
            postProcessingRenderer.fStop = rendererConfig.props["dof.fStop"].toFloat;
        if ("dof.manual" in rendererConfig.props)
            postProcessingRenderer.dofManual = cast(bool)(rendererConfig.props["dof.manual"].toUInt);
        if ("dof.nearStart" in rendererConfig.props)
            postProcessingRenderer.dofNearStart = rendererConfig.props["dof.nearStart"].toFloat;
        if ("dof.nearDistance" in rendererConfig.props)
            postProcessingRenderer.dofNearDistance = rendererConfig.props["dof.nearDistance"].toFloat;
        if ("dof.farStart" in rendererConfig.props)
            postProcessingRenderer.dofFarStart = rendererConfig.props["dof.farStart"].toFloat;
        if ("dof.farDistance" in rendererConfig.props)
            postProcessingRenderer.dofFarDistance = rendererConfig.props["dof.farDistance"].toFloat;
        
        if ("lut.enabled" in rendererConfig.props)
            postProcessingRenderer.lutEnabled = cast(bool)(rendererConfig.props["lut.enabled"].toUInt);
        if ("lut.file" in rendererConfig.props)
        {
            string lutFilename = rendererConfig.props["lut.file"].toString;
            if (lutFilename.length)
            {
                postProcessingRenderer.loadDefaultLUT(assetManager, lutFilename);
            }
        }
        
        if ("pixelization.enabled" in rendererConfig.props)
            presentRenderer.pixelization = cast(bool)(rendererConfig.props["pixelization.enabled"].toUInt);
        if ("pixelization.pixelSize" in rendererConfig.props)
            presentRenderer.pixelSize = rendererConfig.props["pixelization.pixelSize"].toFloat;
        
        string brdfFilename = "data/__internal/textures/brdf.dds";
        if ("brdf.file" in rendererConfig.props)
            brdfFilename = rendererConfig.props["brdf.file"].toString;
        if (brdfFilename.length)
        {
            InputStream istrm = this.openFile(brdfFilename);
            if (istrm)
            {
                deferredRenderer.loadDefaultBRDF(istrm);
                Delete(istrm);
            }
            else
                logWarning(brdfFilename, " not found");
        }
    }
    
    /// Destructor for the `Game` class.
    ~this()
    {
        Delete(scenes);
    }

    /**
     * Called every frame to update game logic.
     *
     * Params:
     *   t = Time information for the frame.
     */
    override void onUpdate(Time t)
    {
        if (sceneForDeletion)
        {
            deleteOwnedObject(sceneForDeletion);
            sceneForDeletion = null;
        }
        
        if (currentScene)
        {
            currentScene.update(t);
            
            renderer.scene = currentScene;
            renderer.update(t);
            
            postProcessingRenderer.activeCamera = renderer.activeCamera;
            postProcessingRenderer.update(t);
            
            presentRenderer.scene = currentScene;
            presentRenderer.update(t);
            
            hudRenderer.scene = currentScene;
            hudRenderer.update(t);
        }
        
        postProcessingRenderer.inputBuffer = renderer.outputBuffer;
    }

    /// Called every frame to render the current scene.
    override void onRender()
    {
        if (currentScene)
        {
            if (currentScene.canRender)
            {
                renderer.render();
                postProcessingRenderer.render();
                presentRenderer.inputBuffer = postProcessingRenderer.outputBuffer;
                presentRenderer.render();
                hudRenderer.render();
                currentScene.afterRender();
            }
        }
    }
    
    void resizeRenderers(int width, int height)
    {
        if (renderer)
            renderer.setViewport(0, 0, drawableWidth, drawableHeight);
        if (postProcessingRenderer)
            postProcessingRenderer.setViewport(0, 0, drawableWidth, drawableHeight);
        if (presentRenderer)
            presentRenderer.setViewport(0, 0, drawableWidth, drawableHeight);
        if (hudRenderer)
            hudRenderer.setViewport(0, 0, drawableWidth, drawableHeight);
    }
    
    /**
     * Handles window resize events.
     *
     * Params:
     *   width = New width.
     *   height = New height.
     */
    override void onResize(int width, int height)
    {
        if (dynamicViewport)
            resizeRenderers(width, height);
    }
    
    /// Returns OpenGL texture object of the presented frame
    GLuint frameTexture() @property
    {
        return presentRenderer.inputBuffer.colorTexture;
    }
    
    /**
     * Sets current scene to the specified scene object.
     * Params:
     *   scene = `Scene` object.
     *   releaseCurrent = if `true`, the current scene will be deleted after the switch.
     */
    void setCurrentScene(Scene scene, bool releaseCurrent = false)
    {
        if (releaseCurrent && currentScene)
        {
            sceneForDeletion = currentScene;
        }
        
        currentScene = scene;
        currentScene.onResize(eventManager.windowWidth, eventManager.windowHeight);
        if (currentScene.loaded)
            currentScene.onReset();
    }
    
    /**
     * Sets current scene to the specified scene name.
     * Params:
     *   name = name of an existing scene in `scenes` dictionary.
     *   releaseCurrent = if `true`, the current scene will be deleted after the switch.
     */
    void setCurrentScene(string name, bool releaseCurrent = false)
    {
        if (name in scenes)
            setCurrentScene(scenes[name], releaseCurrent);
    }
}
