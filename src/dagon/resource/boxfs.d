/*
Copyright (c) 2017-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * A virtual read-only file system for accessing files packed in Box archives.
 *
 * Description:
 * The `dagon.resource.boxfs` module defines the `BoxFileSystem` class, which
 * allows mounting and reading files from a Box archive format. This is useful
 * for distributing game assets as a single file, supporting virtual file system
 * operations such as file lookup, streaming, and stat queries. The module also
 * provides an `UnmanagedArrayStream` for efficient buffer access.
 *
 * An utility for packing and unpacking *.box files:
 * $(LINK2 https://github.com/gecko0307/box, https://github.com/gecko0307/box).
 *
 * Copyright: Timur Gafarov 2017-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.resource.boxfs;

import std.stdio;
import std.datetime;
import std.algorithm;

import dlib.core.memory;
import dlib.core.stream;
import dlib.filesystem.filesystem;
import dlib.container.dict;
import dlib.container.array;
import dlib.text.utils;

/**
 * Represents a file entry in a box archive.
 */
struct BoxEntry
{
    /// Offset of the file data in the archive.
    ulong offset;

    /// Size of the file data in bytes.
    ulong size;
}

/**
 * An array stream interface for a raw buffer.
 * Used for reading data from a buffer extracted from a box archive.
 */
class UnmanagedArrayStream: ArrayStream
{
    ubyte[] buffer;

    /**
     * Constructs an unmanaged array stream from a buffer.
     *
     * Params:
     *   data = The buffer to stream from.
     */
    this(ubyte[] data)
    {
        super(data, data.length);
        buffer = data;
    }

    /// Destructor. Releases the buffer.
    ~this()
    {
        Delete(buffer);
    }
}

/**
 * Read-only file system for accessing files in a Box archive.
 *
 * Supports file lookup, streaming, and stat queries.
 * Can mount a *.box file from a filename or input stream,
 * and optionally restrict access to a subdirectory within the archive.
 */
class BoxFileSystem: ReadOnlyFileSystem
{
    /// The underlying stream for the box file.
    InputStream boxStrm;

    /// Root directory within the archive.
    string rootDir = "";

    /// Map of filenames to file entries.
    Dict!(BoxEntry, string) files;

    /// List of all filenames in the archive.
    Array!string filenames;

    /// If true, deletes the stream on destruction.
    bool deleteStream = false;

    /**
     * Constructs a Box file system from a file system and filename.
     *
     * Params:
     *   fs       = The underlying file system.
     *   filename = The box archive filename.
     *   rootDir  = Optional root directory within the archive.
     */
    this(ReadOnlyFileSystem fs, string filename, string rootDir = "")
    {
        this(fs.openForInput(filename), true, rootDir);
    }

    /**
     * Constructs a Box file system from an input stream.
     *
     * Params:
     *   istrm        = The input stream for the *.box archive.
     *   deleteStream = If true, deletes the stream on destruction.
     *   rootDir      = Optional root directory within the archive.
     */
    this(InputStream istrm, bool deleteStream = false, string rootDir = "")
    {
        this.deleteStream = deleteStream;
        this.rootDir = rootDir;
        this.boxStrm = istrm;

        ubyte[4] magic;
        boxStrm.fillArray(magic);
        assert(magic == "BOXF");

        ulong numFiles;
        boxStrm.readLE(&numFiles);

        files = New!(Dict!(BoxEntry, string));

        string rootDirWithSeparator;
        if (rootDir.length)
            rootDirWithSeparator = catStr(rootDir, "/");

        foreach(i; 0..numFiles)
        {
            uint filenameSize;
            boxStrm.readLE(&filenameSize);
            ubyte[] filenameBytes = New!(ubyte[])(filenameSize);
            boxStrm.fillArray(filenameBytes);
            string filename = cast(string)filenameBytes;
            ulong offset, size;
            boxStrm.readLE(&offset);
            boxStrm.readLE(&size);

            if (rootDirWithSeparator.length)
            {
                if (filename.startsWith(rootDirWithSeparator))
                {
                    string newFilename = filename[rootDirWithSeparator.length..$];
                    filenames.append(filename);
                    files[newFilename] = BoxEntry(offset, size);
                }
                else
                    Delete(filenameBytes);
            }
            else
            {
                filenames.append(filename);
                files[filename] = BoxEntry(offset, size);
            }
        }

        if (rootDirWithSeparator.length)
            Delete(rootDirWithSeparator);
    }

    /**
     * Retrieves file statistics for a file in the archive.
     *
     * Params:
     *   filename = The file to query.
     *   stat     = Output file statistics.
     * Returns:
     *   true if the file exists, false otherwise.
     */
    bool stat(string filename, out FileStat stat)
    {
        if (filename in files)
        {
            stat.isFile = true;
            stat.isDirectory = false;
            stat.sizeInBytes = files[filename].size;
            stat.creationTimestamp = SysTime.init;
            stat.modificationTimestamp = SysTime.init;

            return true;
        }
        else
            return false;
    }

    /**
     * Opens a file for input from the archive.
     *
     * Params:
     *   filename = The file to open.
     * Returns:
     *   An input stream for the file, or null if not found.
     */
    InputStream openForInput(string filename)
    {
        if (filename in files)
        {
            BoxEntry file = files[filename];
            ubyte[] buffer = New!(ubyte[])(cast(size_t)file.size);
            boxStrm.position = file.offset;
            boxStrm.fillArray(buffer);
            return New!UnmanagedArrayStream(buffer);
        }
        else
            return null;
    }

    /**
     * Opens a directory from the archive (not implemented).
     *
     * Params:
     *   dir = The directory to open.
     * Returns:
     *   null (not implemented).
     */
    Directory openDir(string dir)
    {
        // TODO
        return null;
    }

    /// Destructor. Releases all resources and buffers.
    ~this()
    {
        foreach(f; filenames)
            Delete(f);
        filenames.free();
        Delete(files);
        if (deleteStream)
            Delete(boxStrm);
    }
}
