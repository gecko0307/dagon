/*
Copyright (c) 2019-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Provides support for loading and managing generic binary assets in Dagon.
 *
 * Description:
 * The `dagon.resource.binary` module defines the `BinaryAsset` class,
 * which loads arbitrary binary data from files or streams into a buffer.
 * This is useful for handling custom data formats, raw buffers, or non-standard
 * resources that do not fit into other asset types. The asset supports threaded
 * loading and integrates with the asset manager and virtual file system.
 *
 * Copyright: Timur Gafarov 2019-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.resource.binary;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.core.stream;
import dlib.filesystem.filesystem;
import dlib.filesystem.stdfs;

import dagon.resource.asset;

/**
 * Asset class for loading and managing generic binary data.
 *
 * Description:
 * Loads the entire file or stream into a buffer for later use.
 * Supports threaded loading and resource management.
 *
 * Members:
 *   buffer = The loaded binary data.
 */
class BinaryAsset: Asset
{
    ubyte[] buffer;

    /**
     * Constructs a new binary asset.
     *
     * Params:
     *   owner = Owner object.
     */
    this(Owner owner)
    {
        super(owner);
    }

    /// Destructor. Releases the buffer.
    ~this()
    {
        release();
    }

    /**
     * Loads the thread-safe part of the asset (reads the file/stream into the buffer).
     *
     * Params:
     *   filename = The asset filename.
     *   istrm    = Input stream to read from.
     *   fs       = File system.
     *   mngr     = Asset manager.
     * Returns:
     *   true if loading succeeded.
     */
    override bool loadThreadSafePart(string filename, InputStream istrm, ReadOnlyFileSystem fs, AssetManager mngr)
    {
        FileStat s;
        fs.stat(filename, s);
        buffer = New!(ubyte[])(cast(size_t)s.sizeInBytes);
        istrm.fillArray(buffer);
        return true;
    }

    /**
     * Loads the thread-unsafe part of the asset (no-op for binary data).
     *
     * Returns:
     *   true (always succeeds).
     */
    override bool loadThreadUnsafePart()
    {
        return true;
    }

    /// Releases the buffer and all associated resources.
    override void release()
    {
        if (buffer.length)
            Delete(buffer);
    }
}

