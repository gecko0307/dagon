/*
Copyright (c) 2017-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Texture asset.
 *
 * Description:
 * The `dagon.resource.texture` module defines the `TextureAsset` class
 * for loading GPU textures via the asset manager. The module supports
 * threaded loading, conversion options, persistent buffers, and integration
 * with the virtual file system.
 *
 * Copyright: Timur Gafarov 2017-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.resource.texture;

import std.stdio;
import std.string;
import std.path;
import std.conv;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.core.stream;
import dlib.core.compound;
import dlib.image.color;
import dlib.image.image;
import dlib.image.hdri;
import dlib.image.io;
import dlib.image.unmanaged;
import dlib.filesystem.filesystem;

import dagon.core.bindings;
import dagon.core.logger;
import dagon.graphics.texture;
import dagon.resource.asset;

/**
 * Options for texture conversion.
 */
struct ConversionOptions
{
    /// Target width (optional).
    uint width;

    /// Target height (optional).
    uint height;

    /// Loader-specific hint value.
    int hint;
}

/**
 * Represents a texture asset.
 *
 * Description:
 * The `TextureAsset` class loads an image to the GPU texture
 * using a `TextureLoader` defined for the given file extension
 * in the `AssetManager`.
 */
class TextureAsset: Asset
{
    /// The GPU texture object.
    Texture texture;
    
    /// The dlib image (optional).
    SuperImage image;
    
    /// Temporary exchange buffer.
    TextureBuffer buffer;
    
    /// Format-specific conversion options.
    ConversionOptions conversion;
    
    bool loaded = false;
    
    /// If `true`, keep `buffer.data` after sending to GPU.
    bool persistent = false;
    
    /// Set to `true` in the loader if `buffer.data` refers to `image.data` (to prevent double-free)
    bool bufferDataIsImageData = false;
    
    /// If `true`, generate mip levels.
    bool generateMipmaps = true;
    
    /// If true, the input image will be interpreted as 3D texture
    bool loadAs3D = false;
    
    ///
    uint resolution3D = 0;
    
    /// Loader-specific option.
    uint loaderOption = 0;
    
    /// Filename in the virtual filesystem.
    string filename;
    
    /// File extension.
    string extension;

    /**
     * Constructs a new texture asset.
     *
     * Params:
     *   owner = Owner object.
     */
    this(Owner owner)
    {
        super(owner);
        texture = New!Texture(this);
        conversion.width = 0;
        conversion.height = 0;
        conversion.hint = 0;
    }

    /// Destructor. Releases all resources.
    ~this()
    {
        release();
    }

    /**
     * Loads the thread-safe part of the texture asset (e.g., from file or stream).
     *
     * Params:
     *   filename     = Asset filename.
     *   istrm        = Input stream.
     *   fs           = File system.
     *   assetManager = Asset manager.
     * Returns:
     *   True if loading succeeded.
     */
    override bool loadThreadSafePart(string filename, InputStream istrm, ReadOnlyFileSystem fs, AssetManager assetManager)
    {
        if (loaded)
            return true;
        
        this.filename = filename;
        this.extension = filename.extension.toLower;
        auto loader = assetManager.textureLoader(this.extension);
        if (loader)
        {
            auto res = loader.load(filename, this.extension, istrm, this, loaderOption);
            if (res[0])
            {
                loaded = true;
                return loaded;
            }
            else
            {
                if (res[1].length)
                    logError(res[1]);
                loaded = false;
                return loaded;
            }
        }
        else
        {
            logError(filename, ": unsupported texture file extension \"", this.extension, "\"");
            loaded = false;
            return loaded;
        }
    }

    /**
     * Loads the thread-unsafe part of the texture asset (e.g., GPU upload).
     *
     * Returns:
     *   True if loading succeeded.
     */
    override bool loadThreadUnsafePart()
    {
        if (!loaded)
            return false;
        
        if (texture.valid)
            return true;
        
        if (buffer.data.length)
        {
            if (loadAs3D && buffer.format.target != GL_TEXTURE_3D)
                texture.createFromBuffer3D(buffer, resolution3D);
            else
                texture.createFromBuffer(buffer, generateMipmaps);
            if (!persistent)
                releaseBuffer();
            if (texture.valid)
                return true;
            else
                return false;
        }
        else if (image !is null)
        {
            if (loadAs3D)
                texture.createFromImage3D(image, resolution3D);
            else
                texture.createFromImage(image, generateMipmaps);
            if (!persistent)
                releaseBuffer();
            if (texture.valid)
                return true;
            else
                return false;
        }
        else
            return false;
    }
    
    /// Releases the temporary buffer and image data.
    void releaseBuffer()
    {
        if (image)
        {
            Delete(image);
            image = null;
        }
        
        if (buffer.data.length && !bufferDataIsImageData)
        {
            Delete(buffer.data);
            buffer.data = [];
        }
    }

    /// Releases the GPU texture and all associated resources.
    override void release()
    {
        if (texture)
            texture.release();
        
        releaseBuffer();
    }
}

/**
 * Loads or retrieves a texture asset from the asset manager.
 *
 * Params:
 *   assetManager = The asset manager to use.
 *   filename     = The texture filename.
 * Returns:
 *   The loaded or existing `TextureAsset`.
 */
TextureAsset textureAsset(AssetManager assetManager, string filename)
{
    TextureAsset asset;
    if (assetManager.assetExists(filename))
    {
        asset = cast(TextureAsset)assetManager.getAsset(filename);
    }
    else
    {
        asset = New!TextureAsset(assetManager);
        assetManager.preloadAsset(asset, filename);
    }
    return asset;
}
