/*
Copyright (c) 2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Provides a `SuperImage` interface implementation for texture buffers in Dagon.
 *
 * Description:
 * The `dagon.resource.image` module defines the `TextureImage` class, which adapts
 * a `TextureBuffer` to the `SuperImage` interface, allowing image-like access
 * to texture data.
 *
 * Copyright: Timur Gafarov 2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.resource.image;

import std.conv;

import dlib.image.color;
import dlib.image.image;
import dlib.image.hdri;

import dagon.core.bindings;
import dagon.graphics.texture;

/**
 * Adapts a `TextureBuffer` to the `SuperImage` interface
 * for image-like access.
 *
 * Description:
 * Provides properties for width, height, bit depth, channels,
 * pixel size, and pixel format. Supports getting and setting
 * pixel values.
 */
class TextureImage: SuperImage
{
    TextureBuffer* linkedBuffer;
    
    protected:

    uint _width;
    uint _height;
    uint _bitDepth;
    uint _channels;
    uint _pixelSize;
    uint _pixelFormat;
    ubyte[] _data;
    
    public:
    
    /**
     * Constructs a `TextureImage` from a `TextureBuffer`.
     *
     * Params:
     *   buffer = Pointer to the texture buffer.
     */
    this(TextureBuffer* buffer)
    {
        linkedBuffer = buffer;
        _width = width;
        _height = height;
        _bitDepth = bitDepth;
        _channels = channels;
        _pixelSize = pixelSize;
        _pixelFormat = pixelFormat;
        _data = data;
    }
    
    /// Returns the image width in pixels.
    @property uint width()
    {
        return linkedBuffer.size.width;
    }
    
    /// Returns the image height in pixels.
    @property uint height()
    {
        return linkedBuffer.size.height;
    }
    
    /// Returns the bit depth per channel.
    @property uint bitDepth()
    {
        return linkedBuffer.format.channelSize * 8;
    }
    
    /// Returns the number of color channels.
    @property uint channels()
    {
        return linkedBuffer.format.numChannels;
    }
    
     /// Returns the size of a pixel in bytes.
    @property uint pixelSize()
    {
        return linkedBuffer.format.pixelSize;
    }
    
    /// Returns the pixel format as an integer constant.
    @property uint pixelFormat()
    {
        uint res = IntegerPixelFormat.RGBA8;
        
        switch(linkedBuffer.format.internalFormat)
        {
            case GL_R8:
                res = IntegerPixelFormat.L8;
                break;
            case GL_RG8:
                res = IntegerPixelFormat.LA8;
                break;
            case GL_RGB8:
                res = IntegerPixelFormat.RGB8;
                break;
            case GL_RGBA8:
                res = IntegerPixelFormat.RGBA8;
                break;
            case GL_R16:
                res = IntegerPixelFormat.L16;
                break;
            case GL_RG16:
                res = IntegerPixelFormat.LA16;
                break;
            case GL_RGB16:
                res = IntegerPixelFormat.RGB16;
                break;
            case GL_RGBA16:
                res = IntegerPixelFormat.RGBA16;
                break;
            case GL_RGBA32F:
                res = FloatPixelFormat.RGBAF32;
                break;
            default:
                break;
        }
        
        return res;
    }
    
    /// Returns the raw image data as a byte array.
    @property ubyte[] data()
    {
        return linkedBuffer.data;
    }
    
    /**
     * Gets the integer color value of the pixel at (x, y).
     *
     * Params:
     *   x = X coordinate.
     *   y = Y coordinate.
     * Returns:
     *   The color value as `Color4`.
     */
    Color4 getPixel(int x, int y)
    {
        ubyte[] pixData = _data;

        if (x >= _width) x = _width-1;
        else if (x < 0) x = 0;

        if (y >= _height) y = _height-1;
        else if (y < 0) y = 0;

        size_t index = (cast(size_t)y * cast(size_t)_width + cast(size_t)x) * cast(size_t)_pixelSize;

        auto maxv = (2 ^^ _bitDepth) - 1;

        if (_pixelFormat == IntegerPixelFormat.L8)
        {
            auto v = pixData[index];
            return Color4(v, v, v);
        }
        else if (_pixelFormat == IntegerPixelFormat.LA8)
        {
            auto v = pixData[index];
            return Color4(v, v, v, pixData[index+1]);
        }
        else if (_pixelFormat == IntegerPixelFormat.RGB8)
        {
            return Color4(pixData[index], pixData[index+1], pixData[index+2], cast(ubyte)maxv);
        }
        else if (_pixelFormat == IntegerPixelFormat.RGBA8)
        {
            return Color4(pixData[index], pixData[index+1], pixData[index+2], pixData[index+3]);
        }
        else if (_pixelFormat == IntegerPixelFormat.L16)
        {
            ushort v = pixData[index] << 8 | pixData[index+1];
            return Color4(v, v, v);
        }
        else if (_pixelFormat == IntegerPixelFormat.LA16)
        {
            ushort v = pixData[index]   << 8 | pixData[index+1];
            ushort a = pixData[index+2] << 8 | pixData[index+3];
            return Color4(v, v, v, a);
        }
        else if (_pixelFormat == IntegerPixelFormat.RGB16)
        {
            ushort r = pixData[index]   << 8 | pixData[index+1];
            ushort g = pixData[index+2] << 8 | pixData[index+3];
            ushort b = pixData[index+4] << 8 | pixData[index+5];
            ushort a = cast(ushort)maxv;
            return Color4(r, g, b, a);
        }
        else if (_pixelFormat == IntegerPixelFormat.RGBA16)
        {
            ushort r = pixData[index]   << 8 | pixData[index+1];
            ushort g = pixData[index+2] << 8 | pixData[index+3];
            ushort b = pixData[index+4] << 8 | pixData[index+5];
            ushort a = pixData[index+6] << 8 | pixData[index+7];
            return Color4(r, g, b, a);
        }
        else
        {
            assert(0, "Image.opIndex is not implemented for IntegerPixelFormat." ~ to!string(_pixelFormat));
        }
    }

    /**
     * Sets the color value of the pixel at (x, y).
     *
     * Params:
     *   c = The color to set.
     *   x = X coordinate.
     *   y = Y coordinate.
     * Returns:
     *   The color value set.
     */
    Color4 setPixel(Color4 c, int x, int y)
    {
        ubyte[] pixData = _data;

        if (x >= _width || y >= _height || x < 0 || y < 0)
            return c;

        size_t index = (cast(size_t)y * cast(size_t)_width + cast(size_t)x) * cast(size_t)_pixelSize;

        if (_pixelFormat == IntegerPixelFormat.L8)
        {
            pixData[index] = cast(ubyte)c.r;
        }
        else if (_pixelFormat == IntegerPixelFormat.LA8)
        {
            pixData[index] = cast(ubyte)c.r;
            pixData[index+1] = cast(ubyte)c.a;
        }
        else if (_pixelFormat == IntegerPixelFormat.RGB8)
        {
            pixData[index] = cast(ubyte)c.r;
            pixData[index+1] = cast(ubyte)c.g;
            pixData[index+2] = cast(ubyte)c.b;
        }
        else if (_pixelFormat == IntegerPixelFormat.RGBA8)
        {
            pixData[index] = cast(ubyte)c.r;
            pixData[index+1] = cast(ubyte)c.g;
            pixData[index+2] = cast(ubyte)c.b;
            pixData[index+3] = cast(ubyte)c.a;
        }
        else if (_pixelFormat == IntegerPixelFormat.L16)
        {
            pixData[index] = cast(ubyte)(c.r >> 8);
            pixData[index+1] = cast(ubyte)(c.r & 0xFF);
        }
        else if (_pixelFormat == IntegerPixelFormat.LA16)
        {
            pixData[index] = cast(ubyte)(c.r >> 8);
            pixData[index+1] = cast(ubyte)(c.r & 0xFF);
            pixData[index+2] = cast(ubyte)(c.a >> 8);
            pixData[index+3] = cast(ubyte)(c.a & 0xFF);
        }
        else if (_pixelFormat == IntegerPixelFormat.RGB16)
        {
            pixData[index] = cast(ubyte)(c.r >> 8);
            pixData[index+1] = cast(ubyte)(c.r & 0xFF);
            pixData[index+2] = cast(ubyte)(c.g >> 8);
            pixData[index+3] = cast(ubyte)(c.g & 0xFF);
            pixData[index+4] = cast(ubyte)(c.b >> 8);
            pixData[index+5] = cast(ubyte)(c.b & 0xFF);
        }
        else if (_pixelFormat == IntegerPixelFormat.RGBA16)
        {
            pixData[index] = cast(ubyte)(c.r >> 8);
            pixData[index+1] = cast(ubyte)(c.r & 0xFF);
            pixData[index+2] = cast(ubyte)(c.g >> 8);
            pixData[index+3] = cast(ubyte)(c.g & 0xFF);
            pixData[index+4] = cast(ubyte)(c.b >> 8);
            pixData[index+5] = cast(ubyte)(c.b & 0xFF);
            pixData[index+6] = cast(ubyte)(c.a >> 8);
            pixData[index+7] = cast(ubyte)(c.a & 0xFF);
        }
        else
        {
            assert(0, "Image.opIndexAssign is not implemented for IntegerPixelFormat." ~ to!string(_pixelFormat));
        }

        return c;
    }

    /// Gets the color value at (x, y) as a floating-point color.
    override Color4f opIndex(int x, int y)
    {
        return Color4f(getPixel(x, y), _bitDepth);
    }

    /// Sets the color value at (x, y) as a floating-point color.
    override Color4f opIndexAssign(Color4f c, int x, int y)
    {
        setPixel(c.convert(_bitDepth), x, y);
        return c;
    }
    
     /// Returns a duplicate of the image (not implemented).
    @property SuperImage dup()
    {
        // TODO
        return null;
    }
    
    /// Creates a new image of the same format and given size (not implemented).
    SuperImage createSameFormat(uint w, uint h)
    {
        // TODO
        return null;
    }
    
    /// Frees the image resources (no-op).
    void free()
    {
    }
}
