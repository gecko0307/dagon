/*
Copyright (c) 2019-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * DirectDraw Surface (DDS) loader.
 *
 * Description:
 * The `dagon.resource.dds` module defines the function for reading DDS files
 * into GPU-ready texture buffers. The loader supports compressed formats
 * (DXT1, DXT3, DXT5, BC4, BC5, BC6H, BC7, ASTC), cubemaps, mipmaps, and 3D/volume textures.
 *
 * Copyright: Timur Gafarov 2019-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.resource.dds;

import std.stdio;
import std.file;
import std.algorithm;

import dlib.core.memory;
import dlib.core.stream;
import dlib.image.io.utils;

import dagon.core.bindings;
import dagon.core.dxgiformat;
import dagon.core.logger;
import dagon.graphics.texture;

//version = DDSDebug;

/**
 * Structure describing the pixel format in a DDS file.
 */
struct DDSPixelFormat
{
    uint size;
    uint flags;
    uint fourCC;
    uint bpp;
    uint redMask;
    uint greenMask;
    uint blueMask;
    uint alphaMask;
}

/**
 * DDS header flags.
 */
enum DDSHeaderFlags
{
    TEXTURE = 0x00001007,
    MIPMAPS = 0x00020000,
    LINEARSIZE  = 0x00080000,
    VOLUME = 0x00800000
}

/**
 * DDS pixel format flags.
 */
enum DDPF
{
    ALPHAPIXELS = 0x1,
    ALPHA = 0x2,
    FOURCC = 0x4,
    RGB = 0x40,
    YUV = 0x200,
    LUMINANCE = 0x20000
}

/**
 * DDS capabilities.
 */
enum DDSCaps
{
    RESERVED1 = 0x00000001,
    RESERVED2 = 0x00800000,
    RESERVED3 = 0x00000400,
    _3DDEVICE = 0x00002000,
    ALLOCONLOAD = 0x04000000,
    ALPHA = 0x00000002,
    BACKBUFFER = 0x00000004,
    COMPLEX = 0x00000008,
    EXECUTEBUFFER = 0x00800000,
    FLIP = 0x00000010,
    FRONTBUFFER = 0x00000020,
    HWCODEC = 0x00100000,
    LIVEVIDEO = 0x00080000,
    LOCALVIDMEM = 0x10000000,
    MIPMAP = 0x00400000,
    MODEX = 0x00200000,
    NONLOCALVIDMEM = 0x20000000,
    OFFSCREENPLAIN = 0x00000040,
    OVERLAY = 0x00000080,
    OPTIMIZED = 0x80000000,
    OWNDC = 0x00040000,
    PALETTE = 0x00000100,
    PRIMARYSURFACE = 0x00000200,
    PRIMARYSURFACELEFT = 0x00000000,
    STANDARDVGAMODE = 0x40000000,
    SYSTEMMEMORY = 0x00000800,
    TEXTURE = 0x00001000,
    VIDEOMEMORY = 0x00004000,
    VIDEOPORT = 0x08000000,
    VISIBLE = 0x00008000,
    WRITEONLY = 0x00010000,
    ZBUFFER = 0x00020000
}

/**
 * DDS extended capabilities.
 */
enum DDSCaps2
{
    RESERVED1 = 0x00000020,
    RESERVED2 = 0x00000040,
    RESERVED3 = 0x04000000,
    RESERVED4 = 0x00000002,
    ADDITIONALPRIMARY = 0x80000000,
    CUBEMAP = 0x00000200,
    CUBEMAP_POSITIVEX = 0x00000400,
    CUBEMAP_NEGATIVEX = 0x00000800,
    CUBEMAP_POSITIVEY = 0x00001000,
    CUBEMAP_NEGATIVEY = 0x00002000,
    CUBEMAP_POSITIVEZ = 0x00004000,
    CUBEMAP_NEGATIVEZ = 0x00008000,
    CUBEMAP_ALLFACES = 0x00000400 | 0x00000800 | 0x00001000 | 0x00002000 | 0x00004000 | 0x00008000,
    D3DTEXTUREMANAGE = 0x00020000,
    DISCARDBACKBUFFER = 0x10000000,
    DONOTPERSIST = 0x00040000,
    ENABLEALPHACHANNEL = 0x20000000,
    VERTEXBUFFER = 0x00000020,
    COMMANDBUFFER = 0x00000040,
    INDEXBUFFER = 0x04000000,
    EXTENDEDFORMATPRIMARY = 0x40000000,
    HARDWAREDEINTERLACE = 0x00000000,
    HINTANTIALIASING = 0x00000100,
    HINTDYNAMIC = 0x00000004,
    HINTSTATIC = 0x00000008,
    MIPMAPSUBLEVEL = 0x00010000,
    NOTUSERLOCKABLE = 0x00400000,
    NPATCHES = 0x02000000,
    POINTS = 0x00800000,
    RTPATCHES = 0x01000000,
    OPAQUE = 0x00000080,
    STEREOSURFACELEFT = 0x00080000,
    TEXTUREMANAGE = 0x00000010,
    VOLUME = 0x00200000
}

enum DDSCaps3
{
    RESERVED1 = 0x00000100,
    RESERVED2 = 0x00000200,
    AUTOGENMIPMAP = 0x00000800,
    CREATESHAREDRESOURCE = 0x00002000,
    DMAP = 0x00001000,
    LIGHTWEIGHTMIPMAP = 0x00000400,
    MULTISAMPLE_MASK = 0x0000001F,
    MULTISAMPLE_QUALITY_MASK = 0x000000E0,
    MULTISAMPLE_QUALITY_SHIFT = 5,
    OPENSHAREDRESOURCE = 0x00008000,
    READONLYRESOURCE = 0x00004000,
    VIDEO = 0x00000200
}

/**
 * Structure for color key information in DDS headers.
 */
struct DDSColorKey
{
    uint lowVal;
    uint highVal;
}

/**
 * Structure describing the main DDS header.
 */
struct DDSHeader
{
    uint size;
    uint flags;
    uint height;
    uint width;
    uint pitch;
    uint depth;
    uint mipMapLevels;
    uint alphaBitDepth;
    uint reserved;
    uint surface;

    DDSColorKey ckDestOverlay;
    DDSColorKey ckDestBlt;
    DDSColorKey ckSrcOverlay;
    DDSColorKey ckSrcBlt;

    DDSPixelFormat format;
    uint caps;
    uint caps2;
    uint caps3;
    uint caps4;

    uint textureStage;
}

/**
 * Structure describing the DXT10 extended header (for newer DDS formats).
 */
struct DDSHeaderDXT10
{
    uint dxgiFormat;
    uint resourceDimension;
    uint miscFlag;
    uint arraySize;
    uint miscFlags2;
}

/**
 * D3D10 resource dimensions.
 */
enum D3D10ResourceDimension
{
    Unknown = 0,
    Buffer = 1,
    Texture1D = 2,
    Texture2D = 3,
    Texture3D = 4
}

/**
 * D3D10 miscellaneous flags.
 */
enum D3D10ResourceMisc
{
    GenerateMips = 0x01,
    MiscShared = 0x02,
    TextureCube = 0x04,
    SharedKeyedMutex = 0x10,
    GDICompatible = 0x20
}

/**
 * Converts four ASCII characters to a FourCC code.
 *
 * Params:
 *   ch0 = character.
 *   ch1 = character.
 *   ch2 = character.
 *   ch3 = character.
 * Returns:
 *   The combined FourCC code as a uint.
 */
uint makeFourCC(char ch0, char ch1, char ch2, char ch3)
{
    return
        ((cast(uint)ch3 << 24) & 0xFF000000) |
        ((cast(uint)ch2 << 16) & 0x00FF0000) |
        ((cast(uint)ch1 << 8)  & 0x0000FF00) |
        ((cast(uint)ch0)       & 0x000000FF);
}

enum FOURCC_DXT1 = makeFourCC('D', 'X', 'T', '1');
enum FOURCC_DXT3 = makeFourCC('D', 'X', 'T', '3');
enum FOURCC_DXT5 = makeFourCC('D', 'X', 'T', '5');
enum FOURCC_DX10 = makeFourCC('D', 'X', '1', '0');

enum FOURCC_BC4U = makeFourCC('B', 'C', '4', 'U');
enum FOURCC_BC4S = makeFourCC('B', 'C', '4', 'S');
enum FOURCC_ATI2 = makeFourCC('A', 'T', 'I', '2');
enum FOURCC_BC5S = makeFourCC('B', 'C', '5', 'S');
enum FOURCC_RGBG = makeFourCC('R', 'G', 'B', 'G');
enum FOURCC_GRGB = makeFourCC('G', 'R', 'G', 'B');

enum FOURCC_DXT2 = makeFourCC('D', 'X', 'T', '2');

/**
 * Maps a FourCC code to a `DXGIFormat`.
 *
 * Params:
 *   fourCC = The FourCC code.
 * Returns:
 *   The corresponding `DXGIFormat`.
 */
DXGIFormat resourceFormatFromFourCC(uint fourCC)
{
    DXGIFormat format;
    
    switch(fourCC)
    {
        case FOURCC_DXT1: format = DXGIFormat.BC1_UNORM; break;
        case FOURCC_DXT3: format = DXGIFormat.BC2_UNORM; break;
        case FOURCC_DXT5: format = DXGIFormat.BC3_UNORM; break;
        case FOURCC_BC4U: format = DXGIFormat.BC4_UNORM; break;
        case FOURCC_BC4S: format = DXGIFormat.BC4_SNORM; break;
        case FOURCC_ATI2: format = DXGIFormat.BC5_UNORM; break;
        case FOURCC_BC5S: format = DXGIFormat.BC5_SNORM; break;
        case FOURCC_RGBG: format = DXGIFormat.R8G8_B8G8_UNORM; break;
        case FOURCC_GRGB: format = DXGIFormat.G8R8_G8B8_UNORM; break;
        case 36:          format = DXGIFormat.R16G16B16A16_UNORM; break;
        case 110:         format = DXGIFormat.R16G16B16A16_SNORM; break;
        case 111:         format = DXGIFormat.R16_FLOAT; break;
        case 112:         format = DXGIFormat.R16G16_FLOAT; break;
        case 113:         format = DXGIFormat.R16G16B16A16_FLOAT; break;
        case 114:         format = DXGIFormat.R32_FLOAT; break;
        case 115:         format = DXGIFormat.R32G32_FLOAT; break;
        case 116:         format = DXGIFormat.R32G32B32A32_FLOAT; break;
        default:          format = DXGIFormat.UNKNOWN; break;
    }
    
    return format;
}

/**
 * Loads a DDS file from an input stream into a texture buffer.
 *
 * Supports compressed formats, cubemaps, mipmaps, and 3D textures.
 *
 * Params:
 *   istrm  = Input stream containing the DDS file data.
 *   buffer = Output texture buffer to fill.
 * Returns:
 *   `true` if loading succeeded, `false` otherwise.
 */
bool loadDDS(InputStream istrm, TextureBuffer* buffer)
{
    bool error(string errorMsg)
    {
        logError(errorMsg);
        return false;
    }
    
    char[4] magic;
    
    if (!istrm.fillArray(magic))
    {
        return error("loadDDS error: not a DDS file or corrupt data");
    }
    
    version(DDSDebug)
    {
        logDebug("Signature: ", magic);
    }
    
    if (magic != "DDS ")
    {
        return error("loadDDS error: not a DDS file");
    }
    
    DDSHeader hdr = readStruct!DDSHeader(istrm);
    
    version(DDSDebug)
    {
        logDebug("hdr.size: ", hdr.size);
        logDebug("hdr.flags: ", hdr.flags);
        logDebug("hdr.height: ", hdr.height);
        logDebug("hdr.width: ", hdr.width);
        logDebug("hdr.pitch: ", hdr.pitch);
        logDebug("hdr.depth: ", hdr.depth);
        logDebug("hdr.mipMapLevels: ", hdr.mipMapLevels);
        logDebug("hdr.alphaBitDepth: ", hdr.alphaBitDepth);
        logDebug("hdr.reserved: ", hdr.reserved);
        logDebug("hdr.surface: ", hdr.surface);
        
        logDebug("hdr.ckDestOverlay.lowVal: ", hdr.ckDestOverlay.lowVal);
        logDebug("hdr.ckDestOverlay.highVal: ", hdr.ckDestOverlay.highVal);
        logDebug("hdr.ckDestBlt.lowVal: ", hdr.ckDestBlt.lowVal);
        logDebug("hdr.ckDestBlt.highVal: ", hdr.ckDestBlt.highVal);
        logDebug("hdr.ckSrcOverlay.lowVal: ", hdr.ckSrcOverlay.lowVal);
        logDebug("hdr.ckSrcOverlay.highVal: ", hdr.ckSrcOverlay.highVal);
        logDebug("hdr.ckSrcBlt.lowVal: ", hdr.ckSrcBlt.lowVal);
        logDebug("hdr.ckSrcBlt.highVal: ", hdr.ckSrcBlt.highVal);
        
        logDebug("hdr.format.size: ", hdr.format.size);
        logDebug("hdr.format.flags: ", hdr.format.flags);
        logDebug("hdr.format.fourCC: ", hdr.format.fourCC);
        logDebug("hdr.format.bpp: ", hdr.format.bpp);
        logDebug("hdr.format.redMask: ", hdr.format.redMask);
        logDebug("hdr.format.greenMask: ", hdr.format.greenMask);
        logDebug("hdr.format.blueMask: ", hdr.format.blueMask);
        logDebug("hdr.format.alphaMask: ", hdr.format.alphaMask);
        
        logDebug("hdr.caps: ", hdr.caps);
        logDebug("hdr.caps2: ", hdr.caps2);
        logDebug("hdr.caps3: ", hdr.caps3);
        logDebug("hdr.caps4: ", hdr.caps4);
        
        logDebug("hdr.textureStage: ", hdr.textureStage);
    }
    
    TextureFormat format;
    
    DXGIFormat fmt;
    if (hdr.format.flags & DDPF.FOURCC)
    {
        if (hdr.format.fourCC == FOURCC_DX10)
        {
            DDSHeaderDXT10 dx10 = readStruct!DDSHeaderDXT10(istrm);
            fmt = cast(DXGIFormat)dx10.dxgiFormat;
        }
        else
        {
            fmt = resourceFormatFromFourCC(hdr.format.fourCC);
        }
    }
    else if (hdr.flags & DDSHeaderFlags.VOLUME)
    {
        if (hdr.format.bpp == 32)
            fmt = DXGIFormat.R8G8B8A8_UNORM;
        else if (hdr.format.bpp == 16)
            fmt = DXGIFormat.R8G8_UNORM;
        else if (hdr.format.bpp == 8)
            fmt = DXGIFormat.R8_UNORM;
    }
    
    version(DDSDebug) logDebug("format: ", fmt);
    
    if (!dxgiFormatToGLFormat(fmt, format))
        return error("loadDDS error: unsupported resource format");
    
    bool hasMipmaps = cast(bool)(hdr.flags & DDSHeaderFlags.MIPMAPS);
    
    bool isComplex = cast(bool)(hdr.caps & DDSCaps.COMPLEX);
    bool isVolume = cast(bool)(hdr.caps2 & DDSCaps2.VOLUME);
    
    bool isCubemap = false;
    if (hdr.caps2 & DDSCaps2.CUBEMAP)
    {
        if (hdr.caps2 & DDSCaps2.CUBEMAP_ALLFACES)
            isCubemap = true;
        else
            return error("loadDDS error: incomplete cubemap");
    }
    
    version(DDSDebug) logDebug("hasMipmaps: ", hasMipmaps);
    version(DDSDebug) logDebug("isComplex: ", isComplex);
    version(DDSDebug) logDebug("isVolume: ", isVolume);
    version(DDSDebug) logDebug("isCubemap: ", isCubemap);
    
    size_t bufferSize = cast(size_t)(istrm.size - istrm.getPosition);
    version(DDSDebug) logDebug("bufferSize: ", bufferSize);
    
    buffer.data = New!(ubyte[])(bufferSize);
    istrm.readBytes(buffer.data.ptr, bufferSize);
    
    TextureSize size;
    size.width = hdr.width;
    size.height = hdr.height;
    
    if (isVolume)
        size.depth = hdr.depth;
    else
        size.depth = 0;
    
    if (isCubemap)
    {
        format.target = GL_TEXTURE_CUBE_MAP;
        format.cubeFaces = CubeFaceBit.All;
    }
    else if (isVolume)
    {
        format.target = GL_TEXTURE_3D;
    }
    else
    {
        format.target = GL_TEXTURE_2D;
    }
    
    buffer.format = format;
    buffer.size = size;
    
    if (hasMipmaps)
        buffer.mipLevels = hdr.mipMapLevels;
    else
        buffer.mipLevels = 1;

    return true;
}
