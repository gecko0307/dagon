/*
Copyright (c) 2021-2025 Timur Gafarov, Denis Feklushkin

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * GLTF 2.0 accessor representation.
 *
 * Description:
 * The `dagon.resource.gltf.accessor` module defines the `GLTFAccessor` class,
 * which describes a typed view into a GLTF buffer view, including
 * data type, component type, count, and byte offset. Accessors are used to
 * interpret raw buffer data as vectors, matrices, or scalars for mesh attributes,
 * skinning, and animation.
 *
 * Copyright: Timur Gafarov, Denis Feklushkin 2021-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov, Denis Feklushkin
 */
module dagon.resource.gltf.accessor;

import dlib.core.ownership;
import dlib.serialization.json;

import dagon.core.bindings;
import dagon.resource.gltf.bufferview;

/**
 * GLTF accessor data types.
 */
enum GLTFDataType
{
    Undefined,
    Scalar,
    Vec2,
    Vec3,
    Vec4,
    Mat2,
    Mat3,
    Mat4
}

/**
 * Represents a GLTF accessor, describing a typed view into a buffer view.
 */
class GLTFAccessor: Owner
{
    /// The buffer view this accessor references.
    GLTFBufferView bufferView;

    /// The type of data (scalar, vector, matrix).
    GLTFDataType dataType;

    /// Number of components per element.
    uint numComponents;

    /// OpenGL enum for the component type (e.g., GL_FLOAT).
    GLenum componentType;

    /// Number of elements.
    uint count;

    /// Offset in bytes from the start of the buffer view.
    uint byteOffset;
    
    /// Application-specific data.
    JSONObject extras;
    
    /**
     * Returns a typed slice of the accessor's data.
     *
     * Params:
     *   T = The element type to interpret the data as.
     * Returns:
     *   A slice of type `T[]` covering the accessor's data.
     */
    T[] getSlice(T)() const @nogc
    {
        assert(bufferView.stride == T.sizeof || bufferView.stride == 0);
        T* sliceStart = cast(T*)(bufferView.slice.ptr + byteOffset);
        return sliceStart[0..count];
    }

    /**
     * Constructs a GLTFAccessor.
     *
     * Params:
     *   bufferView    = The buffer view to reference.
     *   dataType      = The GLTF data type.
     *   componentType = OpenGL enum for the component type.
     *   count         = Number of elements.
     *   byteOffset    = Offset in bytes from the start of the buffer view.
     *   owner         = Owner object.
     */
    this(GLTFBufferView bufferView, GLTFDataType dataType, GLenum componentType, uint count, uint byteOffset, Owner owner)
    {
        super(owner);
        
        if (bufferView is null)
            return;
        
        this.bufferView = bufferView;
        this.dataType = dataType;
        this.componentType = componentType;
        this.count = count;
        this.byteOffset = byteOffset;
        
        switch(dataType)
        {
            case GLTFDataType.Scalar: numComponents = 1; break;
            case GLTFDataType.Vec2:   numComponents = 2; break;
            case GLTFDataType.Vec3:   numComponents = 3; break;
            case GLTFDataType.Vec4:   numComponents = 4; break;
            case GLTFDataType.Mat2:   numComponents = 2 * 2; break;
            case GLTFDataType.Mat3:   numComponents = 3 * 3; break;
            case GLTFDataType.Mat4:   numComponents = 4 * 4; break;
            default: numComponents = 1; break;
        }
    }
    
    /// Destructor.
    ~this()
    {
    }
}
