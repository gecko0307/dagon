/*
Copyright (c) 2021-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * GLTF buffer view.
 *
 * Description:
 * The `dagon.resource.gltf.bufferview` module defines the `GLTFBufferView` class,
 * which represents a view into a GLTF buffer, describing a subrange of the buffer
 * with a specific offset, length, and stride. Buffer views are used to organize
 * vertex attributes, indices, and other structured data in GLTF assets.
 *
 * Copyright: Timur Gafarov 2021-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.resource.gltf.bufferview;

import std.stdio;

import dlib.core.ownership;

import dagon.core.bindings;
import dagon.core.logger;
import dagon.resource.gltf.buffer;

/**
 * Represents a view into a GLTF buffer.
 */
class GLTFBufferView: Owner
{
    /// The underlying GLTF buffer.
    GLTFBuffer buffer;

    /// Offset in bytes from the start of the buffer.
    uint offset;

    /// Length of the view in bytes.
    uint len;

    /// Stride in bytes between elements (0 for tightly packed).
    uint stride;

    /// The slice of the buffer view.
    ubyte[] slice;

    /// The target for the buffer view (e.g., GL_ARRAY_BUFFER).
    GLenum target;
    
    /**
     * Constructs a new buffer view.
     *
     * Params:
     *   buffer = The underlying GLTF buffer.
     *   offset = Offset in bytes from the start of the buffer.
     *   len    = Length of the view in bytes.
     *   stride = Stride in bytes between elements.
     *   target = The target for the buffer view (e.g., GL_ARRAY_BUFFER).
     *   owner  = Owner object for memory/resource management.
     */
    this(GLTFBuffer buffer, uint offset, uint len, uint stride, GLenum target, Owner owner)
    {
        super(owner);
        
        if (buffer is null)
            return;
        
        this.buffer = buffer;
        this.offset = offset;
        this.len = len;
        this.stride = stride;
        this.target = target;
        
        if (offset < buffer.array.length && offset+len <= buffer.array.length)
        {
            this.slice = buffer.array[offset..offset+len];
        }
        else
        {
            logError("Invalid buffer view bounds");
        }
    }
    
    /// Destructor. Releases any resources held by the buffer view.
    ~this()
    {
    }
}
