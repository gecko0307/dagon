/*
Copyright (c) 2021-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * GLTF buffers.
 *
 * Description:
 * The `dagon.resource.gltf.buffer` module defines the `GLTFBuffer` class,
 * which represents a raw binary buffer used by GLTF assets. The class
 * supports loading buffer data from arrays, input streams, files (via a
 * virtual file system), and base64-encoded strings. This enables support
 * for embedded, external, and base64 buffers in GLTF 2.0 files.
 *
 * Copyright: Timur Gafarov 2021-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.resource.gltf.buffer;

import std.stdio;
import std.base64;

import dlib.core.ownership;
import dlib.core.memory;
import dlib.core.stream;
import dlib.filesystem.filesystem;
import dlib.serialization.json;

import dagon.core.logger;

/**
 * Represents a GLTF buffer containing raw binary data.
 * Provides methods for loading buffer data from arrays, streams,
 * files, and base64-encoded strings.
 */
class GLTFBuffer: Owner
{
    /// The buffer's raw binary data.
    ubyte[] array;

    /// Application-specific data.
    JSONObject extras;

    /**
     * Constructs a new GLTF buffer.
     *
     * Params:
     *   owner = Owner object for memory/resource management.
     */
    this(Owner owner)
    {
        super(owner);
    }
    
    /**
     * Loads buffer data from an array.
     *
     * Params:
     *   arr = The source byte array.
     */
    void fromArray(ubyte[] arr)
    {
        array = New!(ubyte[])(arr.length);
        array[] = arr[];
    }
    
    /**
     * Loads buffer data from an input stream.
     *
     * Params:
     *   istrm = The input stream to read from.
     */
    void fromStream(InputStream istrm)
    {
        if (istrm is null)
            return;
        
        array = New!(ubyte[])(istrm.size);
        if (!istrm.fillArray(array))
        {
            logError("Failed to read the buffer");
            Delete(array);
        }
    }
    
    /**
     * Loads buffer data from a file in the given file system.
     *
     * Params:
     *   fs       = The file system to use.
     *   filename = The file to load.
     */
    void fromFile(ReadOnlyFileSystem fs, string filename)
    {
        FileStat fstat;
        if (fs.stat(filename, fstat))
        {
            auto bufStream = fs.openForInput(filename);
            fromStream(bufStream);
            Delete(bufStream);
        }
        else
            logError("Buffer file \"", filename, "\" not found");
    }
    
    /**
     * Loads buffer data from a base64-encoded string.
     *
     * Params:
     *   encoded = The base64-encoded string.
     */
    void fromBase64(string encoded)
    {
        auto decodedLength = Base64.decodeLength(encoded.length);
        array = New!(ubyte[])(decodedLength);
        auto decoded = Base64.decode(encoded, array);
    }
    
    /// Destructor. Releases the buffer data.
    ~this()
    {
        if (array.length)
            Delete(array);
    }
}
