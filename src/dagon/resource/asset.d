/*
Copyright (c) 2017-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Asset management tools.
 *
 * Description:
 * The `dagon.resource.asset` module defines the `Asset` base class for resource
 * objects, the `AssetManager` for loading, monitoring, and managing assets,
 * and loader classes for textures and images. The system supports threaded loading,
 * live asset monitoring, and virtual file systems. Texture loading can use SDL2_Image
 * if available, or fall back to dlib.image. The asset manager supports mounting
 * directories and box files, and can detect and handle base64-encoded images.
 *
 * Copyright: Timur Gafarov 2017-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.resource.asset;

import core.stdc.string;
import std.stdio;
import std.algorithm;
import std.path;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.core.compound;
import dlib.core.stream;
import dlib.core.thread;
import dlib.container.dict;
import dlib.filesystem.filesystem;
import dlib.filesystem.stdfs;
import dlib.image.image;
import dlib.image.unmanaged;
import dlib.image.hdri;
import dlib.image.io;

import dagon.core.application;
import dagon.core.event;
import dagon.core.vfs;
import dagon.core.logger;
import dagon.graphics.texture;
import dagon.resource.boxfs;
import dagon.resource.texture;
import dagon.resource.dds;
import dagon.resource.sdlimage;

/**
 * Stores file monitoring information for an asset.
 */
struct MonitorInfo
{
    /// Last known file status.
    FileStat lastStat;

    /// True if the file currently exists.
    bool fileExists = false;
}

/**
 * Abstract base class for all asset types.
 * Assets are managed by the `AssetManager` and support
 * thread-safe and thread-unsafe loading.
 */
abstract class Asset: Owner
{
    MonitorInfo monitorInfo;
    bool threadSafePartLoaded = false;
    bool threadUnsafePartLoaded = false;

    this(Owner owner)
    {
        super(owner);
    }

    /**
     * Loads the thread-safe part of the asset (e.g., reading from disk).
     *
     * Params:
     *   filename = Asset filename.
     *   istrm    = Input stream for reading data.
     *   fs       = File system to use.
     *   mngr     = Asset manager.
     * Returns:
     *   True if loading succeeded.
     */
    bool loadThreadSafePart(string filename, InputStream istrm, ReadOnlyFileSystem fs, AssetManager mngr);

    /**
     * Loads the thread-unsafe part of the asset (e.g., OpenGL resource creation).
     *
     * Returns:
     *   True if loading succeeded.
     */
    bool loadThreadUnsafePart();

     /// Releases all resources associated with the asset.
    void release();
}

/**
 * Abstract base class for texture loaders.
 * Texture loaders are responsible for loading image data
 * and creating texture assets.
 */
abstract class TextureLoader: Owner
{
    AssetManager assetManager;
    
    this(AssetManager assetManager)
    {
        super(assetManager);
        this.assetManager = assetManager;
    }

    /**
     * Loads a texture asset from a stream.
     *
     * Params:
     *   filename  = Name of the file.
     *   extension = File extension.
     *   istrm     = Input stream.
     *   asset     = Texture asset to fill.
     *   option    = Loader-specific option.
     * Returns:
     *   Compound!(bool, string) indicating success and error message.
     */
    Compound!(bool, string) load(
        string filename,
        string extension,
        InputStream istrm,
        TextureAsset asset,
        uint option = 0);
}

/**
 * Default texture loader that prefers SDL2_Image if present, and falls back to dlib.image otherwise.
 */
class DefaultTextureLoader: TextureLoader
{
    UnmanagedImageFactory ldrImageFactory;
    UnmanagedHDRImageFactory hdrImageFactory;
    
    this(AssetManager assetManager)
    {
        super(assetManager);
        ldrImageFactory = New!UnmanagedImageFactory();
        hdrImageFactory = New!UnmanagedHDRImageFactory();
    }
    
    ~this()
    {
        Delete(ldrImageFactory);
        Delete(hdrImageFactory);
    }
    
    /**
     * Loads a texture asset from a stream, supporting multiple formats.
     *
     * Params:
     *   filename  = Name of the file.
     *   extension = File extension.
     *   istrm     = Input stream.
     *   asset     = Texture asset to fill.
     *   option    = Loader-specific option (unused).
     * Returns:
     *   Compound!(bool, string) indicating success and error message.
     */
    override Compound!(bool, string) load(
        string filename,
        string extension,
        InputStream istrm,
        TextureAsset asset,
        uint option = 0)
    {
        
        bool useSDLImage = false;
        if (assetManager.application)
        {
            useSDLImage = assetManager.application.sdlImagePresent;
        }
        
        // Use built-in DDS loader
        if (extension == ".dds")
        {
            bool loaded = loadDDS(istrm, &asset.buffer);
            if (loaded)
            {
                asset.bufferDataIsImageData = false;
                asset.generateMipmaps = true;
                return compound(true, "");
            }
            else
                return compound(false, "");
        }
        
        if (!isSDLImageSupportedFormat(extension))
            useSDLImage = false;
        
        // Use SDL2_Image
        if (useSDLImage)
        {
            bool loaded = loadImageViaSDLImage(istrm, extension, asset);
            if (loaded)
            {
                asset.bufferDataIsImageData = false;
                asset.generateMipmaps = true;
                return compound(true, "");
            }
            else
                return compound(false, "");
        }
        
        // Use dlib.image
        ubyte[] data = New!(ubyte[])(istrm.size);
        istrm.fillArray(data);
        ArrayStream arrStrm = New!ArrayStream(data);
        Compound!(SuperImage, string) res;
        if (extension == ".bmp")
            res = loadBMP(arrStrm, ldrImageFactory);
        else if (extension == ".png")
            res = loadPNG(arrStrm, ldrImageFactory);
        else if (extension == ".jpg" || extension == ".jpeg")
            res = loadJPEG(arrStrm, ldrImageFactory);
        else if (extension == ".tga")
            res = loadTGA(arrStrm, ldrImageFactory);
        else if (extension == ".hdr")
            res = loadHDR(arrStrm, hdrImageFactory);
        else
            res = compound(null, "Unsupported image file format");
        Delete(arrStrm);
        Delete(data);
        
        asset.image = res[0];
        if (asset.image is null)
        {
            return compound(false, res[1]);
        }
        else
        {
            Compound!(bool, string) result;
            
            TextureFormat textureFormat;
            if (detectTextureFormat(asset.image, textureFormat))
            {
                asset.buffer.format = textureFormat;
                asset.buffer.size = TextureSize(asset.image.width, asset.image.height, 0);
                asset.buffer.mipLevels = 1;
                size_t bufferSize = asset.image.data.length;
                asset.buffer.data = asset.image.data;
                asset.bufferDataIsImageData = true;
                asset.generateMipmaps = true;
                result = compound(true, "");
            }
            else
            {
                result = compound(false, "Unsupported pixel format");
            }
            
            return result;
        }
    }
}

/**
 * Stores information about an image format for base64 detection.
 */
struct ImageFormatInfo
{
    /// File extension (e.g., ".png").
    string format;

    /// Dummy filename for the format.
    string dummyFilename;

    /// Base64 prefix string.
    string prefix;
}

/**
 * Manages loading, monitoring, and access to assets.
 *
 * Description:
 * The `AssetManager` supports threaded loading,
 * live update monitoring, virtual file systems,
 * and registration of custom texture loaders.
 * It can mount directories and box files, and
 * detect base64-encoded images.
 */
class AssetManager: Owner
{
    Application application; // set by the scene
    Dict!(TextureLoader, string) textureLoaders;
    DefaultTextureLoader defaultTextureLoader;
    
    Dict!(Asset, string) assetsByFilename;
    
    VirtualFileSystem fs;
    StdFileSystem stdfs;
    
    UnmanagedImageFactory imageFactory;
    UnmanagedHDRImageFactory hdrImageFactory;
    Thread loadingThread;

    bool liveUpdate = false;
    double liveUpdatePeriod = 5.0;

    protected double monitorTimer = 0.0;

    float nextLoadingPercentage = 0.0f;

    EventManager eventManager;
    
    Dict!(string, string) base64ImagePrefixes;

    this(EventManager emngr, VirtualFileSystem vfs, Owner owner = null)
    {
        super(owner);
        
        defaultTextureLoader = New!DefaultTextureLoader(this);
        
        textureLoaders = New!(Dict!(TextureLoader, string));
        registerTextureLoader(".bmp", defaultTextureLoader);
        registerTextureLoader([".jpg", ".jpeg"], defaultTextureLoader);
        registerTextureLoader(".png", defaultTextureLoader);
        registerTextureLoader(".tga", defaultTextureLoader);
        registerTextureLoader(".hdr", defaultTextureLoader);
        registerTextureLoader(".webp", defaultTextureLoader);
        registerTextureLoader(".avif", defaultTextureLoader);
        registerTextureLoader([".tif", ".tiff"], defaultTextureLoader);
        registerTextureLoader(".dds", defaultTextureLoader);
        registerTextureLoader(".jxl", defaultTextureLoader);
        registerTextureLoader(".gif", defaultTextureLoader);
        registerTextureLoader(".pcx", defaultTextureLoader);
        registerTextureLoader([".pnm", ".ppm", ".pgm", ".pbm"], defaultTextureLoader);
        registerTextureLoader(".qoi", defaultTextureLoader);
        registerTextureLoader(".xpm", defaultTextureLoader);
        registerTextureLoader(".svg", defaultTextureLoader);
        
        assetsByFilename = New!(Dict!(Asset, string));
        
        fs = vfs;
        stdfs = vfs.stdfs;
        
        imageFactory = New!UnmanagedImageFactory();
        hdrImageFactory = New!UnmanagedHDRImageFactory();

        loadingThread = New!Thread(&threadFunc);

        eventManager = emngr;
        
        base64ImagePrefixes = New!(Dict!(string, string))();
        
        // Reference: https://www.digipres.org/formats/mime-types/
        base64ImagePrefixes["data:image/png;base64,"] = "image.png";
        base64ImagePrefixes["data:image/apng;base64,"] = "image.png";
        base64ImagePrefixes["data:image/jpeg;base64,"] = "image.jpg";
        base64ImagePrefixes["data:image/gif;base64,"] = "image.gif";
        base64ImagePrefixes["data:image/webp;base64,"] = "image.webp";
        base64ImagePrefixes["data:image/ktx;base64,"] = "image.ktx";
        base64ImagePrefixes["data:image/svg+xml;base64,"] = "image.svg";
        base64ImagePrefixes["data:image/vnd-ms.dds;base64,"] = "image.dds";
        base64ImagePrefixes["data:image/image/vnd.radiance;base64,"] = "image.hdr";
        base64ImagePrefixes["data:image/x-targa;base64,"] = "image.tga";
        base64ImagePrefixes["data:image/x-tga;base64,"] = "image.tga";
        base64ImagePrefixes["data:image/x-ms-bmp;base64,"] = "image.bmp";
        base64ImagePrefixes["data:image/x-psd;base64,"] = "image.psd";
        base64ImagePrefixes["data:image/avif;base64,"] = "image.avif";
        base64ImagePrefixes["data:image/bmp;base64,"] = "image.bmp";
        base64ImagePrefixes["data:image/x-tiff;base64,"] = "image.tiff";
        base64ImagePrefixes["data:image/x-tif;base64,"] = "image.tif";
        base64ImagePrefixes["data:image/x-xcf;base64,"] = "image.xcf";
        base64ImagePrefixes["data:image/jxl;base64,"] = "image.jxl";
    }
    
    /**
     * Detects the image format and prefix for a base64-encoded image URI.
     *
     * Params:
     *   uri = The base64 URI.
     * Returns:
     *   ImageFormatInfo with format, dummy filename, and prefix.
     */
    ImageFormatInfo detectBase64Image(string uri)
    {
        ImageFormatInfo result;
        result.format = "";
        result.dummyFilename = "";
        result.prefix = "";
        
        foreach(string prefix, string dummyFilename; base64ImagePrefixes)
        {
            if (uri.startsWith(prefix))
            {
                result.format = extension(dummyFilename);
                result.dummyFilename = dummyFilename;
                result.prefix = prefix;
                break;
            }
        }
        
        return result;
    }

    ~this()
    {
        Delete(textureLoaders);
        Delete(assetsByFilename);
        Delete(imageFactory);
        Delete(hdrImageFactory);
        Delete(loadingThread);
        Delete(base64ImagePrefixes);
    }

    /// Mounts a directory into the virtual file system.
    void mountDirectory(string dir)
    {
        fs.mount(dir);
    }

    /// Mounts a box file into the virtual file system.
    void mountBoxFile(string filename)
    {
        BoxFileSystem boxfs = New!BoxFileSystem(fs.openForInput(filename), true);
        fs.mount(boxfs);
    }

    /// Mounts a directory from a box file into the virtual file system.
    void mountBoxFileDirectory(string filename, string dir)
    {
        BoxFileSystem boxfs = New!BoxFileSystem(fs.openForInput(filename), true, dir);
        fs.mount(boxfs);
    }
    
    /// Registers a texture loader for a file extension.
    void registerTextureLoader(string extension, TextureLoader loader)
    {
        textureLoaders[extension] = loader;
    }
    
    /// Registers a texture loader for multiple file extensions.
    void registerTextureLoader(string[] extensions, TextureLoader loader)
    {
        foreach(extension; extensions)
        {
            registerTextureLoader(extension, loader);
        }
    }
    
    /// Returns the texture loader for a given extension.
    TextureLoader textureLoader(string extension)
    {
        if (extension in textureLoaders)
            return textureLoaders[extension];
        else
            return null;
    }

    /// Checks if an asset exists by name.
    bool assetExists(string name)
    {
        if (name in assetsByFilename)
            return true;
        else
            return false;
    }

    /// Adds an asset to the manager.
    Asset addAsset(Asset asset, string name)
    {
        if (!(name in assetsByFilename))
        {
            assetsByFilename[name] = asset;
            if (fs.stat(name, asset.monitorInfo.lastStat))
                asset.monitorInfo.fileExists = true;
        }
        return asset;
    }

    /// Preloads an asset (thread-safe and thread-unsafe parts).
    Asset preloadAsset(Asset asset, string name)
    {
        if (!(name in assetsByFilename))
        {
            assetsByFilename[name] = asset;
            if (fs.stat(name, asset.monitorInfo.lastStat))
                asset.monitorInfo.fileExists = true;
        }

        asset.release();
        asset.threadSafePartLoaded = false;
        asset.threadUnsafePartLoaded = false;

        asset.threadSafePartLoaded = loadAssetThreadSafePart(asset, name);
        if (asset.threadSafePartLoaded)
            asset.threadUnsafePartLoaded = asset.loadThreadUnsafePart();

        return asset;
    }

    /// Reloads an asset by object and filename.
    void reloadAsset(Asset asset, string filename)
    {
        asset.release();
        asset.threadSafePartLoaded = false;
        asset.threadUnsafePartLoaded = false;

        asset.threadSafePartLoaded = loadAssetThreadSafePart(asset, filename);
        if (asset.threadSafePartLoaded)
            asset.threadUnsafePartLoaded = asset.loadThreadUnsafePart();
    }

    /// Reloads an asset by name.
    void reloadAsset(string name)
    {
        auto asset = assetsByFilename[name];

        asset.release();
        asset.threadSafePartLoaded = false;
        asset.threadUnsafePartLoaded = false;

        asset.threadSafePartLoaded = loadAssetThreadSafePart(asset, name);
        if (asset.threadSafePartLoaded)
            asset.threadUnsafePartLoaded = asset.loadThreadUnsafePart();
    }

    /// Gets an asset by name.
    Asset getAsset(string name)
    {
        if (name in assetsByFilename)
            return assetsByFilename[name];
        else
            return null;
    }

    /// Removes an asset by name.
    void removeAsset(string name)
    {
        Delete(assetsByFilename[name]);
        assetsByFilename.remove(name);
    }

    /// Releases all assets and clears the manager.
    void releaseAssets()
    {
        clearOwnedObjects();
        Delete(assetsByFilename);
        assetsByFilename = New!(Dict!(Asset, string));

        Delete(loadingThread);
        loadingThread = New!Thread(&threadFunc);
    }
    
    /// Loads the thread-safe part of an asset from a buffer.
    bool loadAssetThreadSafePart(Asset asset, ubyte[] buffer, string filename)
    {
        ArrayStream arrStrm = New!ArrayStream(buffer);
        bool res = loadAssetThreadSafePart(asset, arrStrm, filename);
        Delete(arrStrm);
        return res;
    }
    
    /// Loads the thread-safe part of an asset from an input stream.
    bool loadAssetThreadSafePart(Asset asset, InputStream istrm, string filename)
    {
        bool res = asset.loadThreadSafePart(filename, istrm, fs, this);
        if (!res)
        {
            logError("Failed to load asset \"", filename, "\"");
        }
        return res;
    }

    /// Loads the thread-safe part of an asset from a file.
    bool loadAssetThreadSafePart(Asset asset, string filename)
    {
        if (!fileExists(filename))
        {
            logError("Cannot find file \"", filename, "\"");
            return false;
        }

        auto fstrm = fs.openForInput(filename);
        bool res = loadAssetThreadSafePart(asset, fstrm, filename);
        Delete(fstrm);
        return res;
    }

    void threadFunc()
    {
        foreach(filename, asset; assetsByFilename)
        {
            nextLoadingPercentage += 1.0f / cast(float)(assetsByFilename.length);
            
            if (!asset.threadSafePartLoaded)
            {
                asset.threadSafePartLoaded = loadAssetThreadSafePart(asset, filename);
                asset.threadUnsafePartLoaded = false;
            }
        }
    }

    /// Starts the threaded loading process.
    void loadThreadSafePart()
    {
        nextLoadingPercentage = 0.0f;
        monitorTimer = 0.0;
        loadingThread.start();
    }

    /// Returns true if assets are currently being loaded in a thread.
    bool isLoading()
    {
        return loadingThread.isRunning;
    }

     /// Loads the thread-unsafe part of all assets.
    void loadThreadUnsafePart()
    {
        bool res = true;
        foreach(filename, asset; assetsByFilename)
        {
            if (asset.threadSafePartLoaded)
            {
                res = asset.loadThreadUnsafePart();
                asset.threadUnsafePartLoaded = res;
                if (!res)
                {
                    logError("Failed to load asset \"", filename, "\"");
                }
            }
        }
    }

    /// Checks if a file exists in the virtual file system.
    bool fileExists(string filename)
    {
        FileStat stat;
        return fs.stat(filename, stat);
    }

    /// Updates the asset monitor for live updates.
    void updateMonitor(double dt)
    {
        if (liveUpdate)
        {
            monitorTimer += dt;
            if (monitorTimer >= liveUpdatePeriod)
            {
                monitorTimer = 0.0;
                foreach(filename, asset; assetsByFilename)
                    monitorCheck(filename, asset);
            }
        }
    }

    /// Checks for file changes and reloads assets if needed.
    protected void monitorCheck(string filename, Asset asset)
    {
        FileStat currentStat;
        if (fs.stat(filename, currentStat))
        {
            if (!asset.monitorInfo.fileExists)
            {
                asset.monitorInfo.fileExists = true;
            }
            else if (currentStat.modificationTimestamp >
                     asset.monitorInfo.lastStat.modificationTimestamp ||
                     currentStat.sizeInBytes !=
                     asset.monitorInfo.lastStat.sizeInBytes)
            {
                reloadAsset(filename);
                asset.monitorInfo.lastStat = currentStat;
                eventManager.queueFileChangeEvent(filename);
            }
        }
        else
        {
            if (asset.monitorInfo.fileExists)
            {
                asset.monitorInfo.fileExists = false;
            }
        }
    }
}
