/*
Copyright (c) 2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module dagon.core.messaging;

import core.atomic;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.core.thread;
import dlib.container.array;

import dagon.core.event;

struct SPSCEventQueue(size_t capacity)
{
    Event[capacity] buffer;
    shared size_t head = 0; // producer writes here
    shared size_t tail = 0; // consumer reads here

    bool push(Event event)
    {
        auto next = (head + 1) % capacity;
        if (next == tail) // queue full
            return false;

        buffer[head] = event;
        atomicStore!(MemoryOrder.rel)(head, next);
        return true;
    }

    bool pop(out Event event)
    {
        if (tail == atomicLoad!(MemoryOrder.acq)(head))
            return false; // empty

        event = buffer[tail];
        tail = (tail + 1) % capacity;
        return true;
    }
}

/**
 * Asynchronous receiver with a lock-free inbox/outbox messaging mechanism.
 */
abstract class Receiver: EventDispatcher
{
    SPSCEventQueue!(50) inbox;
    SPSCEventQueue!(50) outbox;
    bool enabled = true;
    
    this(string address, Owner owner)
    {
        super(owner);
        this.address = address;
    }

    protected bool send(string recipient, string message, uint domain = MessageDomain.ITC)
    {
        return outbox.push(messageEvent(address, recipient, message, domain));
    }

    protected bool receive(out Event event)
    {
        return inbox.pop(event);
    }

    protected void processEvents()
    {
        if (!enabled)
            return;
        
        Event event;
        while(receive(event))
        {
            processEvent(&event);
        }
    }
}

/**
 * Threaded receiver.
 */
class ReceiverThread: Receiver
{
    Thread thread;
    bool running = false;
    
    this(string address, Owner owner)
    {
        super(address, owner);
        thread = New!Thread(&threadFunc);
    }
    
    ~this()
    {
        if (thread.isRunning)
            stop();
        Delete(thread);
    }
    
    void run()
    {
        if (!thread.isRunning)
        {
            running = true;
            thread.start();
        }
    }
    
    void threadFunc()
    {
        while(running)
        {
            processEvents();
            onUpdate();
        }
    }

    void onUpdate()
    {
        //
    }
    
    void stop()
    {
        atomicStore!(MemoryOrder.rel)(running, false);
        thread.join();
    }
}

class MessageBroker: Owner
{
    bool enabled = false;
    string name = "broker";
    EventManager eventManager;
    Event[1024] eventBuffer;
    Array!Receiver receivers;

    this(EventManager eventManager)
    {
        super(eventManager);
        this.eventManager = eventManager;
    }

    ~this()
    {
        receivers.free();
    }

    void add(Receiver r)
    {
        receivers.append(r);
    }
    
    void update()
    {
        if (!enabled)
            return;
        
        size_t numCollected = 0;
        
        for (uint i = 0; i < eventManager.numEvents; i++)
        {
            if (numCollected < eventBuffer.length)
            {
                eventBuffer[numCollected] = eventManager.eventQueue[i];
                numCollected++;
            }
            else
            {
                // TODO
            }
        }

        foreach(receiver; receivers)
        {
            Event event;
            if (receiver.outbox.pop(event))
            {
                if (numCollected < eventBuffer.length)
                {
                    eventBuffer[numCollected] = event;
                    numCollected++;
                }
                else
                {
                    // TODO
                }
            }
        }

        for (size_t i = 0; i < numCollected; i++)
        {
            Event event = eventBuffer[i];
            if (event.type == EventType.Message)
            {
                if (event.domain == MessageDomain.ITC)
                {
                    foreach(receiver; receivers)
                    {
                        if (event.recipient == "broadcast")
                        {
                            if (event.sender != receiver.address)
                                receiver.inbox.push(event);
                        }
                        else if (event.recipient == receiver.address)
                            receiver.inbox.push(event);
                    }
                }
                else
                {
                    eventManager.addEvent(event);
                }
            }
            else
            {
                foreach(receiver; receivers)
                {
                    receiver.inbox.push(event);
                }
            }
        }
    }
}
