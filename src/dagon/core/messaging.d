/*
Copyright (c) 2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Messaging module.
 *
 * Description:
 * The `dagon.core.messaging` provides lock-free, single-producer single-consumer (SPSC)
 * event queues, asynchronous receivers, threaded receivers, and a message broker
 * for inter-thread communication and bidirectional messaging between EventManager and receivers.
 *
 * Copyright: Timur Gafarov 2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.core.messaging;

import core.atomic;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.core.thread;
import dlib.container.array;

import dagon.core.event;

/**
 * Lock-free single-producer single-consumer event queue.
 *
 * Params:
 *   capacity = Maximum number of events in the queue.
 *
 * Members:
 *   buffer = Circular buffer for events.
 *   head = Producer write index.
 *   tail = Consumer read index.
 *
 * Methods:
 *   push = Add an event to the queue. Returns false if full.
 *   pop = Remove an event from the queue. Returns false if empty.
 */
struct SPSCEventQueue(size_t capacity)
{
    /// Circular buffer for events.
    Event[capacity] buffer;

    shared size_t head = 0; // producer writes here
    shared size_t tail = 0; // consumer reads here

    /// Add an event to the queue. Returns false if full.
    bool push(Event event)
    {
        auto next = (head + 1) % capacity;
        if (next == tail) // queue full
            return false;

        buffer[head] = event;
        atomicStore!(MemoryOrder.rel)(head, next);
        return true;
    }

    /// Remove an event from the queue. Returns false if empty.
    bool pop(out Event event)
    {
        if (tail == atomicLoad!(MemoryOrder.acq)(head))
            return false; // empty

        event = buffer[tail];
        tail = (tail + 1) % capacity;
        return true;
    }
}

/**
 * Base class for senders/receivers with a lock-free inbox/outbox messaging.
 */
abstract class Endpoint: EventDispatcher
{
    /// Reference to a message broker
    MessageBroker broker;
    
    /// Incoming event queue.
    SPSCEventQueue!(50) inbox;

    /// Outgoing event queue.
    SPSCEventQueue!(50) outbox;

    /// Receiver enabled flag.
    bool enabled = true;
    
    this(string address, MessageBroker broker, Owner owner)
    {
        super(owner);
        this.broker = broker;
        this.address = address;
        broker.add(this);
    }
    
    this(string address, MessageBroker broker)
    {
        this(address, broker, broker);
    }
    
    /// Initiate a main thread task.
    protected bool queueTask(scope TaskCallback callback, void* payload)
    {
        return outbox.push(taskEvent(callback, payload));
    }

    /// Send a message to a recipient.
    protected bool send(string recipient, string message, uint domain = MessageDomain.ITC)
    {
        return outbox.push(messageEvent(address, recipient, message, domain));
    }

    /// Receive an event from the inbox.
    protected bool receive(out Event event)
    {
        return inbox.pop(event);
    }

    /// Process all events in the inbox.
    protected void processEvents()
    {
        if (!enabled)
            return;
        
        Event event;
        while(receive(event))
        {
            processEvent(&event);
        }
    }
}

/**
 * An endpoint that runs in its own thread to process events asynchronously.
 */
class ThreadedEndpoint: Endpoint
{
    /// Internal thread.
    Thread thread;

    /// Thread running flag.
    shared bool running = false;
    
    this(string address, MessageBroker broker, Owner owner)
    {
        super(address, broker, owner);
        thread = New!Thread(&threadFunc);
    }
    
    ~this()
    {
        if (thread.isRunning)
            stop();
        Delete(thread);
    }
    
    /// Start the thread.
    void run()
    {
        if (!thread.isRunning)
        {
            atomicStore!(MemoryOrder.rel)(running, true);
            thread.start();
        }
    }
    
    /// Thread main loop.
    void threadFunc()
    {
        while(atomicLoad!(MemoryOrder.acq)(running))
        {
            processEvents();
            onUpdate();
        }
    }

    /// Called every update cycle.
    void onUpdate()
    {
        //
    }
    
    /// Stop the thread.
    void stop()
    {
        atomicStore!(MemoryOrder.rel)(running, false);
        thread.join();
    }
}

alias Actor = ThreadedEndpoint;

/**
 * Message broker for distributing events and messages.
 * Collects events from EventManager and receivers, then dispatches them.
 */
class MessageBroker: Owner
{
    /// Broker enabled flag.
    bool enabled = false;

    /// Associated event manager.
    EventManager eventManager;

    /// Temporary buffer for collected events.
    Event[1024] eventBuffer;

    /// List of registered endpoints.
    Array!Endpoint endpoints;

    this(EventManager eventManager)
    {
        super(eventManager);
        this.eventManager = eventManager;
    }

    ~this()
    {
        endpoints.free();
    }

    /// Register a receiver.
    void add(Endpoint endpoint)
    {
        endpoints.append(endpoint);
    }
    
    /// Collect and dispatch events/messages.
    void update()
    {
        if (!enabled)
            return;
        
        size_t numCollected = 0;
        
        // Collect events from the main event queue
        for (uint i = 0; i < eventManager.numEvents; i++)
        {
            Event event = eventManager.eventQueue[i];
            if (event.type != EventType.Task)
            {
                if (numCollected < eventBuffer.length)
                {
                    eventBuffer[numCollected] = eventManager.eventQueue[i];
                    numCollected++;
                }
                else
                {
                    // TODO
                }
            }
        }

        // Collect endpoint outgoing events
        foreach(endpoint; endpoints)
        {
            Event event;
            if (endpoint.outbox.pop(event))
            {
                if (numCollected < eventBuffer.length)
                {
                    eventBuffer[numCollected] = event;
                    numCollected++;
                }
                else
                {
                    // TODO
                }
            }
        }

        // Dispatch collected events
        for (size_t i = 0; i < numCollected; i++)
        {
            Event event = eventBuffer[i];
            if (event.type == EventType.Task)
            {
                eventManager.addEvent(event);
            }
            else if (event.type == EventType.Message)
            {
                if (event.domain == MessageDomain.ITC)
                {
                    foreach(endpoint; endpoints)
                    {
                        if (event.recipient == "broadcast")
                        {
                            if (event.sender != endpoint.address)
                                endpoint.inbox.push(event);
                        }
                        else if (event.recipient == endpoint.address)
                            endpoint.inbox.push(event);
                    }
                }
                else
                {
                    eventManager.addEvent(event);
                }
            }
            else
            {
                foreach(endpoint; endpoints)
                {
                    endpoint.inbox.push(event);
                }
            }
        }
    }
}
