/*
Copyright (c) 2017-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Defines key codes and button codes for keyboard, mouse, and game controllers.
 *
 * The `dagon.core.keycodes` module provides symbolic constants for all supported
 * keyboard keys (based on SDL scancodes), mouse buttons, and gamepad buttons and axes,
 * enabling consistent input handling across platforms.
 *
 * Copyright: Timur Gafarov 2017-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.core.keycodes;

import dagon.core.bindings;

/**
 * Keyboard key codes (based on SDL scancodes).
 *
 * Description:
 * These constants map to physical keyboard keys
 * and are used for input binding and event handling.
 */
enum
{
    KEY_UNKNOWN = 0,

    KEY_A = 4,
    KEY_B = 5,
    KEY_C = 6,
    KEY_D = 7,
    KEY_E = 8,
    KEY_F = 9,
    KEY_G = 10,
    KEY_H = 11,
    KEY_I = 12,
    KEY_J = 13,
    KEY_K = 14,
    KEY_L = 15,
    KEY_M = 16,
    KEY_N = 17,
    KEY_O = 18,
    KEY_P = 19,
    KEY_Q = 20,
    KEY_R = 21,
    KEY_S = 22,
    KEY_T = 23,
    KEY_U = 24,
    KEY_V = 25,
    KEY_W = 26,
    KEY_X = 27,
    KEY_Y = 28,
    KEY_Z = 29,

    KEY_1 = 30,
    KEY_2 = 31,
    KEY_3 = 32,
    KEY_4 = 33,
    KEY_5 = 34,
    KEY_6 = 35,
    KEY_7 = 36,
    KEY_8 = 37,
    KEY_9 = 38,
    KEY_0 = 39,

    KEY_RETURN = 40,
    KEY_ESCAPE = 41,
    KEY_BACKSPACE = 42,
    KEY_TAB = 43,
    KEY_SPACE = 44,

    KEY_MINUS = 45,
    KEY_EQUALS = 46,
    KEY_LEFTBRACKET = 47,
    KEY_RIGHTBRACKET = 48,
    KEY_BACKSLASH = 49,
    KEY_NONUSHASH = 50,
    KEY_SEMICOLON = 51,
    KEY_APOSTROPHE = 52,
    KEY_GRAVE = 53,
    KEY_COMMA = 54,
    KEY_PERIOD = 55,
    KEY_SLASH = 56,

    KEY_CAPSLOCK = 57,

    KEY_F1 = 58,
    KEY_F2 = 59,
    KEY_F3 = 60,
    KEY_F4 = 61,
    KEY_F5 = 62,
    KEY_F6 = 63,
    KEY_F7 = 64,
    KEY_F8 = 65,
    KEY_F9 = 66,
    KEY_F10 = 67,
    KEY_F11 = 68,
    KEY_F12 = 69,

    KEY_PRINTSCREEN = 70,
    KEY_SCROLLLOCK = 71,
    KEY_PAUSE = 72,
    KEY_INSERT = 73,
    KEY_HOME = 74,
    KEY_PAGEUP = 75,
    KEY_DELETE = 76,
    KEY_END = 77,
    KEY_PAGEDOWN = 78,
    KEY_RIGHT = 79,
    KEY_LEFT = 80,
    KEY_DOWN = 81,
    KEY_UP = 82,

    KEY_NUMLOCKCLEAR = 83,
    KEY_KP_DIVIDE = 84,
    KEY_KP_MULTIPLY = 85,
    KEY_KP_MINUS = 86,
    KEY_KP_PLUS = 87,
    KEY_KP_ENTER = 88,
    KEY_KP_1 = 89,
    KEY_KP_2 = 90,
    KEY_KP_3 = 91,
    KEY_KP_4 = 92,
    KEY_KP_5 = 93,
    KEY_KP_6 = 94,
    KEY_KP_7 = 95,
    KEY_KP_8 = 96,
    KEY_KP_9 = 97,
    KEY_KP_0 = 98,
    KEY_KP_PERIOD = 99,

    KEY_NONUSBACKSLASH = 100,
    KEY_APPLICATION = 101,
    KEY_POWER = 102,
    KEY_KP_EQUALS = 103,
    KEY_F13 = 104,
    KEY_F14 = 105,
    KEY_F15 = 106,
    KEY_F16 = 107,
    KEY_F17 = 108,
    KEY_F18 = 109,
    KEY_F19 = 110,
    KEY_F20 = 111,
    KEY_F21 = 112,
    KEY_F22 = 113,
    KEY_F23 = 114,
    KEY_F24 = 115,
    KEY_EXECUTE = 116,
    KEY_HELP = 117,
    KEY_MENU = 118,
    KEY_SELECT = 119,
    KEY_STOP = 120,
    KEY_AGAIN = 121,
    KEY_UNDO = 122,
    KEY_CUT = 123,
    KEY_COPY = 124,
    KEY_PASTE = 125,
    KEY_FIND = 126,
    KEY_MUTE = 127,
    KEY_VOLUMEUP = 128,
    KEY_VOLUMEDOWN = 129,
    KEY_KP_COMMA = 133,
    KEY_KP_EQUALSAS400 = 134,

    KEY_INTERNATIONAL1 = 135,
    KEY_INTERNATIONAL2 = 136,
    KEY_INTERNATIONAL3 = 137,
    KEY_INTERNATIONAL4 = 138,
    KEY_INTERNATIONAL5 = 139,
    KEY_INTERNATIONAL6 = 140,
    KEY_INTERNATIONAL7 = 141,
    KEY_INTERNATIONAL8 = 142,
    KEY_INTERNATIONAL9 = 143,
    KEY_LANG1 = 144,
    KEY_LANG2 = 145,
    KEY_LANG3 = 146,
    KEY_LANG4 = 147,
    KEY_LANG5 = 148,
    KEY_LANG6 = 149,
    KEY_LANG7 = 150,
    KEY_LANG8 = 151,
    KEY_LANG9 = 152,

    KEY_ALTERASE = 153,
    KEY_SYSREQ = 154,
    KEY_CANCEL = 155,
    KEY_CLEAR = 156,
    KEY_PRIOR = 157,
    KEY_RETURN2 = 158,
    KEY_SEPARATOR = 159,
    KEY_OUT = 160,
    KEY_OPER = 161,
    KEY_CLEARAGAIN = 162,
    KEY_CRSEL = 163,
    KEY_EXSEL = 164,

    KEY_KP_00 = 176,
    KEY_KP_000 = 177,
    KEY_THOUSANDSSEPARATOR = 178,
    KEY_DECIMALSEPARATOR = 179,
    KEY_CURRENCYUNIT = 180,
    KEY_CURRENCYSUBUNIT = 181,
    KEY_KP_LEFTPAREN = 182,
    KEY_KP_RIGHTPAREN = 183,
    KEY_KP_LEFTBRACE = 184,
    KEY_KP_RIGHTBRACE = 185,
    KEY_KP_TAB = 186,
    KEY_KP_BACKSPACE = 187,
    KEY_KP_A = 188,
    KEY_KP_B = 189,
    KEY_KP_C = 190,
    KEY_KP_D = 191,
    KEY_KP_E = 192,
    KEY_KP_F = 193,
    KEY_KP_XOR = 194,
    KEY_KP_POWER = 195,
    KEY_KP_PERCENT = 196,
    KEY_KP_LESS = 197,
    KEY_KP_GREATER = 198,
    KEY_KP_AMPERSAND = 199,
    KEY_KP_DBLAMPERSAND = 200,
    KEY_KP_VERTICALBAR = 201,
    KEY_KP_DBLVERTICALBAR = 202,
    KEY_KP_COLON = 203,
    KEY_KP_HASH = 204,
    KEY_KP_SPACE = 205,
    KEY_KP_AT = 206,
    KEY_KP_EXCLAM = 207,
    KEY_KP_MEMSTORE = 208,
    KEY_KP_MEMRECALL = 209,
    KEY_KP_MEMCLEAR = 210,
    KEY_KP_MEMADD = 211,
    KEY_KP_MEMSUBTRACT = 212,
    KEY_KP_MEMMULTIPLY = 213,
    KEY_KP_MEMDIVIDE = 214,
    KEY_KP_PLUSMINUS = 215,
    KEY_KP_CLEAR = 216,
    KEY_KP_CLEARENTRY = 217,
    KEY_KP_BINARY = 218,
    KEY_KP_OCTAL = 219,
    KEY_KP_DECIMAL = 220,
    KEY_KP_HEXADECIMAL = 221,

    KEY_LCTRL = 224,
    KEY_LSHIFT = 225,
    KEY_LALT = 226,
    KEY_LGUI = 227,
    KEY_RCTRL = 228,
    KEY_RSHIFT = 229,
    KEY_RALT = 230,
    KEY_RGUI = 231,

    KEY_MODE = 257,

    KEY_AUDIONEXT = 258,
    KEY_AUDIOPREV = 259,
    KEY_AUDIOSTOP = 260,
    KEY_AUDIOPLAY = 261,
    KEY_AUDIOMUTE = 262,
    KEY_MEDIASELECT = 263,
    KEY_WWW = 264,
    KEY_MAIL = 265,
    KEY_CALCULATOR = 266,
    KEY_COMPUTER = 267,
    KEY_AC_SEARCH = 268,
    KEY_AC_HOME = 269,
    KEY_AC_BACK = 270,
    KEY_AC_FORWARD = 271,
    KEY_AC_STOP = 272,
    KEY_AC_REFRESH = 273,
    KEY_AC_BOOKMARKS = 274,

    KEY_BRIGHTNESSDOWN = 275,
    KEY_BRIGHTNESSUP = 276,
    KEY_DISPLAYSWITCH = 277,
    KEY_KBDILLUMTOGGLE = 278,
    KEY_KBDILLUMDOWN = 279,
    KEY_KBDILLUMUP = 280,
    KEY_EJECT = 281,
    KEY_SLEEP = 282,

    KEY_APP1 = 283,
    KEY_APP2 = 284,

    NUM_KEYCODES = 512
}

/**
 * Mouse button codes and bitmasks.
 *
 * MB_LEFT, MB_MIDDLE, MB_RIGHT, MB_X1, MB_X2 are button indices.
 * MB_LMASK, MB_MMASK, MB_RMASK, MB_X1MASK, MB_X2MASK are SDL bitmasks for button state.
 */
enum: ubyte
{
    MB_LEFT = 1,
    MB_MIDDLE = 2,
    MB_RIGHT = 3,
    MB_X1 = 4,
    MB_X2 = 5,
    MB_LMASK = SDL_BUTTON(MB_LEFT),
    MB_MMASK = SDL_BUTTON(MB_MIDDLE),
    MB_RMASK = SDL_BUTTON(MB_RIGHT),
    MB_X1MASK = SDL_BUTTON(MB_X1),
    MB_X2MASK = SDL_BUTTON(MB_X2),
}

/**
 * Game controller button codes (based on SDL_CONTROLLER_BUTTON_*).
 *
 * GB_A, GB_B, GB_X, GB_Y, etc. correspond to standard controller buttons.
 */
enum
{
    GB_INVALID = SDL_CONTROLLER_BUTTON_INVALID,
    GB_A = SDL_CONTROLLER_BUTTON_A,
    GB_B = SDL_CONTROLLER_BUTTON_B,
    GB_X = SDL_CONTROLLER_BUTTON_X,
    GB_Y = SDL_CONTROLLER_BUTTON_Y,
    GB_BACK = SDL_CONTROLLER_BUTTON_BACK,
    GB_GUIDE = SDL_CONTROLLER_BUTTON_GUIDE,
    GB_START = SDL_CONTROLLER_BUTTON_START,
    GB_LEFTSTICK = SDL_CONTROLLER_BUTTON_LEFTSTICK,
    GB_RIGHTSTICK = SDL_CONTROLLER_BUTTON_RIGHTSTICK,
    GB_LEFTSHOULDER = SDL_CONTROLLER_BUTTON_LEFTSHOULDER,
    GB_RIGHTSHOULDER = SDL_CONTROLLER_BUTTON_RIGHTSHOULDER,
    GB_DPUP = SDL_CONTROLLER_BUTTON_DPAD_UP,
    GB_DPDOWN = SDL_CONTROLLER_BUTTON_DPAD_DOWN,
    GB_DPLEFT = SDL_CONTROLLER_BUTTON_DPAD_LEFT,
    GB_DPRIGHT = SDL_CONTROLLER_BUTTON_DPAD_RIGHT,
    GB_MISC1 = SDL_CONTROLLER_BUTTON_MISC1,       // Xbox Series X share button, PS5 microphone button, Nintendo Switch Pro capture button, Amazon Luna microphone button
    GB_PADDLE1 = SDL_CONTROLLER_BUTTON_PADDLE1,   // Xbox Elite paddle P1 (upper left, facing the back)
    GB_PADDLE2 = SDL_CONTROLLER_BUTTON_PADDLE2,   // Xbox Elite paddle P3 (upper right, facing the back)
    GB_PADDLE3 = SDL_CONTROLLER_BUTTON_PADDLE3,   // Xbox Elite paddle P2 (lower left, facing the back)
    GB_PADDLE4 = SDL_CONTROLLER_BUTTON_PADDLE4,   // Xbox Elite paddle P4 (lower right, facing the back)
    GB_TOUCHPAD = SDL_CONTROLLER_BUTTON_TOUCHPAD, // PS4/PS5 touchpad button
    GB_MAX = SDL_CONTROLLER_BUTTON_MAX
}

/**
 * Game controller axis codes (based on SDL_CONTROLLER_AXIS_*).
 *
 * GA_LEFTX, GA_LEFTY, GA_RIGHTX, GA_RIGHTY, GA_TRIGGERLEFT, GA_TRIGGERRIGHT are standard axes.
 */
enum
{
    GA_INVALID = SDL_CONTROLLER_AXIS_INVALID,
    GA_LEFTX = SDL_CONTROLLER_AXIS_LEFTX,
    GA_LEFTY = SDL_CONTROLLER_AXIS_LEFTY,
    GA_RIGHTX = SDL_CONTROLLER_AXIS_RIGHTX,
    GA_RIGHTY = SDL_CONTROLLER_AXIS_RIGHTY,
    GA_TRIGGERLEFT = SDL_CONTROLLER_AXIS_TRIGGERLEFT,
    GA_TRIGGERRIGHT = SDL_CONTROLLER_AXIS_TRIGGERRIGHT,
    GA_MAX = SDL_CONTROLLER_AXIS_MAX
}
