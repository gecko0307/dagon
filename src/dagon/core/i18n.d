/*
Copyright (c) 2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Internationalization system for Dagon applications.
 *
 * Description:
 * The `dagon.core.i18n` module implements a simple text localization mechanism
 * based on key-value configuration files (`*.lang`).
 * Localization is loaded into the `Translation` object and provides access to strings by keys.
 * Locales are loaded from `locale/<locale_code>.lang`, for example `locale/en_US.lang`.
 *
 * Copyright: Timur Gafarov 2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.core.i18n;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.text.str;

import dagon.core.application;
import dagon.core.config;
import dagon.core.logger;
import dagon.core.vfs;

/**
 * Represents a translation table for the given locale.
 *
 * Loads a dictionary of strings from the configuration file
 * and allows retrieving translations by keys.
 */
class Translation: Owner
{
    /// Dictionary of localized strings.
    Configuration dictionary;
    
    ///
    VirtualFileSystem vfs;
    
    /**
     * Creates a new localization object.
     *
     * Params:
     *   app = Reference to the application from which the VFS is taken.
     *   owner = Owner object.
     */
    this(Application app, Owner owner)
    {
        super(owner);
        vfs = app.vfs;
        dictionary = New!Configuration(this);
    }
    
    /**
     * Loads a locale file by its code.
     * The file name is generated automatically as `locale/<code>.lang`,
     * where `<code>` is a string in the POSIX locale format (`en_US`, `ru_RU`, etc.).
     *
     * If the file is not found, a warning is logged,
     * if found, a message is loaded and logged.
     *
     * Params:
     *   locale = Locale code (e.g. `"en_US"`).
     */
    void load(string locale)
    {
        string dirSeparator = "/";
        version(Windows)
            dirSeparator = "\\";
        String localeFilename = "locale";
        localeFilename ~= dirSeparator;
        localeFilename ~= locale;
        localeFilename ~= ".lang";
        
        if (!dictionary.fromFile(vfs, localeFilename))
        {
            logWarning("i18n: no \"", localeFilename, "\" found");
        }
        else
        {
            logInfo("i18n: loaded ", localeFilename);
        }
        
        localeFilename.free();
    }
    
    /**
     * Gets the translation of a string by key.
     * If no translation is found, the key itself is returned.
     *
     * Params:
     *   key = Text key.
     *
     * Returns:
     *   Localized text or original key.
     */
    string get(string key)
    {
        auto tr = key in dictionary.props;
        if (tr)
            return tr.toString;
        else
            return key;
    }
    
    alias opCall = get;
}
