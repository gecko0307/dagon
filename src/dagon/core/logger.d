/*
Copyright (c) 2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Provides logging facilities for Dagon applications.
 *
 * Description:
 * The `dagon.core.logger` module provides logging functions.
 *
 * Copyright: Timur Gafarov 2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.core.logger;

import std.stdio;
import std.datetime;
import std.format;
import std.file: exists;
import dlib.core.ownership;

/**
 * Log levels for controlling message verbosity and severity.
 */
enum LogLevel: uint
{
    /// Log all messages.
    All = 0,

    /// Debug messages.
    Debug = 1,

    /// Informational messages.
    Info = 2,

    /// Warnings.
    Warning = 3,

    /// Errors.
    Error = 4,

    /// Fatal errors.
    FatalError = 5
}

/**
 * Options for log output configuration.
 *
 * Members:
 *   printToStdout   = If true, log to standard output.
 *   printToFile     = If true, log to a file.
 *   printTimestamp  = If true, prepend timestamps to log messages.
 *   printLogLevel   = If true, prepend log level tags to messages.
 *   filename        = Log file name (if file output is enabled).
 *   dateTimePrinter = Function to generate timestamp strings.
 */
struct LogOutputOptions
{
    bool printToStdout;
    bool printToFile;
    bool printTimestamp;
    bool printLogLevel;
    string filename;
    string function() dateTimePrinter;
}

/// Global log level
__gshared LogLevel logLevel = LogLevel.All;

/// Global log output options
__gshared LogOutputOptions logOutputOptions = {
    printToStdout: true,
    printToFile: false,
    printTimestamp: false,
    printLogLevel: true,
    filename: "",
    dateTimePrinter: &defaultDateTimePrinter
};

/**
 * Sets the filename for file logging and enables file output.
 *
 * Params:
 *   filename = The log file name.
 */
void setLogFilename(string filename)
{
    logOutputOptions.printToFile = true;
    logOutputOptions.filename = filename;
}

private
{
    __gshared File _logFile;
    __gshared bool _logFileInitialized = false;
}

/**
 * Returns the default timestamp string for log messages.
 *
 * Returns:
 *   A formatted date and time string.
 */
string defaultDateTimePrinter()
{
    auto now = Clock.currTime;
    return format("[%02d.%02d.%04d %02d:%02d:%02d]",
        now.day, now.month, now.year,
        now.hour, now.minute, now.second);
}

/**
 * Logs a message at the specified log level.
 *
 * Params:
 *   level = The log level.
 *   args  = The message arguments (variadic).
 */
void log(A...)(LogLevel level, A args)
{
    if (level < logLevel)
        return;
    
    string timestamp;
    if (logOutputOptions.dateTimePrinter)
        timestamp = logOutputOptions.dateTimePrinter();
    
    string levelStr = "";
    switch(level)
    {
        case LogLevel.Debug:
            levelStr = "[Debug] ";
            break;
        case LogLevel.Info:
            levelStr = "[Info] ";
            break;
        case LogLevel.Warning:
            levelStr = "[Warning] ";
            break;
        case LogLevel.Error:
            levelStr = "[Error] ";
            break;
        case LogLevel.FatalError:
            levelStr = "[Fatal error] ";
            break;
        default: break;
    }
    
    if (logOutputOptions.printToStdout)
    {
        if (logOutputOptions.printTimestamp)
        {
            if (logOutputOptions.printLogLevel)
                writeln(timestamp, levelStr, args);
            else
                writeln(timestamp, " ", args);
        }
        else
        {
            if (logOutputOptions.printLogLevel)
                writeln(levelStr, args);
            else
                writeln(args);
        }
    }
    
    if (logOutputOptions.printToFile && logOutputOptions.filename.length)
    {
        if (_logFileInitialized)
        {
            if (logOutputOptions.printTimestamp)
            {
                if (logOutputOptions.printLogLevel)
                    _logFile.writeln(timestamp, levelStr, args);
                else
                    _logFile.writeln(timestamp, " ", args);
            }
            else
            {
                if (logOutputOptions.printLogLevel)
                    _logFile.writeln(levelStr, args);
                else
                    _logFile.writeln(args);
            }
            
            _logFile.flush();
        }
        else
        {
            try
            {
                _logFile = File(logOutputOptions.filename, "w");
                _logFileInitialized = true;
            }
            catch(Exception e)
            {
                writeln("[Logger Error] Failed to open log file: ", e.msg);
                logOutputOptions.filename = "";
                logOutputOptions.printToFile = false;
            }
        }
    }
}

/**
 * Logs a debug message.
 *
 * Params:
 *   args = The message arguments (variadic).
 */
void logDebug(A...)(A args)
{
    log(LogLevel.Debug, args);
}

/**
 * Logs an informational message.
 *
 * Params:
 *   args = The message arguments (variadic).
 */
void logInfo(A...)(A args)
{
    log(LogLevel.Info, args);
}

/**
 * Logs a warning message.
 *
 * Params:
 *   args = The message arguments (variadic).
 */
void logWarning(A...)(A args)
{
    log(LogLevel.Warning, args);
}

/**
 * Logs an error message.
 *
 * Params:
 *   args = The message arguments (variadic).
 */
void logError(A...)(A args)
{
    log(LogLevel.Error, args);
}

/**
 * Logs a fatal error message.
 *
 * Params:
 *   args = The message arguments (variadic).
 */
void logFatalError(A...)(A args)
{
    log(LogLevel.FatalError, args);
}

static ~this()
{
    if (_logFileInitialized)
    {
        _logFile.close();
        _logFileInitialized = false;
    }
}
