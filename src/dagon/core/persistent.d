/*
Copyright (c) 2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Provides persistent key-value data storage.
 *
 * Description:
 * The `dagon.core.persistent` module defines the `PersistentStorage` class,
 * which stores and retrieves application-specific user data (such as preferences
 * and game saves) in a platform-appropriate location (home directory on Posix,
 * %APPDATA% on Windows) using the same format as `dagon.core.config`.
 *
 * Copyright: Timur Gafarov 2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.core.persistent;

import std.traits;
import std.file;
import std.process;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.core.stream;
import dlib.math.vector;
import dlib.image.color;
import dlib.text.str;
import dlib.filesystem.filesystem;
import dlib.filesystem.stdfs;

import dagon.core.vfs;
import dagon.core.props;
import dagon.core.logger;

/**
 * Persistent key-value data storage for application/user data.
 *
 * Description:
 * Uses the same format as `dagon.core.config``.
 * Stores data in the user's home directory (Posix) or %APPDATA% (Windows).
 * It can be used to manage application-specific user data, such as preferences
 * and game saves.
 */
class PersistentStorage: Owner
{
    /// The underlying file system for storage.
    StdFileSystem fs;

    /// The application data directory path.
    String appDataDir;

    /// The full path to the persistent storage file.
    String filename;

    /// The local filename (relative to working directory).
    String localFilename;

    /// The properties object storing key-value pairs.
    Properties props;

    /**
     * Constructs a new `PersistentStorage` object.
     *
     * Params:
     *   filename  = The name of the persistent storage file.
     *   owner     = The owner object for memory/resource management.
     *
     * The constructor determines the appropriate storage directory, creates it if necessary,
     * and loads existing data if present.
     */
    this(VirtualFileSystem vfs, string filename, Owner owner)
    {
        super(owner);
        fs = vfs.stdfs;
        
        string dirSeparator;
        version(Windows) dirSeparator = "\\";
        version(Posix) dirSeparator = "/";
        
        vfs.createAppDataDirectory();
        string appDataDir = vfs.appDataPath;
        
        if (appDataDir.length)
        {
            // Use <appDataDir>/<filename>
            this.filename = String(vfs.appDataPath);
            this.filename ~= dirSeparator;
            this.filename ~= filename;
        }
        else
        {
            // Use ./<filename>
            this.filename = String(filename);
        }
        
        this.localFilename = String(filename);
        
        logInfo("Using persistent storage file: ", this.filename);
        
        props = New!Properties(this);
        load();
    }
    
    /// Destructor. Frees resources and cleans up storage paths.
    ~this()
    {
        appDataDir.free();
        filename.free();
        localFilename.free();
    }
    
    /**
     * Loads persistent data from the storage file.
     *
     * If the file exists, reads and parses its contents into the properties object.
     */
    void load()
    {
        FileStat stat;
        if (fs.stat(filename, stat))
        {
            auto istrm = fs.openForInput(filename);
            auto input = readText(istrm);
            Delete(istrm);
            props.parse(input);
            Delete(input);
        }
    }
    
    /**
     * Saves the current properties to the persistent storage file.
     */
    void save()
    {
        String data = props.serialize();
        
        OutputStream strm = fs.openForOutput(filename, FileSystem.create | FileSystem.truncate);
        strm.writeArray(data);
        strm.close();
        Delete(strm);
        
        data.free();
    }
    
    /**
     * Gets a property by key using opDispatch.
     *
     * Params:
     *   key = The property key.
     * Returns:
     *   The property value.
     */
    DProperty opDispatch(string key)()
    {
        return props[key];
    }
    
    /**
     * Sets a property by key using opDispatch.
     *
     * Params:
     *   key   = The property key.
     *   value = The value to set (string, numeric, or vector types).
     *
     * Automatically saves the storage file if the value changes.
     */
    void opDispatch(string key, T)(T value)
    {
        bool changed = false;
        static if (is(T == string))
        {
            props.set(DPropType.Number, key, value);
            changed = true;
        }
        else static if (is(T == Vector3f) || is(T == Vector4f) || is(T == Color4f))
        {
            props.set(DPropType.Vector, key, value.toString());
            changed = true;
        }
        else static if (isNumeric!T)
        {
            props.set(DPropType.Number, key, value.to!string);
            changed = true;
        }
        
        if (changed)
            save();
    }
}
