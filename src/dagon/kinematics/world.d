/*
Copyright (c) 2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module dagon.kinematics.world;

import std.math;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.container.array;
import dlib.math.vector;
import dlib.math.matrix;
import dlib.math.transformation;
import dlib.math.interpolation;

import dagon.core.time;
import dagon.core.event;
import dagon.graphics.entity;
import dagon.kinematics.geometry;
import dagon.kinematics.shape;
import dagon.kinematics.contact;
import dagon.kinematics.collision;

class KinematicWorld: Owner
{
    EventManager eventManager;
    Array!Collider staticColliders;
    Array!Collider dynamicColliders;
    
    Vector3f gravityVector = Vector3f(0.0f, -1.0f, 0.0f);
    float gravity = 9.8f;
    
    float onFloorThreshold = 0.8f;
    
    this(EventManager eventManager, Owner o)
    {
        super(o);
        this.eventManager = eventManager;
    }
    
    ~this()
    {
        staticColliders.free();
        dynamicColliders.free();
    }
    
    Collider addStaticCollider(Entity entity, CollisionShape collisionShape = null)
    {
        if (collisionShape is null)
        {
            GeomBox box = New!GeomBox(entity.boundingBoxSize, this);
            collisionShape = New!CollisionShape(box, this);
        }
        
        Collider collider = New!Collider(this, entity, collisionShape);
        staticColliders.append(collider);
        return collider;
    }
    
    Collider addDynamicCollider(Entity entity, CollisionShape collisionShape = null)
    {
        if (collisionShape is null)
        {
            GeomBox box = New!GeomBox(entity.boundingBoxSize, this);
            collisionShape = New!CollisionShape(box, this);
        }
        
        Collider collider = New!Collider(this, entity, collisionShape);
        dynamicColliders.append(collider);
        return collider;
    }
    
    void update(double deltaTime)
    {
        for (size_t i = 0; i < dynamicColliders.data.length; i++)
        {
            auto dynamicCollider = dynamicColliders.data[i];
            dynamicCollider.move(dynamicCollider.gravityVector * gravity * deltaTime);
            dynamicCollider.applyVelocity(deltaTime);
            dynamicCollider.onFloor = false;
            dynamicCollider.gravityVector = gravityVector;
            
            // Static collisions
            for (size_t j = 0; j < staticColliders.data.length; j++)
            {
                auto staticCollider = staticColliders.data[j];
                Contact contact;
                
                if (shapeVsShape(
                    dynamicCollider.collisionShape,
                    staticCollider.collisionShape,
                    contact))
                {
                    float onFloor = abs(dot(contact.normal, gravityVector));
                    if (!dynamicCollider.onFloor)
                    {
                        if (onFloor > onFloorThreshold)
                        {
                            dynamicCollider.onFloor = true;
                            
                            Vector3f grav;
                            if (onFloor > 0.95f)
                                grav = -contact.normal;
                            else
                                grav = lerp(dynamicCollider.gravityVector, -contact.normal, onFloor);
                            dynamicCollider.gravityVector = grav;
                        }
                    }
                    
                    Vector3f normalResponce = contact.normal * contact.penetration;
                    dynamicCollider.moveSmooth(normalResponce, 0.8f);
                }
            }
            
            // TODO: dynamic collisions
            
            dynamicCollider.integrate();
        }
    }
}

class Collider: EntityComponent
{
    KinematicWorld kinematicWorld;
    CollisionShape collisionShape;
    Vector3f position = Vector3f(0.0f, 0.0f, 0.0f);
    Vector3f velocity = Vector3f(0.0f, 0.0f, 0.0f);
    Vector3f gravityVector = Vector3f(0.0f, -1.0f, 0.0f);
    float jumpSpeedDelta = 0.0f;
    float jumpDamping = 1.0f;
    bool onFloor = false;

    this(KinematicWorld world, Entity e, CollisionShape cs)
    {
        super(world.eventManager, e);
        kinematicWorld = world;
        collisionShape = cs;
        collisionShape.transformation =
            translationMatrix(e.position) *
            e.rotation.toMatrix4x4 *
            scaleMatrix(entity.scaling);
        position = e.position;
    }
    
    void move(Vector3f deltaVelocity)
    {
        velocity += deltaVelocity;
    }
    
    void moveSmooth(Vector3f deltaVelocity, float smooth)
    {
        velocity = lerp(velocity, velocity + deltaVelocity, smooth);
    }
    
    void jump(float deltaSpeed)
    {
        if (onFloor && jumpSpeedDelta < 0.00001f)
        {
            onFloor = false;
            jumpSpeedDelta += deltaSpeed;
        }
    }
    
    void applyVelocity(double deltaTime)
    {
        if (jumpSpeedDelta > 0.0f)
            jumpSpeedDelta -= jumpDamping * deltaTime;
        else jumpSpeedDelta = 0.0f;
        
        velocity -= kinematicWorld.gravityVector * jumpSpeedDelta;
        
        Matrix4x4f trans = collisionShape.transformation;
        Vector3f newPos = trans.translation + velocity;
        trans.a14 = newPos.x;
        trans.a24 = newPos.y;
        trans.a34 = newPos.z;
        collisionShape.transformation = trans;
        
        position = newPos;
    }
    
    void integrate()
    {
        entity.position += velocity;
        velocity = Vector3f(0.0f, 0.0f, 0.0f);
    }
    
    override void update(Time t)
    {
        collisionShape.transformation = entity.transformation;
    }
}
