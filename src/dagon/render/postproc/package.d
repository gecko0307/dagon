/*
Copyright (c) 2019-2024 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dagon.render.postproc;

import dlib.core.memory;
import dlib.core.ownership;

import dagon.core.event;
import dagon.core.time;
import dagon.core.bindings;
import dagon.graphics.texture;
import dagon.resource.scene;
import dagon.render.renderer;
import dagon.render.pass;
import dagon.render.view;
import dagon.render.framebuffer;
import dagon.render.deferred.gbuffer;

public
{
    import dagon.render.postproc.blurpass;
    import dagon.render.postproc.filterpass;
    import dagon.render.postproc.shaders;
}

class DoubleBuffer: Framebuffer
{
    Framebuffer writeBuffer;
    Framebuffer readBuffer;

    this(Framebuffer writeBuffer, Framebuffer readBuffer, Owner owner)
    {
        super(owner);
        this.writeBuffer = writeBuffer;
        this.readBuffer = readBuffer;
    }

    void swap()
    {
        auto w = writeBuffer;
        writeBuffer = readBuffer;
        readBuffer = w;
    }

    override GLuint colorTexture()
    {
        return readBuffer.colorTexture();
    }

    override GLuint depthTexture()
    {
        return readBuffer.depthTexture();
    }

    override void bind()
    {
        writeBuffer.bind();
    }

    override void unbind()
    {
        writeBuffer.unbind();
    }

    override void resize(uint width, uint height)
    {

    }

    override void blitColorBuffer()
    {

    }

    override void blitDepthBuffer()
    {

    }
}

class PostProcRenderer: Renderer
{
    public:

    Framebuffer inputBuffer;
    Framebuffer outputBuffer;

    protected:

    DoubleBuffer ldrDoubleBuffer;

    Framebuffer ldrBuffer1;
    Framebuffer ldrBuffer2;

    Framebuffer hdrBuffer1;
    Framebuffer hdrBuffer2;
    Framebuffer hdrBuffer3;
    Framebuffer hdrBuffer4;

    RenderView viewHalf;
    BlurPass passBlur;

    DepthOfFieldShader dofShader;
    BrightPassShader brightPassShader;
    GlowShader glowShader;
    MotionBlurShader motionBlurShader;
    TonemapShader tonemapShader;
    FXAAShader fxaaShader;
    LensDistortionShader lensDistortionShader;
    LUTShader lutShader;

    FilterPass passDoF;
    FilterPass passMotionBlur;
    FilterPass passBrightPass;
    FilterPass passGlow;
    FilterPass passTonemap;
    FilterPass passFXAA;
    FilterPass passLensDistortion;
    FilterPass passLUT;

    bool _dofEnabled = false;
    bool _motionBlurEnabled = false;
    bool _glowEnabled = false;

    public:

    float glowViewScale = 0.33f;

    float glowThreshold = 0.8f;
    float glowIntensity = 0.2f;
    int glowRadius = 5;
    Tonemapper tonemapper = Tonemapper.ACES;
    float exposure = 1.0f;

    uint motionBlurSamples = 16;
    uint motionBlurFramerate = 24;
    float motionBlurRandomness = 0.2f;
    float motionBlurMinDistance = 0.01f;
    float motionBlurMaxDistance = 1.0f;
    float radialBlurAmount = 0.0f;
    
    float lensDistortionScale = 1.0f;
    float lensDistortionDispersion = 0.1f;
    
    bool autofocus = true;
    float focalDepth = 1.5f;
    float focalLength = 5.0f;
    float fStop = 2.0f;
    
    bool dofManual = false;
    float dofNearStart = 1.0f;
    float dofNearDistance = 2.0f;
    float dofFarStart = 1.0f;
    float dofFarDistance = 3.0f;

    Texture colorLookupTable;

    this(EventManager eventManager, Framebuffer inputBuffer, GBuffer gbuffer, Owner owner)
    {
        super(eventManager, owner);

        this.inputBuffer = inputBuffer;

        viewHalf = New!RenderView(0, 0, cast(uint)(view.width * glowViewScale), cast(uint)(view.height * glowViewScale), this);

        ldrBuffer1 = New!Framebuffer(view.width, view.height, FrameBufferFormat.RGBA8, true, this);
        ldrBuffer2 = New!Framebuffer(view.width, view.height, FrameBufferFormat.RGBA8, true, this);
        ldrDoubleBuffer = New!DoubleBuffer(ldrBuffer1, ldrBuffer2, this);

        hdrBuffer1 = New!Framebuffer(viewHalf.width, viewHalf.height, FrameBufferFormat.RGBA16F, true, this);
        hdrBuffer2 = New!Framebuffer(viewHalf.width, viewHalf.height, FrameBufferFormat.RGBA16F, true, this);

        hdrBuffer3 = New!Framebuffer(view.width, view.height, FrameBufferFormat.RGBA16F, true, this);
        hdrBuffer4 = New!Framebuffer(view.width, view.height, FrameBufferFormat.RGBA16F, true, this);

        dofShader = New!DepthOfFieldShader(this);
        dofShader.gbuffer = gbuffer;
        passDoF = New!FilterPass(pipeline, dofShader);
        passDoF.view = view;
        passDoF.inputBuffer = inputBuffer;
        passDoF.outputBuffer = hdrBuffer3;

        motionBlurShader = New!MotionBlurShader(this);
        motionBlurShader.gbuffer = gbuffer;
        passMotionBlur = New!FilterPass(pipeline, motionBlurShader);
        passMotionBlur.view = view;
        passMotionBlur.inputBuffer = passDoF.outputBuffer;
        passMotionBlur.outputBuffer = hdrBuffer4;

        brightPassShader = New!BrightPassShader(this);
        brightPassShader.luminanceThreshold = glowThreshold;
        passBrightPass = New!FilterPass(pipeline, brightPassShader);
        passBrightPass.view = viewHalf;
        passBrightPass.inputBuffer = passMotionBlur.outputBuffer;
        passBrightPass.outputBuffer = hdrBuffer1;

        passBlur = New!BlurPass(pipeline);
        passBlur.view = viewHalf;
        passBlur.inputBuffer = passBrightPass.outputBuffer;
        passBlur.outputBuffer = hdrBuffer1;
        passBlur.outputBuffer2 = hdrBuffer2;
        passBlur.radius = glowRadius;

        glowShader = New!GlowShader(this);
        glowShader.blurredBuffer = passBlur.outputBuffer;
        glowShader.intensity = glowIntensity;
        passGlow = New!FilterPass(pipeline, glowShader);
        passGlow.view = view;
        passGlow.inputBuffer = passMotionBlur.outputBuffer;
        passGlow.outputBuffer = hdrBuffer3;

        tonemapShader = New!TonemapShader(this);
        passTonemap = New!FilterPass(pipeline, tonemapShader);
        passTonemap.view = view;
        passTonemap.inputBuffer = passGlow.outputBuffer;
        passTonemap.outputBuffer = ldrDoubleBuffer;

        fxaaShader = New!FXAAShader(this);
        passFXAA = New!FilterPass(pipeline, fxaaShader);
        passFXAA.view = view;
        passFXAA.inputBuffer = ldrDoubleBuffer;
        passFXAA.outputBuffer = ldrDoubleBuffer;

        lensDistortionShader = New!LensDistortionShader(this);
        passLensDistortion = New!FilterPass(pipeline, lensDistortionShader);
        passLensDistortion.view = view;
        passLensDistortion.inputBuffer = ldrDoubleBuffer;
        passLensDistortion.outputBuffer = ldrDoubleBuffer;

        lutShader = New!LUTShader(this);
        passLUT = New!FilterPass(pipeline, lutShader);
        passLUT.view = view;
        passLUT.inputBuffer = ldrDoubleBuffer;
        passLUT.outputBuffer = ldrDoubleBuffer;

        outputBuffer = ldrDoubleBuffer;
    }

    void depthOfFieldEnabled(bool mode) @property
    {
        _dofEnabled = mode;
        passDoF.active = mode;
    }
    bool depthOfFieldEnabled() @property
    {
        return _dofEnabled;
    }

    void motionBlurEnabled(bool mode) @property
    {
        _motionBlurEnabled = mode;
        passMotionBlur.active = mode;
    }
    bool motionBlurEnabled() @property
    {
        return _motionBlurEnabled;
    }

    void glowEnabled(bool mode) @property
    {
        _glowEnabled = mode;
        passBrightPass.active = mode;
        passBlur.active = mode;
        passGlow.active = mode;
    }
    bool glowEnabled() @property
    {
        return _glowEnabled;
    }

    void fxaaEnabled(bool mode) @property
    {
        passFXAA.active = mode;
    }
    bool fxaaEnabled() @property
    {
        return passFXAA.active;
    }

    void lensDistortionEnabled(bool mode) @property
    {
        passLensDistortion.active = mode;
    }
    bool lensDistortionEnabled() @property
    {
        return passLensDistortion.active;
    }

    void lutEnabled(bool mode) @property
    {
        passLUT.active = mode;
    }
    bool lutEnabled() @property
    {
        return passLUT.active;
    }

    override void update(Time t)
    {
        super.update(t);

        brightPassShader.luminanceThreshold = glowThreshold;
        glowShader.intensity = glowIntensity;
        passBlur.radius = glowRadius;
        
        tonemapShader.tonemapper = tonemapper;
        tonemapShader.exposure = exposure;
        
        dofShader.autofocus = autofocus;
        dofShader.focalDepth = focalDepth;
        dofShader.focalLength = focalLength;
        dofShader.fStop = fStop;
        dofShader.manual = dofManual;
        dofShader.nearStart = dofNearStart;
        dofShader.nearDistance = dofNearDistance;
        dofShader.farStart = dofFarStart;
        dofShader.farDistance = dofFarDistance;
        
        motionBlurShader.samples = motionBlurSamples;
        motionBlurShader.currentFramerate = 60.0f;
        motionBlurShader.shutterFramerate = motionBlurFramerate;
        motionBlurShader.offsetRandomCoefficient = motionBlurRandomness;
        motionBlurShader.minDistance = motionBlurMinDistance;
        motionBlurShader.maxDistance = motionBlurMaxDistance;
        motionBlurShader.radialBlur = radialBlurAmount;
        
        lensDistortionShader.scale = lensDistortionScale;
        lensDistortionShader.dispersion = lensDistortionDispersion;
        
        lutShader.colorLookupTable = colorLookupTable;
        if (lutShader.colorLookupTable)
        {
            lutShader.colorLookupTable.useMipmapFiltering = false;
        }
    }

    override void render()
    {
        if (outputBuffer)
            outputBuffer.bind();
        
        if (!_dofEnabled)
        {
            passMotionBlur.inputBuffer = inputBuffer;
        }
        else
        {
            passMotionBlur.inputBuffer = passDoF.outputBuffer;
        }
        
        if (!_motionBlurEnabled)
        {
            if (_dofEnabled)
            {
                passBrightPass.inputBuffer = passDoF.outputBuffer;
                passGlow.inputBuffer = passDoF.outputBuffer;
            }
            else
            {
                passBrightPass.inputBuffer = inputBuffer;
                passGlow.inputBuffer = inputBuffer;
            }
        }
        else
        {
            passBrightPass.inputBuffer = passMotionBlur.outputBuffer;
            passGlow.inputBuffer = passMotionBlur.outputBuffer;
        }
        
        if (!_glowEnabled)
        {
            if (_motionBlurEnabled)
                passTonemap.inputBuffer = passMotionBlur.outputBuffer;
            else if (_dofEnabled)
                passTonemap.inputBuffer = passDoF.outputBuffer;
            else
                passTonemap.inputBuffer = inputBuffer;
        }
        else
        {
            passTonemap.inputBuffer = passGlow.outputBuffer;
        }
        
        foreach(pass; pipeline.passes.data)
        {
            if (pass.active)
            {
                pass.render();
                ldrDoubleBuffer.swap();
            }
        }

        if (outputBuffer)
            outputBuffer.unbind();
    }

    override void setViewport(uint x, uint y, uint w, uint h)
    {
        super.setViewport(x, y, w, h);

        viewHalf.resize(cast(uint)(view.width * glowViewScale), cast(uint)(view.height * glowViewScale));

        ldrBuffer1.resize(view.width, view.height);
        ldrBuffer2.resize(view.width, view.height);

        hdrBuffer1.resize(viewHalf.width, viewHalf.height);
        hdrBuffer2.resize(viewHalf.width, viewHalf.height);
        hdrBuffer3.resize(view.width, view.height);
        hdrBuffer4.resize(view.width, view.height);
    }
}
