/*
Copyright (c) 2019-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Base class for a render pass in Dagon's rendering pipeline.
 *
 * Description:
 * The `dagon.render.pass` module defines the `RenderPass` abstract class,
 * which represents a rendering stage in the pipeline, and the
 * `FallbackShader` class, a simple shader used as a default when no material
 * or shader is specified.
 *
 * Copyright: Timur Gafarov 2019-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.render.pass;

import std.stdio;
import std.math;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.math.vector;
import dlib.math.matrix;
import dlib.math.transformation;
import dlib.math.interpolation;
import dlib.geometry.frustum;
import dlib.image.color;
import dlib.text.str;

import dagon.core.event;
import dagon.core.bindings;
import dagon.core.time;
import dagon.graphics.entity;
import dagon.graphics.material;
import dagon.graphics.shader;
import dagon.graphics.state;
import dagon.render.pipeline;
import dagon.render.view;

/**
 * A fallback shader used when no material or shader is specified.
 * Loads simple vertex and fragment shaders and binds standard
 * transformation parameters.
 */
class FallbackShader: Shader
{
    String vs, fs;

    /**
     * Constructs the fallback shader and loads its source code.
     *
     * Params:
     *   owner = Owner object.
     */
    this(Owner owner)
    {
        vs = Shader.load("data/__internal/shaders/Fallback/Fallback.vert.glsl");
        fs = Shader.load("data/__internal/shaders/Fallback/Fallback.frag.glsl");

        auto myProgram = New!ShaderProgram(vs, fs, this);
        super(myProgram, owner);
    }

    /// Destructor. Frees shader source strings.
    ~this()
    {
        vs.free();
        fs.free();
    }

    /**
     * Binds standard transformation parameters to the shader.
     *
     * Params:
     *   state = The current graphics pipeline state.
     */
    override void bindParameters(GraphicsState* state)
    {
        setParameter("modelViewMatrix", state.modelViewMatrix);
        setParameter("projectionMatrix", state.projectionMatrix);
        setParameter("normalMatrix", state.normalMatrix);
        setParameter("viewMatrix", state.viewMatrix);
        setParameter("invViewMatrix", state.invViewMatrix);

        super.bindParameters(state);
    }
}

/**
 * Abstract base class for a render pass in the rendering pipeline.
 *
 * Description:
 * Manages graphics pipeline state and renders an entity group.
 */
abstract class RenderPass: EventListener
{
    /// The parent render pipeline.
    RenderPipeline pipeline;

    /// The render view for this pass.
    RenderView view;

    /// The group of entities to render.
    EntityGroup group;

    /// The graphics pipeline state.
    GraphicsState state;

    /// Default material used if an entity has none.
    Material defaultMaterial;

    /// Default shader used if an entity has none.
    FallbackShader defaultShader;

    /// Whether this pass is active.
    bool active = true;

    /// Whether to clear the framebuffer.
    bool clear = true;

    /// The previous frame's view matrix.
    Matrix4x4f prevViewMatrix;

    /**
     * Constructs a render pass and registers it with the pipeline.
     *
     * Params:
     *   pipeline = The parent render pipeline.
     *   group    = Optional entity group to render.
     */
    this(RenderPipeline pipeline, EntityGroup group = null)
    {
        super(pipeline.eventManager, pipeline);
        this.pipeline = pipeline;
        this.group = group;
        pipeline.addPass(this);
        state.reset();
        defaultShader = New!FallbackShader(this);
        defaultMaterial = New!Material(this);
        prevViewMatrix = Matrix4x4f.identity;
    }

    /**
     * Updates the render pass state for the current frame.
     *
     * Params:
     *   t = Frame timing information.
     */
    void update(Time t)
    {
        processEvents();

        state.time = t;
        state.localTime += t.delta;
        if (state.localTime >= 1.0f)
            state.localTime = 0.0f;
        
        updateState();
    }
    
    /// Updates the graphics pipeline state with the current view.
    void updateState()
    {
        if (view)
        {
            state.viewMatrix = view.viewMatrix();
            state.invViewMatrix = view.invViewMatrix();

            state.invViewRotationMatrix = matrix3x3to4x4(matrix4x4to3x3(state.invViewMatrix));

            state.prevViewMatrix = prevViewMatrix;
            prevViewMatrix = state.viewMatrix;

            state.projectionMatrix = view.projectionMatrix();
            state.invProjectionMatrix = state.projectionMatrix.inverse;
            
            state.frustum = Frustum(state.projectionMatrix * state.viewMatrix);

            state.resolution = Vector2f(view.width, view.height);
            state.pixelRatio = pipeline.eventManager.application.pixelRatio;
            
            state.zNear = view.zNear;
            state.zFar = view.zFar;

            state.cameraPosition = view.cameraPosition;
            
            state.debugMode = pipeline.debugMode;
        }
    }

    /**
     * Renders a single entity with the specified shader.
     *
     * Params:
     *   entity = The entity to render.
     *   shader = The shader to use.
     */
    void renderEntity(Entity entity, Shader shader)
    {
        state.layer = entity.layer;
        state.blurMask = entity.blurMask;
        state.gbufferMask = entity.gbufferMask;
        state.modelMatrix = entity.absoluteTransformation;
        state.invModelMatrix = entity.invAbsoluteTransformation;
        state.modelViewMatrix = state.viewMatrix * state.modelMatrix;
        state.normalMatrix = state.modelViewMatrix.inverse.transposed;
        state.prevModelViewMatrix = state.prevViewMatrix * entity.prevAbsoluteTransformation;
        state.shader = shader;
        state.opacity = entity.opacity;
        state.pose = entity.pose;
        
        if (entity.material)
            entity.material.bind(&state);
        else
            defaultMaterial.bind(&state);
        
        if (entity.bindShaderParameters)
        {
            shader.bindParameters(&state);
            entity.drawable.render(&state);
            shader.unbindParameters(&state);
        }
        else
        {
            entity.drawable.render(&state);
        }
        
        if (entity.material)
            entity.material.unbind(&state);
        else
            defaultMaterial.unbind(&state);
    }

    /// Renders the pass (to be implemented by subclasses).
    void render()
    {
        //
    }
}
