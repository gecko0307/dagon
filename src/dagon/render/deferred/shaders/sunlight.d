/*
Copyright (c) 2019-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dagon.render.deferred.shaders.sunlight;

import std.stdio;
import std.math;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.math.vector;
import dlib.math.matrix;
import dlib.math.transformation;
import dlib.math.interpolation;
import dlib.image.color;
import dlib.text.str;

import dagon.core.bindings;
import dagon.graphics.shader;
import dagon.graphics.state;
import dagon.graphics.csm;

class SunLightShader: Shader
{
   protected:
    String vs, fs;

    Matrix4x4f defaultShadowMatrix;
    GLuint defaultShadowTexture;
    
    ShaderParameter!Matrix4x4f viewMatrix;
    ShaderParameter!Matrix4x4f invViewMatrix;
    ShaderParameter!Matrix4x4f projectionMatrix;
    ShaderParameter!Matrix4x4f invProjectionMatrix;
    ShaderParameter!Vector2f resolution;
    ShaderParameter!float zNear;
    ShaderParameter!float zFar;
    
    ShaderParameter!Color4f fogColor;
    ShaderParameter!float fogStart;
    ShaderParameter!float fogEnd;
    
    ShaderParameter!Vector3f lightDirection;
    ShaderParameter!Color4f lightColor;
    ShaderParameter!float lightEnergy;
    ShaderParameter!int lightScattering;
    ShaderParameter!float lightScatteringG;
    ShaderParameter!float lightScatteringDensity;
    ShaderParameter!int lightScatteringSamples;
    ShaderParameter!float lightScatteringMaxRandomStepOffset;
    ShaderParameter!int lightScatteringShadow;
    ShaderParameter!float lightDiffuse;
    ShaderParameter!float lightSpecular;
    
    ShaderParameter!float time;
    
    ShaderParameter!int colorBuffer;
    ShaderParameter!int depthBuffer;
    ShaderParameter!int normalBuffer;
    ShaderParameter!int pbrBuffer;
    ShaderParameter!int occlusionBuffer;
    ShaderParameter!int haveOcclusionBuffer;
    
    ShaderParameter!int shadowTextureArray;
    ShaderParameter!float shadowResolution;
    ShaderParameter!Matrix4x4f shadowMatrix1;
    ShaderParameter!Matrix4x4f shadowMatrix2;
    ShaderParameter!Matrix4x4f shadowMatrix3;
    ShaderSubroutine shadowMapSubroutine;
    GLuint shadowMapSubroutineCascaded,
           shadowMapSubroutineNone;
    
   public:
    this(Owner owner)
    {
        vs = Shader.load("data/__internal/shaders/SunLight/SunLight.vert.glsl");
        fs = Shader.load("data/__internal/shaders/SunLight/SunLight.frag.glsl");

        auto myProgram = New!ShaderProgram(vs, fs, this);
        super(myProgram, owner);

        defaultShadowMatrix = Matrix4x4f.identity;

        glGenTextures(1, &defaultShadowTexture);
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D_ARRAY, defaultShadowTexture);
        glTexImage3D(GL_TEXTURE_2D_ARRAY, 0, GL_DEPTH_COMPONENT24, 1, 1, 3, 0, GL_DEPTH_COMPONENT, GL_FLOAT, null);
        glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_COMPARE_MODE, GL_COMPARE_REF_TO_TEXTURE);
        glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_COMPARE_FUNC, GL_LEQUAL);
        glBindTexture(GL_TEXTURE_2D_ARRAY, 0);
        
        viewMatrix = createParameter!Matrix4x4f("viewMatrix");
        invViewMatrix = createParameter!Matrix4x4f("invViewMatrix");
        projectionMatrix = createParameter!Matrix4x4f("projectionMatrix");
        invProjectionMatrix = createParameter!Matrix4x4f("invProjectionMatrix");
        resolution = createParameter!Vector2f("resolution");
        zNear = createParameter!float("zNear");
        zFar = createParameter!float("zFar");
        
        fogColor = createParameter!Color4f("fogColor");
        fogStart = createParameter!float("fogStart");
        fogEnd = createParameter!float("fogEnd");
        
        lightDirection = createParameter!Vector3f("lightDirection");
        lightColor = createParameter!Color4f("lightColor");
        lightEnergy = createParameter!float("lightEnergy");
        lightScattering = createParameter!int("lightScattering");
        lightScatteringG = createParameter!float("lightScatteringG");
        lightScatteringDensity = createParameter!float("lightScatteringDensity");
        lightScatteringSamples = createParameter!int("lightScatteringSamples");
        lightScatteringMaxRandomStepOffset = createParameter!float("lightScatteringMaxRandomStepOffset");
        lightScatteringShadow = createParameter!int("lightScatteringShadow");
        lightDiffuse = createParameter!float("lightDiffuse");
        lightSpecular = createParameter!float("lightSpecular");
        
        time = createParameter!float("time");
        
        colorBuffer = createParameter!int("colorBuffer");
        depthBuffer = createParameter!int("depthBuffer");
        normalBuffer = createParameter!int("normalBuffer");
        pbrBuffer = createParameter!int("pbrBuffer");
        occlusionBuffer = createParameter!int("occlusionBuffer");
        haveOcclusionBuffer = createParameter!int("haveOcclusionBuffer");
        
        shadowTextureArray = createParameter!int("shadowTextureArray");
        shadowResolution = createParameter!float("shadowResolution");
        shadowMatrix1 = createParameter!Matrix4x4f("shadowMatrix1");
        shadowMatrix2 = createParameter!Matrix4x4f("shadowMatrix2");
        shadowMatrix3 = createParameter!Matrix4x4f("shadowMatrix3");
        shadowMapSubroutine = createParameterSubroutine("shadowMap", ShaderType.Fragment);
        shadowMapSubroutineCascaded = shadowMapSubroutine.getIndex("shadowMapCascaded");
        shadowMapSubroutineNone = shadowMapSubroutine.getIndex("shadowMapNone");
    }

    ~this()
    {
        if (glIsFramebuffer(defaultShadowTexture))
            glDeleteFramebuffers(1, &defaultShadowTexture);

        vs.free();
        fs.free();
    }

    override void bindParameters(GraphicsState* state)
    {
        viewMatrix = &state.viewMatrix;
        invViewMatrix = &state.invViewMatrix;
        projectionMatrix = &state.projectionMatrix;
        invProjectionMatrix = &state.invProjectionMatrix;
        resolution = state.resolution;
        zNear = state.zNear;
        zFar = state.zFar;

        // Environment
        if (state.environment)
        {
            fogColor = state.environment.fogColor;
            fogStart = state.environment.fogStart;
            fogEnd = state.environment.fogEnd;
        }
        else
        {
            fogColor = Color4f(0.5f, 0.5f, 0.5f, 1.0f);
            fogStart = 0.0f;
            fogEnd = 1000.0f;
        }

        // Light
        if (state.light)
        {
            auto light = state.light;
            Vector4f lightDirHg = Vector4f(light.directionAbsolute);
            lightDirHg.w = 0.0;
            lightDirection = (lightDirHg * state.viewMatrix).xyz;
            lightColor = light.color;
            lightEnergy = light.energy;
            lightScattering = light.scatteringEnabled;
            lightScatteringG = 1.0f - light.scattering;
            lightScatteringDensity = light.mediumDensity;
            lightScatteringSamples = light.scatteringSamples;
            lightScatteringMaxRandomStepOffset = light.scatteringMaxRandomStepOffset;
            lightScatteringShadow = light.scatteringUseShadow;
            lightDiffuse = light.diffuse;
            lightSpecular = light.specular;
        }
        else
        {
            Vector4f lightDirHg = Vector4f(0.0f, 0.0f, 1.0f, 0.0f);
            lightDirection = (lightDirHg * state.viewMatrix).xyz;
            lightColor = Color4f(1.0f, 1.0f, 1.0f, 1.0f);
            lightEnergy = 1.0f;
            lightScattering = 0;
            lightScatteringG = 0.0f;
            lightScatteringDensity = 0.0f;
            lightScatteringSamples = 1;
            lightScatteringMaxRandomStepOffset = 0.0f;
            lightScatteringShadow = false;
            lightDiffuse = 1.0f;
            lightSpecular = 1.0f;
        }

        time = state.localTime;

        // Texture 0 - color buffer
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, state.colorTexture);
        colorBuffer = 0;

        // Texture 1 - depth buffer
        glActiveTexture(GL_TEXTURE1);
        glBindTexture(GL_TEXTURE_2D, state.depthTexture);
        depthBuffer = 1;

        // Texture 2 - normal buffer
        glActiveTexture(GL_TEXTURE2);
        glBindTexture(GL_TEXTURE_2D, state.normalTexture);
        normalBuffer = 2;

        // Texture 3 - pbr buffer
        glActiveTexture(GL_TEXTURE3);
        glBindTexture(GL_TEXTURE_2D, state.pbrTexture);
        pbrBuffer = 3;

        // Texture 4 - shadow map
        if (state.light)
        {
            if (state.light.shadowEnabled)
            {
                CascadedShadowMap csm = cast(CascadedShadowMap)state.light.shadowMap;

                glActiveTexture(GL_TEXTURE4);
                glBindTexture(GL_TEXTURE_2D_ARRAY, csm.depthTexture);
                shadowTextureArray = 4;
                shadowResolution = cast(float)csm.resolution;
                shadowMatrix1 = &csm.area[0].shadowMatrix;
                shadowMatrix2 = &csm.area[1].shadowMatrix;
                shadowMatrix3 = &csm.area[2].shadowMatrix;
                shadowMapSubroutine.index = shadowMapSubroutineCascaded;
            }
            else
            {
                glActiveTexture(GL_TEXTURE4);
                glBindTexture(GL_TEXTURE_2D_ARRAY, defaultShadowTexture);
                shadowTextureArray = 4;
                shadowMatrix1 = &defaultShadowMatrix;
                shadowMatrix2 = &defaultShadowMatrix;
                shadowMatrix3 = &defaultShadowMatrix;
                shadowMapSubroutine.index = shadowMapSubroutineNone;
            }
        }

        // Texture 5 - occlusion buffer
        glActiveTexture(GL_TEXTURE5);
        occlusionBuffer = 5;
        if (glIsTexture(state.occlusionTexture))
        {
            glBindTexture(GL_TEXTURE_2D, state.occlusionTexture);
            haveOcclusionBuffer = true;
        }
        else
        {
            glBindTexture(GL_TEXTURE_2D, 0);
            haveOcclusionBuffer = false;
        }

        glActiveTexture(GL_TEXTURE0);

        super.bindParameters(state);
    }

    override void unbindParameters(GraphicsState* state)
    {
        super.unbindParameters(state);

        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE1);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE2);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE3);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE4);
        glBindTexture(GL_TEXTURE_2D_ARRAY, 0);

        glActiveTexture(GL_TEXTURE5);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE0);
    }
}
