/*
Copyright (c) 2019-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dagon.render.deferred.shaders.geometry;

import std.stdio;
import std.math;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.math.vector;
import dlib.math.matrix;
import dlib.math.transformation;
import dlib.math.interpolation;
import dlib.image.color;
import dlib.text.str;

import dagon.core.bindings;
import dagon.graphics.entity;
import dagon.graphics.material;
import dagon.graphics.shader;
import dagon.graphics.state;
import dagon.graphics.pose;

class GeometryShader: Shader
{
   protected:
    String vs, fs;
    
    ShaderParameter!Matrix4x4f modelViewMatrix;
    ShaderParameter!Matrix4x4f projectionMatrix;
    ShaderParameter!Matrix4x4f normalMatrix;
    ShaderParameter!Matrix4x4f viewMatrix;
    ShaderParameter!Matrix4x4f invViewMatrix;
    ShaderParameter!Matrix4x4f prevModelViewMatrix;
    
    ShaderParameter!float opacity;
    ShaderParameter!Matrix3x3f textureMatrix;
    ShaderParameter!int textureMappingMode;
    ShaderParameter!float gbufferMask;
    ShaderParameter!float blurMask;
    ShaderParameter!int sphericalNormal;
    ShaderParameter!float clipThreshold;
    
    ShaderParameter!int skinned;
    GLint boneMatricesLocation;
    
    ShaderParameter!int diffuseTexture;
    ShaderParameter!Color4f diffuseVector;
    ShaderSubroutine diffuseSurbroutine;
    GLuint diffuseSurbroutineColorTexture,
           diffuseSurbroutineColorValue;
    
    ShaderParameter!int normalTexture;
    ShaderParameter!Vector3f normalVector;
    ShaderSubroutine normalSurbroutine;
    GLuint normalSurbroutineMap,
           normalSurbroutineValue;
    ShaderParameter!int generateTBN;
    ShaderParameter!float normalYSign;
    
    ShaderParameter!int roughnessMetallicTexture;
    ShaderParameter!Color4f roughnessMetallicFactor;
    ShaderSubroutine roughnessSubroutine;
    ShaderSubroutine metallicSubroutine;
    GLuint roughnessSubroutineMap,
           roughnessSubroutineValue;
    GLuint metallicSubroutineMap,
           metallicSubroutineValue;
    
    ShaderParameter!float subsurfaceFactor;
    
    ShaderParameter!int emissionTexture;
    ShaderParameter!Color4f emissionFactor;
    ShaderSubroutine emissionSubroutine;
    GLuint emissionSubroutineColorTexture,
           emissionSubroutineColorValue;
    ShaderParameter!float energy;
    
    ShaderParameter!int heightTexture;
    ShaderParameter!float heightScalar;
    ShaderSubroutine heightSubroutine;
    GLuint heightSubroutineMap,
           heightSubroutineValue;
    
    ShaderSubroutine parallaxSubroutine;
    GLuint parallaxSubroutineSimple,
           parallaxSubroutineOcclusionMapping,
           parallaxSubroutineNone;
    ShaderParameter!float parallaxScale;
    ShaderParameter!float parallaxBias;

   public:
    this(Owner owner)
    {
        vs = Shader.load("data/__internal/shaders/Geometry/Geometry.vert.glsl");
        fs = Shader.load("data/__internal/shaders/Geometry/Geometry.frag.glsl");

        auto prog = New!ShaderProgram(vs, fs, this);
        super(prog, owner);
        
        modelViewMatrix = createParameter!Matrix4x4f("modelViewMatrix");
        projectionMatrix = createParameter!Matrix4x4f("projectionMatrix");
        normalMatrix = createParameter!Matrix4x4f("normalMatrix");
        viewMatrix = createParameter!Matrix4x4f("viewMatrix");
        invViewMatrix = createParameter!Matrix4x4f("invViewMatrix");
        prevModelViewMatrix = createParameter!Matrix4x4f("prevModelViewMatrix");
        
        opacity = createParameter!float("opacity");
        textureMatrix = createParameter!Matrix3x3f("textureMatrix");
        textureMappingMode = createParameter!int("textureMappingMode");
        gbufferMask = createParameter!float("gbufferMask");
        blurMask = createParameter!float("blurMask");
        sphericalNormal = createParameter!int("sphericalNormal");
        clipThreshold = createParameter!float("clipThreshold");
        
        skinned = createParameter!int("skinned");
        // TODO: ShaderParameter specialization for uniform arrays
        boneMatricesLocation = glGetUniformLocation(prog.program, "boneMatrices[0]");
        
        diffuseTexture = createParameter!int("diffuseTexture");
        diffuseVector = createParameter!Color4f("diffuseVector");
        diffuseSurbroutine = createParameterSubroutine("diffuse", ShaderType.Fragment);
        diffuseSurbroutineColorTexture = diffuseSurbroutine.getIndex("diffuseColorTexture");
        diffuseSurbroutineColorValue = diffuseSurbroutine.getIndex("diffuseColorValue");
        
        normalTexture = createParameter!int("normalTexture");
        normalVector = createParameter!Vector3f("normalVector");
        normalSurbroutine = createParameterSubroutine("normal", ShaderType.Fragment);
        normalSurbroutineMap = normalSurbroutine.getIndex("normalMap");
        normalSurbroutineValue = normalSurbroutine.getIndex("normalValue");
        generateTBN = createParameter!int("generateTBN");
        normalYSign = createParameter!float("normalYSign");
        
        roughnessMetallicTexture = createParameter!int("roughnessMetallicTexture");
        roughnessMetallicFactor = createParameter!Color4f("roughnessMetallicFactor");
        roughnessSubroutine = createParameterSubroutine("roughness", ShaderType.Fragment);
        roughnessSubroutineMap = roughnessSubroutine.getIndex("roughnessMap");
        roughnessSubroutineValue = roughnessSubroutine.getIndex("roughnessValue");
        metallicSubroutine = createParameterSubroutine("metallic", ShaderType.Fragment);
        metallicSubroutineMap = metallicSubroutine.getIndex("metallicMap");
        metallicSubroutineValue = metallicSubroutine.getIndex("metallicValue");
        
        subsurfaceFactor = createParameter!float("subsurfaceFactor");
        
        emissionTexture = createParameter!int("emissionTexture");
        emissionFactor = createParameter!Color4f("emissionFactor");
        emissionSubroutine = createParameterSubroutine("emission", ShaderType.Fragment);
        emissionSubroutineColorTexture = emissionSubroutine.getIndex("emissionColorTexture");
        emissionSubroutineColorValue = emissionSubroutine.getIndex("emissionColorValue");
        energy = createParameter!float("energy");
        
        heightTexture = createParameter!int("heightTexture");
        heightScalar = createParameter!float("heightScalar");
        heightSubroutine = createParameterSubroutine("height", ShaderType.Fragment);
        heightSubroutineMap = heightSubroutine.getIndex("heightMap");
        heightSubroutineValue = heightSubroutine.getIndex("heightValue");
        
        parallaxSubroutine = createParameterSubroutine("parallax", ShaderType.Fragment);
        parallaxSubroutineSimple = parallaxSubroutine.getIndex("parallaxSimple");
        parallaxSubroutineOcclusionMapping = parallaxSubroutine.getIndex("parallaxOcclusionMapping");
        parallaxSubroutineNone = parallaxSubroutine.getIndex("parallaxNone");
        parallaxScale = createParameter!float("parallaxScale");
        parallaxBias = createParameter!float("parallaxBias");
    }

    ~this()
    {
        vs.free();
        fs.free();
    }

    override void bindParameters(GraphicsState* state)
    {
        Material mat = state.material;
        
        modelViewMatrix = &state.modelViewMatrix;
        projectionMatrix = &state.projectionMatrix;
        normalMatrix = &state.normalMatrix;
        viewMatrix = &state.viewMatrix;
        invViewMatrix = &state.invViewMatrix;
        prevModelViewMatrix = &state.prevModelViewMatrix;
        
        opacity = state.opacity * mat.opacity;
        textureMatrix = &mat.textureTransformation;
        textureMappingMode = mat.textureMappingMode;
        gbufferMask = state.gbufferMask;
        blurMask = state.blurMask;
        sphericalNormal = mat.sphericalNormal;
        clipThreshold = mat.alphaTestThreshold;
        
        if (state.pose)
        {
            Pose pose = state.pose;
            if (pose.boneMatrices.length)
            {
                int numBones = cast(int)pose.boneMatrices.length;
                if (numBones > 128)
                    numBones = 128;
                glUniformMatrix4fv(boneMatricesLocation, numBones, GL_FALSE, pose.boneMatrices[0].arrayof.ptr);
                skinned = true;
            }
            else
            {
                skinned = false;
            }
        }
        else
        {
            skinned = false;
        }

        // Diffuse
        glActiveTexture(GL_TEXTURE0);
        diffuseTexture = 0;
        diffuseVector = mat.baseColorFactor;
        if (mat.baseColorTexture)
        {
            mat.baseColorTexture.bind();
            diffuseSurbroutine.index = diffuseSurbroutineColorTexture;
        }
        else
        {
            glBindTexture(GL_TEXTURE_2D, 0);
            diffuseSurbroutine.index = diffuseSurbroutineColorValue;
        }
        
        // Normal
        glActiveTexture(GL_TEXTURE1);
        normalTexture = 1;
        normalVector = mat.normalFactor;
        if (mat.normalTexture)
        {
            mat.normalTexture.bind();
            normalSurbroutine.index = normalSurbroutineMap;
            generateTBN = true;
        }
        else
        {
            glBindTexture(GL_TEXTURE_2D, 0);
            normalSurbroutine.index = normalSurbroutineValue;
            generateTBN = false;
        }
        
        if (state.material.invertNormalY)
            normalYSign = -1.0f;
        else
            normalYSign = 1.0f;
        
        // PBR
        glActiveTexture(GL_TEXTURE2);
        roughnessMetallicTexture = 2;
        roughnessMetallicFactor = Color4f(1.0f, mat.roughnessFactor, mat.metallicFactor, 0.0f);
        if (mat.roughnessMetallicTexture)
        {
            mat.roughnessMetallicTexture.bind();
            roughnessSubroutine.index = roughnessSubroutineMap;
            metallicSubroutine.index = metallicSubroutineMap;
        }
        else
        {
            glBindTexture(GL_TEXTURE_2D, 0);
            roughnessSubroutine.index = roughnessSubroutineValue;
            metallicSubroutine.index = metallicSubroutineValue;
        }
        
        subsurfaceFactor = mat.subsurfaceScattering;
        
        // Emission
        glActiveTexture(GL_TEXTURE3);
        emissionTexture = 3;
        emissionFactor = mat.emissionFactor;
        if (mat.emissionTexture)
        {
            mat.emissionTexture.bind();
            emissionSubroutine.index = emissionSubroutineColorTexture;
        }
        else
        {
            glBindTexture(GL_TEXTURE_2D, 0);
            emissionSubroutine.index = emissionSubroutineColorValue;
        }
        energy = mat.emissionEnergy;
        
        // Height and parallax
        int parallaxMethod = mat.parallaxMode;
        if (parallaxMethod > ParallaxOcclusionMapping)
            parallaxMethod = ParallaxOcclusionMapping;
        if (parallaxMethod < 0)
            parallaxMethod = 0;
        
        glActiveTexture(GL_TEXTURE4);
        heightTexture = 4;
        heightScalar = mat.heightFactor;
        if (mat.heightTexture)
        {
            mat.heightTexture.bind();
            heightSubroutine.index = heightSubroutineMap;
        }
        else
        {
            glBindTexture(GL_TEXTURE_2D, 0);
            heightSubroutine.index = heightSubroutineValue;
            parallaxMethod = ParallaxNone;
        }
        
        if (parallaxMethod == ParallaxSimple)
            parallaxSubroutine.index = parallaxSubroutineSimple;
        else if (parallaxMethod == ParallaxOcclusionMapping)
            parallaxSubroutine.index = parallaxSubroutineOcclusionMapping;
        else
            parallaxSubroutine.index = parallaxSubroutineNone;
        
        parallaxScale = mat.parallaxScale;
        parallaxBias = mat.parallaxBias;
        
        glActiveTexture(GL_TEXTURE0);

        super.bindParameters(state);
    }

    override void unbindParameters(GraphicsState* state)
    {
        super.unbindParameters(state);

        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE1);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE2);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE3);
        glBindTexture(GL_TEXTURE_2D, 0);
        
        glActiveTexture(GL_TEXTURE4);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE0);
    }
}
