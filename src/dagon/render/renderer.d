/*
Copyright (c) 2019-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * A high-level renderer abstraction for Dagon's rendering system.
 *
 * Description:
 * The `dagon.render.renderer` module defines the basic `Renderer` class,
 * which manages a render pipeline and serves as a base for creating
 * custom renderers.
 *
 * Copyright: Timur Gafarov 2019-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.render.renderer;

import dlib.core.memory;
import dlib.core.ownership;

import dagon.core.event;
import dagon.core.time;
import dagon.graphics.camera;
import dagon.render.view;
import dagon.render.pipeline;
import dagon.render.framebuffer;
import dagon.resource.scene;

/**
 * High-level renderer abstraction.
 */
class Renderer: Owner
{
    /// The main render view.
    RenderView view;

    /// The render pipeline.
    RenderPipeline pipeline;

    /// Output framebuffer.
    Framebuffer outputBuffer;

    /**
     * Sets the active camera for rendering.
     *
     * Params:
     *   camera = The camera to use.
     */
    void activeCamera(Camera camera)
    {
        view.camera = camera;
    }

    /**
     * Returns the currently active camera.
     *
     * Returns:
     *   The active camera.
     */
    Camera activeCamera()
    {
        return view.camera;
    }

    /**
     * Constructs a renderer with the given event manager and owner.
     *
     * Params:
     *   eventManager = The event manager for event processing.
     *   owner        = Owner object.
     */
    this(EventManager eventManager, Owner owner)
    {
        super(owner);
        view = New!RenderView(0, 0, eventManager.windowWidth, eventManager.windowHeight, this);
        pipeline = New!RenderPipeline(eventManager, this);
    }

    /**
     * Assigns a scene to the renderer.
     *
     * Params:
     *   scene = The scene to render.
     * Note:
     *   Override this method to implement custom scene assignment logic.
     */
    void scene(Scene scene)
    {
    }

    /**
     * Updates the renderer and its pipeline for the current frame.
     *
     * Params:
     *   t = Frame timing information.
     */
    void update(Time t)
    {
        pipeline.update(t);
    }

    /// Renders the current frame using the pipeline and output buffer.
    void render()
    {
        if (outputBuffer)
            outputBuffer.bind();

        pipeline.outputBuffer = outputBuffer;
        pipeline.render();

        if (outputBuffer)
            outputBuffer.unbind();
    }

    /**
     * Sets the viewport position and size for rendering.
     *
     * Params:
     *   x = Viewport X position (pixels).
     *   y = Viewport Y position (pixels).
     *   w = Viewport width (pixels).
     *   h = Viewport height (pixels).
     */
    void setViewport(uint x, uint y, uint w, uint h)
    {
        view.setPosition(x, y);
        view.resize(w, h);
    }
}
