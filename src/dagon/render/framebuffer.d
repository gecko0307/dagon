/*
Copyright (c) 2019-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Framebuffer abstraction for Dagon's rendering system.
 *
 * Description:
 * The `dagon.render.framebuffer` defines the `Framebuffer` class, which
 * encapsulates an OpenGL framebuffer object with configurable color and depth
 * attachments. The class supports multiple color formats, depth/stencil buffers,
 * resizing, binding/unbinding, and blitting color or depth buffers. This
 * abstraction simplifies offscreen rendering, post-processing, and advanced
 * rendering techniques.
 *
 * Copyright: Timur Gafarov 2019-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.render.framebuffer;

import std.stdio;
import dlib.core.memory;
import dlib.core.ownership;
import dlib.image.color;

import dagon.core.bindings;
import dagon.core.logger;

/**
 * Supported framebuffer color formats.
 */
enum FrameBufferFormat
{
    R8,
    R16F,
    R32F,
    
    RG8,
    RG16F,
    RG32F,
    
    RGB8,
    RGB16F,
    RGB32F,
    
    RGBA8,
    RGBA16F,
    RGBA32F
}

/**
 * Framebuffer abstraction for offscreen rendering.
 *
 * Description:
 * Manages an OpenGL framebuffer object with color
 * and optional depth/stencil attachments.
 */
class Framebuffer: Owner
{
    /// Framebuffer width in pixels.
    uint width;

    /// Framebuffer height in pixels.
    uint height;

    /// Color buffer format.
    FrameBufferFormat colorFormat;

    /// True if a depth/stencil buffer is attached.
    bool hasDepthBuffer;

    protected GLuint _colorTexture = 0;
    protected GLuint _depthTexture = 0;

    /// OpenGL framebuffer object.
    GLuint framebuffer;

    /**
     * Constructs an empty framebuffer.
     *
     * Params:
     *   owner = Owner object.
     */
    this(Owner owner)
    {
        super(owner);
    }

    /**
     * Constructs and initializes a framebuffer.
     *
     * Params:
     *   w      = Width in pixels.
     *   h      = Height in pixels.
     *   format = Color buffer format.
     *   depth  = Whether to attach a depth/stencil buffer.
     *   owner  = Owner object.
     */
    this(uint w, uint h, FrameBufferFormat format, bool depth, Owner owner)
    {
        super(owner);
        init(w, h, format, depth);
    }

    /**
     * Initializes or reinitializes the framebuffer.
     *
     * Params:
     *   w      = Width in pixels.
     *   h      = Height in pixels.
     *   format = Color buffer format.
     *   depth  = Whether to attach a depth/stencil buffer.
     */
    void init(uint w, uint h, FrameBufferFormat format, bool depth)
    {
        width = w;
        height = h;
        colorFormat = format;
        hasDepthBuffer = depth;
        createFramebuffer();
    }

    /// Destructor. Releases all OpenGL resources.
    ~this()
    {
        releaseFramebuffer();
    }

    /// Creates the OpenGL framebuffer and attachments.
    protected void createFramebuffer()
    {
        releaseFramebuffer();

        GLint intFormat;
        GLenum textureFormat;
        GLenum pixelType;

        switch (colorFormat)
        {
            // R
            case FrameBufferFormat.R8:      intFormat = GL_R8;      textureFormat = GL_RED;  pixelType = GL_UNSIGNED_BYTE; break;
            case FrameBufferFormat.R16F:    intFormat = GL_R16F;    textureFormat = GL_RED;  pixelType = GL_FLOAT; break;
            case FrameBufferFormat.R32F:    intFormat = GL_R32F;    textureFormat = GL_RED;  pixelType = GL_FLOAT; break;
            
            // RG
            case FrameBufferFormat.RG8:     intFormat = GL_RG8;     textureFormat = GL_RG;   pixelType = GL_UNSIGNED_BYTE; break;
            case FrameBufferFormat.RG16F:   intFormat = GL_RG16F;   textureFormat = GL_RG;   pixelType = GL_FLOAT; break;
            case FrameBufferFormat.RG32F:   intFormat = GL_RG32F;   textureFormat = GL_RG;   pixelType = GL_FLOAT; break;
            
            // RGB
            case FrameBufferFormat.RGB8:    intFormat = GL_RGB8;    textureFormat = GL_RGB;  pixelType = GL_UNSIGNED_BYTE; break;
            case FrameBufferFormat.RGB16F:  intFormat = GL_RGB16F;  textureFormat = GL_RGB;  pixelType = GL_FLOAT; break;
            case FrameBufferFormat.RGB32F:  intFormat = GL_RGB32F;  textureFormat = GL_RGB;  pixelType = GL_FLOAT; break;
            
            // RGBA
            case FrameBufferFormat.RGBA8:   intFormat = GL_RGBA8;   textureFormat = GL_RGBA; pixelType = GL_UNSIGNED_BYTE; break;
            case FrameBufferFormat.RGBA16F: intFormat = GL_RGBA16F; textureFormat = GL_RGBA; pixelType = GL_FLOAT; break;
            case FrameBufferFormat.RGBA32F: intFormat = GL_RGBA32F; textureFormat = GL_RGBA; pixelType = GL_FLOAT; break;
            default: break;
        }

        glActiveTexture(GL_TEXTURE0);

        glGenTextures(1, &_colorTexture);
        glBindTexture(GL_TEXTURE_2D, _colorTexture);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
        glTexImage2D(GL_TEXTURE_2D, 0, intFormat, width, height, 0, textureFormat, pixelType, null);
        glBindTexture(GL_TEXTURE_2D, 0);

        if (hasDepthBuffer)
        {
            glGenTextures(1, &_depthTexture);
            glBindTexture(GL_TEXTURE_2D, _depthTexture);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
            glTexImage2D(GL_TEXTURE_2D, 0, GL_DEPTH24_STENCIL8, width, height, 0, GL_DEPTH_STENCIL, GL_UNSIGNED_INT_24_8, null);
            glBindTexture(GL_TEXTURE_2D, 0);
        }

        glGenFramebuffers(1, &framebuffer);
        glBindFramebuffer(GL_FRAMEBUFFER, framebuffer);
        glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, _colorTexture, 0);
        if (hasDepthBuffer)
            glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_STENCIL_ATTACHMENT, GL_TEXTURE_2D, _depthTexture, 0);

        GLenum[1] drawBuffers = [GL_COLOR_ATTACHMENT0];
        glDrawBuffers(drawBuffers.length, drawBuffers.ptr);

        GLenum status = glCheckFramebufferStatus(GL_FRAMEBUFFER);
        if (status != GL_FRAMEBUFFER_COMPLETE)
        {
            logError("Framebuffer.createFramebuffer failed: framebuffer status = ", status);
            glBindFramebuffer(GL_FRAMEBUFFER, 0);
            glDeleteFramebuffers(1, &framebuffer);
            return;
        }

        glBindFramebuffer(GL_FRAMEBUFFER, 0);
    }

    /// Releases all OpenGL framebuffer and texture resources.
    void releaseFramebuffer()
    {
        if (glIsFramebuffer(framebuffer))
            glDeleteFramebuffers(1, &framebuffer);

        if (glIsTexture(_colorTexture))
            glDeleteTextures(1, &_colorTexture);

        if (glIsTexture(_depthTexture))
            glDeleteTextures(1, &_depthTexture);
    }

    /// Returns the OpenGL color texture handle.
    GLuint colorTexture()
    {
        return _colorTexture;
    }

    /// Returns the OpenGL depth texture handle.
    GLuint depthTexture()
    {
        return _depthTexture;
    }

    /// Binds the framebuffer for drawing.
    void bind()
    {
        glBindFramebuffer(GL_DRAW_FRAMEBUFFER, framebuffer);
    }

    /// Unbinds the framebuffer (restores default framebuffer).
    void unbind()
    {
        glBindFramebuffer(GL_DRAW_FRAMEBUFFER, 0);
    }

    /// Resizes the framebuffer and its attachments.
    void resize(uint w, uint h)
    {
        width = w;
        height = h;
        createFramebuffer();
    }

    /// Blits the color buffer to the default framebuffer.
    void blitColorBuffer()
    {
        glBindFramebuffer(GL_READ_FRAMEBUFFER, framebuffer);
        glBlitFramebuffer(0, 0, width, height, 0, 0, width, height, GL_COLOR_BUFFER_BIT, GL_NEAREST);
        glBindFramebuffer(GL_READ_FRAMEBUFFER, 0);
    }

    /// Blits the depth/stencil buffer to the default framebuffer.
    void blitDepthBuffer()
    {
        if (hasDepthBuffer)
        {
            glBindFramebuffer(GL_READ_FRAMEBUFFER, framebuffer);
            glBlitFramebuffer(0, 0, width, height, 0, 0, width, height, GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT, GL_NEAREST);
            glBindFramebuffer(GL_READ_FRAMEBUFFER, 0);
        }
    }
}
