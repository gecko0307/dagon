/*
Copyright (c) 2017-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Orbit/pan/zoom camera control component.
 *
 * Description:
 * The `dagon.ui.freeview` module defines the `FreeviewComponent` class,
 * which enables orbit-style camera movement using mouse input.
 * The component supports smooth translation, rotation, and zooming around
 * a target point, with configurable sensitivities and stiffness for each axis.
 * It also provides methods for setting and animating the camera's
 * target, rotation, and zoom, as well as converting screen coordinates
 * to world coordinates.
 *
 * Copyright: Timur Gafarov 2017-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.ui.freeview;

import std.math;

import dlib.math.vector;
import dlib.math.matrix;
import dlib.math.quaternion;
import dlib.math.transformation;
import dlib.math.utils;

import dagon.core.event;
import dagon.core.keycodes;
import dagon.core.time;
import dagon.graphics.entity;

/**
 * Free camera orbit/pan/zoom control component for entities.
 *
 * Description:
 * Enables orbiting, panning, and zooming around a target point
 * using mouse input. Supports smooth transitions, configurable
 * sensitivities, and conversion between screen and world coordinates.
 */
class FreeviewComponent: EntityComponent
{
    /// Previous mouse X position.
    int prevMouseX;

    /// Previous mouse Y position.
    int prevMouseY;

    /// Sensitivity for mouse panning.
    float mouseTranslationSensibility;

    /// Sensitivity for mouse rotation.
    float mouseRotationSensibility;

    /// Sensitivity for mouse zoom.
    float mouseZoomSensibility;
    
    /// Camera target point.
    Vector3f target;

    /// Smoothed camera target point.
    Vector3f smoothTarget;
    
    /// Distance to target.
    float distanceToTagret;

    /// Smoothed distance to target.
    float smoothDistanceToTagret;
    
    /// Camera rotation (pitch, yaw, roll)
    Vector3f rotation;

    /// Smoothed camera rotation.
    Vector3f smoothRotation;
    
    /// Smoothing factor for translation.
    float translationStiffness;

    /// Smoothing factor for rotation.
    float rotationStiffness;

    /// Smoothing factor for zoom.
    float zoomStiffness;
    
    /// Current orientation quaternion.
    Quaternionf orientation;

    /// Camera transformation.
    Matrix4x4f transform;

    /// Inverse camera transformation.
    Matrix4x4f invTransform;
    
    /// Whether the component is active.
    bool active;
    
    /// Enables mouse panning.
    bool enableMouseTranslation;

    /// Enables mouse rotation.
    bool enableMouseRotation;

    /// Enables mouse zoom.
    bool enableMouseZoom;
    
    /**
     * Constructs a freeview component for the given entity.
     *
     * Params:
     *   eventManager = Event manager.
     *   hostEntity   = Entity to attach the component to.
     */
    this(EventManager eventManager, Entity hostEntity)
    {
        super(eventManager, hostEntity);
        reset();
    }
    
    /// Resets the camera to default parameters.
    void reset()
    {
        prevMouseX = eventManager.mouseX;
        prevMouseY = eventManager.mouseY;
        
        mouseTranslationSensibility = 0.1f;
        mouseRotationSensibility = 1.0f;
        mouseZoomSensibility = 0.2f;
        
        target = Vector3f(0.0f, 0.0f, 0.0f);
        smoothTarget = Vector3f(0.0f, 0.0f, 0.0f);
        
        distanceToTagret = 20.0f;
        smoothDistanceToTagret = 20.0f;
        
        rotation = Vector3f(45.0f, 45.0f, 0.0f);
        smoothRotation = rotation;
        
        translationStiffness = 1.0f;
        rotationStiffness = 1.0f;
        zoomStiffness = 1.0f;
        
        orientation = Quaternionf.identity;
        transform = Matrix4x4f.identity;
        invTransform = Matrix4x4f.identity;
        
        active = true;
        
        enableMouseTranslation = true;
        enableMouseRotation = true;
        enableMouseZoom = true;
        
        transformEntity();
    }
    
    /// Updates the camera each frame, processing input and smoothing.
    override void update(Time time)
    {
        processEvents();
        
        if (active)
        {
            if (eventManager.mouseButtonPressed[MB_RIGHT] && enableMouseTranslation)
            {
                float shiftx = (eventManager.mouseX - prevMouseX) * mouseTranslationSensibility;
                float shifty = -(eventManager.mouseY - prevMouseY) * mouseTranslationSensibility;
                Vector3f trans = up * shifty + right * shiftx;
                target += trans;
            }
            else if (eventManager.mouseButtonPressed[MB_LEFT] && eventManager.keyPressed[KEY_LCTRL] && enableMouseZoom)
            {
                float shiftx = (eventManager.mouseX - prevMouseX) * mouseZoomSensibility;
                float shifty = (eventManager.mouseY - prevMouseY) * mouseZoomSensibility;
                zoom(shiftx + shifty);
            }
            else if (eventManager.mouseButtonPressed[MB_LEFT] && enableMouseRotation)
            {
                float turn = (eventManager.mouseX - prevMouseX) * mouseRotationSensibility;
                float pitch = (eventManager.mouseY - prevMouseY) * mouseRotationSensibility;
                
                rotation.x += pitch;
                rotation.y += turn;
            }
            
            prevMouseX = eventManager.mouseX;
            prevMouseY = eventManager.mouseY;
        }
        
        smoothTarget += (target - smoothTarget) * translationStiffness;
        smoothDistanceToTagret += (distanceToTagret - smoothDistanceToTagret) * zoomStiffness;
        smoothRotation += (rotation - smoothRotation) * rotationStiffness;
        
        transformEntity();
    }
    
    /// Applies the current rotation, translation, and zoom to the entity.
    void transformEntity()
    {
        Quaternionf qPitch = rotationQuaternion(Vector3f(1.0f, 0.0f, 0.0f), degtorad(smoothRotation.x));
        Quaternionf qTurn = rotationQuaternion(Vector3f(0.0f, 1.0f, 0.0f), degtorad(smoothRotation.y));
        Quaternionf qRoll = rotationQuaternion(Vector3f(0.0f, 0.0f, 1.0f), degtorad(smoothRotation.z));
        
        orientation = qPitch * qTurn * qRoll;
        Matrix4x4f orientationMatrix = orientation.toMatrix4x4();
        invTransform =
            translationMatrix(Vector3f(0.0f, 0.0f, -smoothDistanceToTagret)) *
            orientationMatrix *
            translationMatrix(smoothTarget);
        
        transform = invTransform.inverse;
        
        entity.prevTransformation = entity.transformation;
        entity.transformation = transform;
        entity.invTransformation = invTransform;
        
        entity.absoluteTransformation = entity.transformation;
        entity.invAbsoluteTransformation = entity.invTransformation;
        entity.prevAbsoluteTransformation = entity.prevTransformation;
    }
    
    /// Sets the camera rotation (pitch, yaw, roll) instantly.
    void setRotation(float p, float t, float r)
    {
        rotation = Vector3f(p, t, r);
        smoothRotation = rotation;
    }
    
    /// Sets the camera to a 2:1 isometric rotation.
    void setIsometricRotation()
    {
        setRotation(30.0f, 45.0f, 0.0f);
    }
    
    /// Sets the camera rotation smoothly (will interpolate).
    void setRotationSmooth(float p, float t, float r)
    {
        rotation = Vector3f(p, t, r);
    }
    
    /// Adds to the current rotation.
    void rotate(float p, float t, float r)
    {
        rotation += Vector3f(p, t, r);
    }
    
    /// Sets the camera's target point instantly.
    void setTarget(Vector3f pos)
    {
        target = pos;
        smoothTarget = target;
    }
    
    /// Sets the camera's target point smoothly (will interpolate).
    void setTargetSmooth(Vector3f pos)
    {
        target = pos;
    }
    
    /// Sets the camera's target to an entity's absolute position instantly.
    void setTarget(Entity e)
    {
        target = e.positionAbsolute;
        smoothTarget = target;
    }
    
    /// Sets the camera's target to an entity's absolute position smoothly.
    void setTargetSmooth(Entity e)
    {
        target = e.positionAbsolute;
    }

    /// Translates the camera's target by the given vector.
    void translateTarget(Vector3f pos)
    {
        target += pos;
    }
    
    /// Sets the camera's zoom (distance to target) instantly.
    void setZoom(float z)
    {
        distanceToTagret = z;
        smoothDistanceToTagret = z;
    }

    /// Sets the camera's zoom smoothly (will interpolate).
    void setZoomSmooth(float z)
    {
        distanceToTagret = z;
    }

    /// Adjusts the camera's zoom by the given amount.
    void zoom(float z)
    {
        distanceToTagret -= z;
    }

    /// Returns the camera's current position in world space.
    Vector3f position()
    {
        return transform.translation();
    }

    /// Returns the camera's forward direction.
    Vector3f direction()
    {
        return transform.forward();
    }

    /// Returns the camera's right direction.
    Vector3f right()
    {
        return transform.right();
    }

    /// Returns the camera's up direction.
    Vector3f up()
    {
        return transform.up();
    }

    /**
     * Converts screen coordinates to world coordinates at ground plane (y = 0).
     *
     * Params:
     *   scrx       = Screen-space X coordinate.
     *   scry       = Screen-space Y coordinate.
     *   scrw       = Screen width.
     *   scrh       = Screen height.
     *   yfov       = Vertical field of view (degrees).
     *   worldx     = Output world-space x coordinate.
     *   worldy     = Output world-space y coordinate.
     *   snap       = If `true`, snap to integer coordinates.
     */
    void screenToWorld(
        int scrx, int scry,
        int scrw, int scrh,
        float yfov,
        ref float worldx,
        ref float worldy,
        bool snap)
    {
        Vector3f camPos = position();
        Vector3f camDir = direction();

        float aspect = cast(float)scrw / cast(float)scrh;

        float xfov = fovXfromY(yfov, aspect);

        float tfov1 = tan(yfov*PI/360.0f);
        float tfov2 = tan(xfov*PI/360.0f);

        Vector3f camUp = up() * tfov1;
        Vector3f camRight = right() * tfov2;

        float width  = 1.0f - 2.0f * cast(float)(scrx) / cast(float)(scrw);
        float height = 1.0f - 2.0f * cast(float)(scry) / cast(float)(scrh);

        float mx = camDir.x + camUp.x * height + camRight.x * width;
        float my = camDir.y + camUp.y * height + camRight.y * width;
        float mz = camDir.z + camUp.z * height + camRight.z * width;

        worldx = snap? floor(camPos.x - mx * camPos.y / my) : (camPos.x - mx * camPos.y / my);
        worldy = snap? floor(camPos.z - mz * camPos.y / my) : (camPos.z - mz * camPos.y / my);
    }

    /**
     * Converts screen coordinates to world coordinates at ground plane (y = 0)
     * and returns them as a `Vector2f`.
     *
     * Params:
     *   scrx       = Screen-space X coordinate.
     *   scry       = Screen-space Y coordinate.
     *   scrw       = Screen width.
     *   scrh       = Screen height.
     *   yfov       = Vertical field of view (degrees).
     *   snap       = If `true`, snap to integer coordinates.
     *
     * Returns:
     *   A `Vector2f` containing the world-space x and y coordinates.
     */
    Vector2f screenToWorld(
        int scrx, int scry,
        int scrw, int scrh,
        float yfov,
        bool snap) {
        
        float worldx = 0.0f;
        float worldy = 0.0f;
        screenToWorld(scrx, scry, scrw, scrh, yfov, worldx, worldy, snap);
        return Vector2f(worldx, worldy);
    }
    
    /// Handles mouse button down events for camera control.
    override void onMouseButtonDown(int button)
    {
        if (!active)
            return;
        
        if (button == MB_LEFT)
        {
            prevMouseX = eventManager.mouseX;
            prevMouseY = eventManager.mouseY;
        }
    }
    
    /// Handles mouse wheel events for zooming.
    override void onMouseWheel(int x, int y)
    {
        if (!active || !enableMouseZoom)
            return;
        
        zoom(cast(float)y * mouseZoomSensibility);
    }
}
