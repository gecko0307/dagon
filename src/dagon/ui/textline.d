/*
Copyright (c) 2017-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * A simple drawable text line for Dagon's UI system.
 *
 * Description:
 * The `dagon.ui.textline` module defines the `TextLine` class, which represents
 * a single line of text rendered with a specified font, color, and scaling.
 *
 * Copyright: Timur Gafarov 2017-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.ui.textline;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.math.vector;
import dlib.image.color;

import dagon.core.bindings;
import dagon.graphics.drawable;
import dagon.graphics.font;

/**
 * Represents a single line of text for UI rendering.
 */
class TextLine: Owner, Drawable
{
    /// The font used to render the text.
    Font font;

    /// Scaling factor for the text.
    float scaling;

    /// The color of the text (RGBA).
    Color4f color;

    /// The string to display.
    string text;

    /// The calculated width of the rendered text.
    float width;

    /// The height of the font
    float height;

    /**
     * Constructs a text line with the given font and text.
     *
     * Params:
     *   font  = The font to use.
     *   text  = The text string.
     *   owner = Owner object.
     */
    this(Font font, string text, Owner owner)
    {
        super(owner);
        this.font = font;
        this.text = text;
        this.scaling = 1.0f;
        this.width = font.width(text);
        this.height = font.height;
        this.color = Color4f(1, 1, 1, 1);
    }

    /**
     * Renders the text line using the specified graphics pipeline state.
     *
     * Params:
     *   state = Pointer to the graphics pipeline state.
     */
    override void render(GraphicsState* state)
    {
        if (!font.valid)
            return;
        
        glDisable(GL_DEPTH_TEST);
        glDisable(GL_CULL_FACE);
        glEnable(GL_BLEND);
        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
        font.render(state, color, text);
        glDisable(GL_BLEND);
        glEnable(GL_CULL_FACE);
        glEnable(GL_DEPTH_TEST);
    }

    /**
     * Sets a new font and updates the text metrics.
     *
     * Params:
     *   font = The new font to use.
     */
    void setFont(Font font)
    {
        this.font = font;
        this.width = font.width(text);
        this.height = font.height;
    }

    /**
     * Sets a new text string and updates the text metrics.
     *
     * Params:
     *   t = The new text string.
     */
    void setText(string t)
    {
        this.text = t;
        this.width = font.width(t);
    }
}
