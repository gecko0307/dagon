/*
Copyright (c) 2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dagon.ui.widgets.textview;

import std.stdio;
import std.ascii;
import std.math;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.math.vector;
import dlib.math.transformation;
import dlib.math.interpolation;
import dlib.math.utils;
import dlib.image.color;
import dlib.text.utf8;

import dagon.core.bindings;
import dagon.core.logger;
import dagon.core.time;
import dagon.core.event;
import dagon.core.keycodes;
import dagon.core.application;
import dagon.graphics.drawable;
import dagon.graphics.entity;
import dagon.graphics.shapes;
import dagon.graphics.material;
import dagon.graphics.shader;
import dagon.graphics.state;
import dagon.graphics.font;
import dagon.resource.scene;
import dagon.render.hud;
import dagon.ui.widget;

class TextView: UIWidget
{
  public:
    float scrollSpeed = 15.0f;
    Color4f textColor = Color4f(0.0f, 0.0f, 0.0f, 1.0f);
    Color4f scrollbarColor = Color4f(1.0f, 1.0f, 1.0f, 0.75f);
    int paddingLeft = 10;
    int paddingRight = 10;
    int paddingTop = 10;
    int paddingBottom = 10;
    TextViewVisual visual;
    
   protected:
    string _text = "";
    
    Entity textViewEntity;
    Entity scrollbar;
    
    bool scrollBarActive = false;
    bool scrollbarCaptureMouse = false;
    int prevMouseY;
    float minScrollY = 0.0f;
    float maxScrollY = 0.0f;
    float maxScrollbarY = 0.0f;
    
   public:
    this(UIManager ui, UIWidget parent = null)
    {
        super(ui, parent);
        
        textViewEntity = ui.addElement(entity);
        visual = New!TextViewVisual(ui.fontManager.sans, this);
        visual.text = _text;
        visual.color = textColor;
        textViewEntity.drawable = visual;
        
        scrollbar = ui.addElement(entity);
        scrollbar.scaling = Vector3f(10.0f, 50.0f, 1.0f);
        scrollbar.drawable = ui.rectangle;
        scrollbar.material = ui.addMaterial();
        
        width = 320;
        height = 240;
        x = 0;
        y = 0;
    }
    
    void text(string s) @property
    {
        _text = s;
        visual.text = _text;
    }
    
    void font(Font f) @property
    {
        visual.font = f;
    }
    
    Font font() @property
    {
        return visual.font;
    }
    
    Vector2f glyphPosition(size_t index)
    {
        return visual.font.glyphPosition(
            _text, index,
            visual.width - visual.font.height * 2 - paddingRight,
            visual.font.height * visual.lineHeight);
    }
    
    override void onMouseButtonDown(int button)
    {
        if (button == MB_LEFT)
        {
            if (mouseOver())
            {
                focus();
            }
        }
        
        if (button == MB_LEFT && scrollBarActive)
        {
            if (ui.mouseOver(scrollbar))
            {
                scrollbarCaptureMouse = true;
                prevMouseY = eventManager.mouseY;
            }
        }
    }
    
    override void onMouseButtonUp(int button)
    {
        if (button == MB_LEFT)
        {
            scrollbarCaptureMouse = false;
        }
    }
    
    override void onMouseWheel(int x, int y)
    {
        if (focused)
        {
            scrollbar.position.y -= y * scrollSpeed;
        }
    }
    
    override void update(Time t)
    {
        super.update(t);
        
        scrollbar.material.baseColorFactor = scrollbarColor;
        
        visual.color = textColor;
        visual.paddingLeft = paddingLeft;
        visual.paddingRight = paddingRight;
        visual.width = width;
        visual.height = height - paddingTop - paddingBottom;
        textViewEntity.position.x = 0.0f;
        textViewEntity.position.y = paddingTop;
        
        float scrollbarHeight = height;
        if (visual.textHeight > 0.0f)
        {
            scrollbarHeight = height * (visual.height / visual.textHeight);
        }
        
        scrollbar.scaling.y = scrollbarHeight;
        
        maxScrollbarY = max2(0.0f, height - scrollbarHeight);
        
        if (visual.height < visual.textHeight)
        {
            maxScrollY = visual.textHeight - visual.height;
            scrollBarActive = true;
            scrollbar.visible = entity.visible;
        }
        else
        {
            maxScrollY = 0.0f;
            scrollBarActive = false;
            scrollbar.visible = false;
        }
        
        if (entity.visible && mouseOver())
        {
            captureMouse = true;
            hover = true;
        }
        else
        {
            captureMouse = scrollbarCaptureMouse;
            hover = false;
        }
        
        if (scrollBarActive)
        {
            if (scrollbarCaptureMouse)
            {
                float dragY = eventManager.mouseY - prevMouseY;
                prevMouseY = eventManager.mouseY;
                scrollbar.position.y += dragY;
            }
        }
        
        scrollbar.position.x = width - scrollbar.scaling.x;
        
        if (visual.height < visual.textHeight)
        {
            scrollbar.position.y = clamp(scrollbar.position.y, 0.0f, maxScrollbarY);
            visual.scrollY = cast(int)lerp(minScrollY, maxScrollY, scrollbar.position.y / maxScrollbarY);
        }
        else
        {
            scrollbar.position.y = 0.0f;
            visual.scrollY = 0;
        }
        
        /*
        if (hover && !ui.mouseOver(scrollbar))
            cursor = Cursor.IBeam;
        else
            cursor = Cursor.Default;
        */
    }
}

class TextViewVisual: Owner, Drawable
{
    string text = "";
    Font font;
    Color4f color;
    float lineHeight = 1.4f;
    int width = 320;
    int height = 100;
    int paddingLeft = 0;
    int paddingRight = 0;
    int scrollY = 0;
    float textHeight = 0.0f;
    
    this(Font font, Owner owner)
    {
        super(owner);
        color = Color4f(1.0f, 1.0f, 1.0f, 1.0f);
        this.font = font;
    }
    
    override void render(GraphicsState* state)
    {
        if (font is null)
            return;
        
        if (!font.valid)
            return;
        
        if (text.length == 0)
            return;
        
        glEnable(GL_BLEND);
        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
        
        Vector3f pos = state.modelViewMatrix.translation;
        int x = cast(int)pos.x;
        int y = cast(int)(state.resolution.y - pos.y - height);
        
        glEnable(GL_SCISSOR_TEST);
        glScissor(x, y, width, height);
        
        font.beginRender(state, color);

        float xShift = 0.0f;
        float yShift = 0.0f;
        UTF8Decoder dec = UTF8Decoder(text);
        int ch;
        do
        {
            float gx = cast(float)paddingLeft + xShift;
            float gy = font.height + yShift - cast(float)scrollY;
            
            ch = dec.decodeNext();
            if (ch == 0 || ch == UTF8_END || ch == UTF8_ERROR) break;
            dchar code = ch;
            if (code == '\n')
            {
                xShift = 0.0f;
                yShift += font.height * lineHeight;
            }
            else
            {
                if (code.isASCII)
                {
                    if (code.isPrintable)
                        xShift += font.renderGlyph(code, gx, gy);
                }
                else
                {
                    xShift += font.renderGlyph(code, gx, gy);
                }
                
                if (xShift > cast(float)width - font.height * 2 - paddingRight)
                {
                    xShift = 0.0f;
                    yShift += ceil(font.height * lineHeight);
                }
            }
        }
        while(ch != UTF8_END && ch != UTF8_ERROR);

        font.endRender();
        
        textHeight = yShift;
        
        glDisable(GL_SCISSOR_TEST);
    }
}
