/*
Copyright (c) 2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dagon.ui.widget;

import std.algorithm: canFind;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.container.array;
import dlib.math.vector;
import dlib.image.color;

import dagon.core.event;
import dagon.core.time;
import dagon.core.logger;
import dagon.core.application;
import dagon.graphics.updateable;
import dagon.graphics.shapes;
import dagon.graphics.entity;
import dagon.graphics.material;
import dagon.graphics.font;
import dagon.render.hud;
import dagon.resource.scene;

class UIManager: EventListener
{
   public:
    Scene scene;
    ShapeQuad rectangle;
    HUDShader shader;
    Array!UIWidget widgets;
    bool captureMouse = false;
    
  protected:
    Cursor currentCursor = Cursor.Default;
    
   public:
    this(Scene scene, Owner owner)
    {
        super(scene.eventManager, owner);
        this.scene = scene;
        rectangle = New!ShapeQuad(this);
        shader = New!HUDShader(this);
    }
    
    ~this()
    {
        widgets.free();
    }
    
    void registerWidget(UIWidget widget)
    {
        if (!widgets.data.canFind(widget))
            widgets.append(widget);
    }
    
    Material addMaterial()
    {
        auto mat = scene.addMaterial();
        mat.useCulling = false;
        mat.depthWrite = false;
        mat.blendMode = Transparent;
        mat.shader = shader;
        return mat;
    }
    
    Entity addElement(Entity parent = null)
    {
        return scene.addEntityHUD(parent);
    }
    
    FontManager fontManager()
    {
        return scene.application.fontManager;
    }
    
    bool mouseInRect(float x, float y, float w, float h)
    {
        return eventManager.mouseX >= x &&
               eventManager.mouseX < (x + w) &&
               eventManager.mouseY >= y &&
               eventManager.mouseY < (y + h);
    }
    
    bool mouseOver(Entity e)
    {
        float x = e.positionAbsolute.x;
        float y = e.positionAbsolute.y;
        float w = e.scaling.x;
        float h = e.scaling.y;
        return mouseInRect(x, y, w, h);
    }
    
    bool mouseOverRegion(Entity e, float rx, float ry, float rw, float rh)
    {
        float x = e.positionAbsolute.x + rx;
        float y = e.positionAbsolute.y + ry;
        return mouseInRect(x, y, rw, rh);
    }
    
    void update(Time t)
    {
        processEvents();
        captureMouse = false;
        bool cursorChanged = false;
        Cursor newCursor = Cursor.Default;
        foreach(widget; widgets)
        {
            widget.update(t);
            captureMouse = captureMouse || widget.captureMouse;
            if (!cursorChanged && widget.cursor != Cursor.Default)
            {
                newCursor = widget.cursor;
                cursorChanged = true;
            }
        }
        
        if (newCursor != currentCursor)
        {
            scene.application.setCursor(newCursor);
            currentCursor = newCursor;
        }
    }
}

class UIWidget: EventListener, Updateable
{
    UIManager ui;
    UIWidget parent;
    Entity entity;
    Entity background;
    Font font;
    int width = 100;
    int height = 100;
    bool fitToParent = false;
    Color4f color = Color4f(1.0f, 1.0f, 1.0f, 1.0f);
    Color4f backgroundColor = Color4f(0.0f, 0.0f, 0.0f, 0.0f);
    bool captureMouse = false;
    bool hover = false;
    Cursor cursor = Cursor.Default;
    
    this(UIManager ui, UIWidget parent = null)
    {
        super(ui.eventManager, ui);
        ui.registerWidget(this);
        this.ui = ui;
        
        this.parent = parent;
        
        if (parent)
            entity = ui.addElement(parent.entity);
        else
            entity = ui.addElement();
        
        background = ui.addElement(entity);
        background.drawable = ui.rectangle;
        background.material = ui.addMaterial();
        background.material.baseColorFactor = backgroundColor;
        
        font = ui.fontManager.sans;
    }
    
    void hide()
    {
        entity.hide();
    }
    
    void show()
    {
        entity.show();
    }
    
    bool visible()
    {
        return entity.visible;
    }
    
    void x(int px) @property
    {
        entity.position.x = px;
    }
    
    int x() @property
    {
        return cast(int)entity.position.x;
    }
    
    void y(int py) @property
    {
        entity.position.y = py;
    }
    
    int y() @property
    {
        return cast(int)entity.position.y;
    }
    
    bool mouseOver()
    {
        return ui.mouseInRect(
            entity.positionAbsolute.x,
            entity.positionAbsolute.y,
            width,
            height);
    }
    
    void update(Time t)
    {
        processEvents();
        if (fitToParent && parent)
        {
            width = parent.width;
            height = parent.height;
        }
        background.scaling = Vector3f(width, height, 1.0f);
        background.material.baseColorFactor = backgroundColor;
    }
}
