/*
Copyright (c) 2014-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Convex collision shape.
 *
 * Description:
 * The `dagon.collision.shape` module provides the `CollisionShape` that encapsulates convex geometry
 * and transformation data, and provides methods for bounding volumes and support point calculations.
 * `CollisionShape` is a proxy for the underlying geometry, applying transformations as needed.
 *
 * Copyright: Timur Gafarov 2014-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.collision.shape;

import dlib.core.ownership;
import dlib.core.memory;
import dlib.math.vector;
import dlib.math.matrix;
import dlib.math.transformation;
import dlib.geometry.aabb;
import dlib.geometry.sphere;

import dagon.collision.geometry;

/**
 * Represents a collision shape with geometry and transformation.
 * This class provides access to the shape's position, bounding volumes,
 * and support point calculations for collision detection algorithms.
 */
class CollisionShape: Owner
{
    /// The geometry object representing the shape.
    Geometry geometry;
    
    /// The transformation matrix applied to the shape.
    Matrix4x4f transformation;

    /**
     * Constructor. Creates a new `CollisionShape` with the specified
     * geometry and optional owner.
     *
     * Params:
     *   g     = The geometry to use for the shape.
     *   owner = Owner object.
     */
    this(Geometry g, Owner owner = null)
    {
        super(owner);
        geometry = g;
        transformation = Matrix4x4f.identity;
    }

    /// Returns position of the shape in world space.
    @property Vector3f position()
    {
        return transformation.translation;
    }

    /// Returns the axis-aligned bounding box (AABB) of the shape in world space.
    @property AABB boundingBox()
    {
        return geometry.boundingBox(
            transformation.translation);
    }

    /// Returns the bounding sphere of the shape in world space.
    @property Sphere boundingSphere()
    {
        AABB aabb = geometry.boundingBox(
            transformation.translation);
        return Sphere(aabb.center, aabb.size.length);
    }

    /**
     * Computes the support point of the shape in a given direction in world space.
     * This can be used used in collision detection algorithms such as GJK.
     *
     * Params:
     *   dir = The direction vector in which to find the support point.
     */
    Vector3f supportPoint(Vector3f dir)
    {
        Vector3f result;
        Matrix4x4f* m = &transformation;

        result.x = ((dir.x * m.a11) + (dir.y * m.a21)) + (dir.z * m.a31);
        result.y = ((dir.x * m.a12) + (dir.y * m.a22)) + (dir.z * m.a32);
        result.z = ((dir.x * m.a13) + (dir.y * m.a23)) + (dir.z * m.a33);

        result = geometry.supportPoint(result);

        float x = ((result.x * m.a11) + (result.y * m.a12)) + (result.z * m.a13);
        float y = ((result.x * m.a21) + (result.y * m.a22)) + (result.z * m.a23);
        float z = ((result.x * m.a31) + (result.y * m.a32)) + (result.z * m.a33);

        result.x = m.a14 + x;
        result.y = m.a24 + y;
        result.z = m.a34 + z;

        return result;
    }
}
