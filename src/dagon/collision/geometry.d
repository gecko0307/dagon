/*
Copyright (c) 2013-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Convex geometry.
 *
 * Description:
 * The `dagon.collision.geometry` module provides abstract and concrete classes
 * for various convex geometric shapes used in collision detection.
 * Includes support for spheres, boxes, cylinders, cones, ellipsoids, capsules, and triangles.
 *
 * Copyright: Timur Gafarov 2013-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.collision.geometry;

import std.math;
import std.algorithm;

import dlib.core.ownership;
import dlib.core.memory;
import dlib.math.vector;
import dlib.math.matrix;
import dlib.math.transformation;
import dlib.math.utils;
import dlib.geometry.aabb;

/**
 * Enumeration of supported geometry types.
 */
enum GeomType
{
    Undefined,
    Sphere,
    Box,
    Cylinder,
    Cone,
    Ellipsoid,
    Capsule,
    Triangle,
    UserDefined
}

/**
 * Abstract base class for convex geometry.
 * Provides interface for support point and bounding box calculations.
 */
abstract class Geometry: Owner
{
    /// The type of geometry.
    GeomType type = GeomType.Undefined;

    /**
     * Constructor.
     * Params:
     *   owner = Owner object.
    */
    this(Owner owner = null)
    {
        super(owner);
    }

    /// Returns the support point in the given direction.
    Vector3f supportPoint(Vector3f dir)
    {
        return Vector3f(0.0f, 0.0f, 0.0f);
    }

    /// Returns the axis-aligned bounding box (AABB) for the geometry at the given position.
    AABB boundingBox(Vector3f position)
    {
        return AABB(position, Vector3f(1.0f, 1.0f, 1.0f));
    }
}

/// Sphere geometry.
class GeomSphere: Geometry
{
    /// Radius of the sphere.
    float radius;

    /**
     * Constructor.
     *
     * Params:
     *   radius = Radius of the sphere.
     *   owner  = Owner object.
     */
    this(float radius, Owner owner = null)
    {
        super(owner);
        type = GeomType.Sphere;
        this.radius = radius;
    }

    /// Returns the support point in the given direction.
    override Vector3f supportPoint(Vector3f dir)
    {
        return dir.normalized * radius;
    }

    /// Returns the bounding box for the sphere.
    override AABB boundingBox(Vector3f position)
    {
        return AABB(position, Vector3f(radius, radius, radius));
    }
}

/// Box geometry.
class GeomBox: Geometry
{
    /// Half-size (extents) of the box.
    Vector3f halfSize;

    /// Bounding sphere radius.
    float boundingSphereRadius;

    /**
     * Constructor.
     *
     * Params:
     *   halfSize = Half-size vector of the box.
     *   owner    = Owner object.
     */
    this(Vector3f halfSize, Owner owner = null)
    {
        super(owner);
        type = GeomType.Box;
        this.halfSize = halfSize;
        boundingSphereRadius = halfSize.length;
    }

    /// Returns the support point in the given direction.
    override Vector3f supportPoint(Vector3f dir)
    {
        Vector3f result;
        result.x = sign(dir.x) * halfSize.x;
        result.y = sign(dir.y) * halfSize.y;
        result.z = sign(dir.z) * halfSize.z;
        return result;
    }

    /// Returns the bounding box for the box.
    override AABB boundingBox(Vector3f position)
    {
        return AABB(position, Vector3f(
            boundingSphereRadius,
            boundingSphereRadius,
            boundingSphereRadius));
    }
}

/// Cylinder geometry.
class GeomCylinder: Geometry
{
    /// Height of the cylinder.
    float height;

    /// Radius of the cylinder.
    float radius;

    /**
     * Constructor.
     *
     * Params:
     *   height = Height of the cylinder.
     *   radius = Radius of the cylinder.
     *   owner  = Owner object.
     */
    this(float height, float radius, Owner owner = null)
    {
        super(owner);
        type = GeomType.Cylinder;
        this.height = height;
        this.radius = radius;
    }

    /// Returns the support point in the given direction.
    override Vector3f supportPoint(Vector3f dir)
    {
        Vector3f result;
        float sigma = sqrt((dir.x * dir.x + dir.z * dir.z));

        if (sigma > 0.0f)
        {
            result.x = dir.x / sigma * radius;
            result.y = sign(dir.y) * height * 0.5f;
            result.z = dir.z / sigma * radius;
        }
        else
        {
            result.x = 0.0f;
            result.y = sign(dir.y) * height * 0.5f;
            result.z = 0.0f;
        }

        return result;
    }

    /// Returns the bounding box for the cylinder.
    override AABB boundingBox(Vector3f position)
    {
        float rsum = radius + radius;
        float d = sqrt(rsum * rsum + height * height) * 0.5f;
        return AABB(position, Vector3f(d, d, d));
    }
}

/// Cone geometry.
class GeomCone: Geometry
{
    /// Radius of the cone base.
    float radius;

    /// Height of the cone.
    float height;

    /**
     * Constructor.
     *
     * Params:
     *   height = Height of the cone.
     *   radius = Radius of the cone.
     *   owner  = Owner object.
     */
    this(float height, float r, Owner owner = null)
    {
        super(owner);
        type = GeomType.Cone;
        this.height = height;
        this.radius = radius;
    }

    /// Returns the support point in the given direction.
    override Vector3f supportPoint(Vector3f dir)
    {
        float zdist = dir[0] * dir[0] + dir[1] * dir[1];
        float len = zdist + dir[2] * dir[2];
        zdist = sqrt(zdist);
        len = sqrt(len);
        float half_h = height * 0.5;

        float sin_a = radius / sqrt(radius * radius + 4.0f * half_h * half_h);

        if (dir[2] > len * sin_a)
            return Vector3f(0.0f, 0.0f, half_h);
        else if (zdist > 0.0f)
        {
            float rad = radius / zdist;
            return Vector3f(rad * dir[0], rad * dir[1], -half_h);
        }
        else
            return Vector3f(0.0f, 0.0f, -half_h);
    }

    /// Returns the bounding box for the cone.
    override AABB boundingBox(Vector3f position)
    {
        float rsum = radius + radius;
        float d = sqrt(rsum * rsum + height * height) * 0.5f;
        return AABB(position, Vector3f(d, d, d));
    }
}

/// Ellipsoid geometry.
class GeomEllipsoid: Geometry
{
    /// Radii of the ellipsoid.
    Vector3f radii;

    /**
     * Constructor.
     *
     * Params:
     *   radii = Radii vector of the ellipsoid.
     *   owner = Owner object.
     */
    this(Vector3f radii, Owner owner = null)
    {
        super(owner);
        type = GeomType.Ellipsoid;
        this.radii = radii;
    }

    /// Returns the support point in the given direction.
    override Vector3f supportPoint(Vector3f dir)
    {
        return dir.normalized * radii;
    }

    /// Returns the bounding box for the ellipsoid.
    override AABB boundingBox(Vector3f position)
    {
        return AABB(position, radii);
    }
}

/// Capsule geometry.
class GeomCapsule: Geometry
{
    /// Radius of the capsule.
    float radius;

    /// Base position.
    float base;

    /// Cap position.
    float cap;

    /**
     * Constructor.
     *
     * Params:
     *   base   = Base position along the capsule axis.
     *   cap    = Cap position along the capsule axis.
     *   radius = Radius of the capsule.
     *   owner  = Owner object.
     */
    this(float base, float cap, float radius, Owner owner = null)
    {
        super(owner);
        type = GeomType.Capsule;
        this.base = base;
        this.cap = cap;
        this.radius = radius;
    }
    
    /// Returns the support point in the given direction.
    override Vector3f supportPoint(Vector3f dir)
    {
        dir = dir.normalized;
        if (dir.y > 0.0f)
        {
            return Vector3f(0.0f, cap, 0.0f) + dir * radius;
        }
        else
        {
            return Vector3f(0.0f, base, 0.0f) + dir * radius;
        }
    }

    /// Returns the bounding box for the capsule.
    override AABB boundingBox(Vector3f position)
    {
        return AABB(position, Vector3f(radius, max(base, cap) + radius, radius));
    }
}

/// Triangle geometry.
class GeomTriangle: Geometry
{
    /// Vertices of the triangle.
    Vector3f[3] v;

    /**
     * Constructor.
     *
     * Params:
     *   a     = First vertex.
     *   b     = Second vertex.
     *   c     = Third vertex.
     *   owner = Owner object.
     */
    this(Vector3f a, Vector3f b, Vector3f c, Owner owner = null)
    {
        super(owner);
        type = GeomType.Triangle;
        v[0] = a;
        v[1] = b;
        v[2] = c;
    }

    /// Returns the support point in the given direction.
    override Vector3f supportPoint(Vector3f dir)
    {
        float dota = dir.dot(v[0]);
        float dotb = dir.dot(v[1]);
        float dotc = dir.dot(v[2]);

        if (dota > dotb)
        {
            if (dotc > dota)
                return v[2];
            else
                return v[0];
        }
        else
        {
            if (dotc > dotb)
                return v[2];
            else
                return v[1];
        }
    }

    /// Returns the bounding box for the triangle.
    override AABB boundingBox(Vector3f position)
    {
        Vector3f mi = v[0];
        Vector3f ma = v[0];

        foreach (i; 1..3)
        {
            mi.x = min(mi.x, v[i].x);
            mi.y = min(mi.y, v[i].y);
            mi.z = min(mi.z, v[i].z);

            ma.x = max(ma.x, v[i].x);
            ma.y = max(ma.y, v[i].y);
            ma.z = max(ma.z, v[i].z);
        }

        Vector3f center = (mi + ma) * 0.5f;
        Vector3f halfSize = (ma - mi) * 0.5f;

        return AABB(position + center, halfSize);
    }
}
