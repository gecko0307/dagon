/*
Copyright (c) 2013-2025 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Contact information between two collision shapes.
 *
 * Description:
 * The `dagon.collision.contact` defines the `Contact` structure for representing
 * collision information between shapes, including contact point, normal,
 * penetration depth, and tangent directions.
 *
 * Copyright: Timur Gafarov 2013-2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.collision.contact;

import dlib.math.vector;
import dagon.collision.shape;

/** 
 * Stores contact information for a collision between two shapes.
 *
 *  Members:
 *    point       = Contact point in world space.
 *    normal      = Contact normal vector.
 *    penetration = Penetration depth (or hit distance for raycasting).
 *    hitDistance = Alias for penetration, for raycasting convenience.
 *    fact        = `true` if the contact is valid.
 *
 * Methods:
 *    calcFDir    = Calculates tangent directions (friction directions) for the contact normal.
 */
struct Contact
{
    /// Contact point in world space.
    Vector3f point;

    /// Contact normal vector.
    Vector3f normal;

    /// Penetration depth or hit distance.
    float penetration;

    /// Convenience alias for raycasting.
    alias hitDistance = penetration;

    /// `true` if the contact is valid.
    bool fact;

    /**
     * Calculates tangent (friction) directions for the contact normal.
     *
     * Params:
     *   fdir1 = First tangent direction (output).
     *   fdir2 = Second tangent direction (output).
     */
    void calcFDir(out Vector3f fdir1, out Vector3f fdir2)
    {
        if (dot(normal, Vector3f(1,0,0)) < 0.5f)
            fdir1 = cross(normal, Vector3f(1,0,0)); 
        else
            fdir1 = cross(normal, Vector3f(0,0,1));
        
        fdir2 = cross(fdir1, normal);
        fdir1.normalize();
        fdir2.normalize();
    }
}
