/*
Copyright (c) 2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Gilbert-Johnson-Keerthi algorithm.
 *
 * Description:
 * The `dagon.collision.gjk` provides implementation of the Gilbert-Johnson-Keerthi (GJK)
 * algorithm for collision detection between two convex shapes using the `JohnsonSimplexSolver`.
 *
 * Copyright: Timur Gafarov 2025
 * License: $(LINK2 https://boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dagon.collision.gjk;

import dlib.math.vector;

import dagon.collision.shape;
import dagon.collision.contact;
import dagon.collision.jss;

/**
 * Tests for intersection between two convex shapes using the GJK algorithm.
 *
 * Params:
 *   s1 = First collision shape.
 *   s2 = Second collision shape.
 */
bool gjkTest(CollisionShape s1, CollisionShape s2)
{
    Contact c;
    return gjkTest(s1, s2, c, false);
}

/**
 * Tests for intersection between two convex shapes using the GJK-EPA algorithm.
 * If intersection occurs, fills the provided `Contact` struct with contact
 * point, normal, and penetration.
 * Note: EPA is not implemented yet.
 *
 * Params:
 *   s1     = First collision shape.
 *   s2     = Second collision shape.
 *   c      = Reference to a `Contact` struct to store contact information.
 *   useEpa = Whether to use EPA to compute contact info if intersection occurs.
 */
bool gjkTest(CollisionShape s1, CollisionShape s2, ref Contact c, bool useEpa = true)
{
    enum int maxIterations = 20;
    enum float epsilon = 1e-6f;

    JohnsonSimplexSolver simplex;
    simplex.initialize();

    // Initial direction: between centers
    Vector3f dir = s2.position - s1.position;
    if (dir.isAlmostZero)
        dir = Vector3f(1.0f, 0.0f, 0.0f);

    // First support point
    Vector3f supportA = s1.supportPoint(dir);
    Vector3f supportB = s2.supportPoint(-dir);
    Vector3f w = supportA - supportB;

    simplex.addPoint(w, supportA, supportB);

    dir = -w;

    for (int iter = 0; iter < maxIterations; ++iter)
    {
        // Next support point
        supportA = s1.supportPoint(dir);
        supportB = s2.supportPoint(-dir);
        w = supportA - supportB;

        // Termination: if dot(w, dir) < epsilon, no intersection
        if (dot(w, dir) < epsilon)
            return false;

        // Add new point to simplex
        simplex.addPoint(w, supportA, supportB);

        // Reduce simplex
        if (!simplex.reduceSimplex())
            return false;

        // Calculate closest point to origin
        Vector3f closest;
        simplex.calcClosestPoint(closest);

        // If closest point is very close to origin, intersection found
        if (closest.length < epsilon)
        {
            // Fill contact info
            Vector3f pA, pB;
            simplex.calcClosestPoints(pA, pB);
            return true;
        }

        if (closest.length < epsilon)
        {
            c.fact = true;
            
            // Optionally use EPA to get contact info
            if (useEpa)
            {
                //TODO
                //epaSolve(s1, s2, simplex, c);
            }
            
            return true;
        }

        // Update direction for next iteration
        dir = -closest;
    }

    // If max iterations reached, treat as no intersection
    c.fact = false;
    return false;
}
