/*
Copyright (c) 2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module dagon.extra.ocean;

import std.stdio;
import std.math;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.math.vector;
import dlib.math.matrix;
import dlib.math.transformation;
import dlib.math.interpolation;
import dlib.image.color;
import dlib.text.str;

import dagon.core.bindings;
import dagon.graphics.material;
import dagon.graphics.light;
import dagon.graphics.shader;
import dagon.graphics.state;
import dagon.graphics.texture;
import dagon.graphics.csm;
import dagon.resource.asset;
import dagon.resource.texture;

/*
 * Ocean/sea with Gerstner waves
 */
class OceanShader: Shader
{
   protected:
    String vs, fs;
    
    float _time1 = 0.0f;
    float _time2 = 0.0f;
    float _rippleTime = 0.0f;
    
    ShaderParameter!Matrix4x4f modelViewMatrix;
    ShaderParameter!Matrix4x4f projectionMatrix;
    ShaderParameter!Matrix4x4f normalMatrix;
    ShaderParameter!Matrix4x4f viewMatrix;
    ShaderParameter!Matrix4x4f invViewMatrix;
    ShaderParameter!Matrix4x4f prevModelViewMatrix;
    ShaderParameter!Matrix3x3f textureMatrix;
    
    ShaderParameter!Vector3f cameraPosition;
    
    ShaderParameter!Vector3f sunDirection;
    ShaderParameter!Color4f sunColor;
    ShaderParameter!float sunEnergy;
    
    ShaderParameter!float time1;
    ShaderParameter!float time2;
    ShaderParameter!float rippleTime;
    ShaderParameter!Color4f waterDepthColor;
    ShaderParameter!Color4f waterScatteringColor;
    ShaderParameter!float waterScatteringEnergy;
    ShaderParameter!float waterGloss;
    ShaderParameter!float waterRelief;
    ShaderParameter!float waterFresnelPower;
    
    ShaderParameter!Color4f fogColor;
    ShaderParameter!float fogStart;
    ShaderParameter!float fogEnd;
    
    ShaderParameter!int normalTexture1;
    ShaderParameter!int normalTexture2;
    
    ShaderParameter!float ambientEnergy;
    ShaderParameter!Color4f ambientVector;
    ShaderParameter!int ambientTexture;
    ShaderParameter!int ambientTextureCube;
    ShaderSubroutine ambientSubroutine;
    GLuint ambientSubroutineCubemap,
           ambientSubroutineEquirectangularMap,
           ambientSubroutineColor;
    
    TextureAsset normalTexture1Asset;
    TextureAsset normalTexture2Asset;
    
   public:
    float waveSpeed1 = 0.2f;
    float waveSpeed2 = 0.2f;
    float rippleSpeed = 0.03f;
    
    Color4f waterColor = Color4f(0.1f, 0.12f, 0.13f, 1.0f);
    Color4f scatteringColor = Color4f(0.5f, 0.9f, 0.7f, 1.0f);
    float scatteringEnergy = 0.5f;
    float gloss = 0.5f;
    float fresnelPower = 12.0f;
    
    Texture reliefNormalTexture1;
    Texture reliefNormalTexture2;
    float relief = 0.5f;

    this(AssetManager assetManager)
    {
        vs = Shader.load("data/__internal/shaders/Ocean/Ocean.vert.glsl");
        fs = Shader.load("data/__internal/shaders/Ocean/Ocean.frag.glsl");
        
        auto prog = New!ShaderProgram(vs, fs, this);
        super(prog, assetManager);
        
        modelViewMatrix = createParameter!Matrix4x4f("modelViewMatrix");
        projectionMatrix = createParameter!Matrix4x4f("projectionMatrix");
        normalMatrix = createParameter!Matrix4x4f("normalMatrix");
        viewMatrix = createParameter!Matrix4x4f("viewMatrix");
        invViewMatrix = createParameter!Matrix4x4f("invViewMatrix");
        prevModelViewMatrix = createParameter!Matrix4x4f("prevModelViewMatrix");
        textureMatrix = createParameter!Matrix3x3f("textureMatrix");
        
        cameraPosition = createParameter!Vector3f("cameraPosition");
        
        sunDirection = createParameter!Vector3f("sunDirection");
        sunColor = createParameter!Color4f("sunColor");
        sunEnergy = createParameter!float("sunEnergy");
        
        time1 = createParameter!float("time1");
        time2 = createParameter!float("time2");
        rippleTime = createParameter!float("rippleTime");
        waterDepthColor = createParameter!Color4f("waterColor");
        waterScatteringColor = createParameter!Color4f("scatteringColor");
        waterScatteringEnergy = createParameter!float("scatteringEnergy");
        waterGloss = createParameter!float("gloss");
        waterRelief = createParameter!float("relief");
        waterFresnelPower = createParameter!float("fresnelPower");
        
        normalTexture1Asset = textureAsset(assetManager, "data/__internal/textures/water_normal1.png");
        reliefNormalTexture1 = normalTexture1Asset.texture;

        normalTexture2Asset = textureAsset(assetManager, "data/__internal/textures/water_normal2.png");
        reliefNormalTexture2 = normalTexture2Asset.texture;
        
        normalTexture1 = createParameter!int("normalTexture1");
        normalTexture2 = createParameter!int("normalTexture2");
        
        fogColor = createParameter!Color4f("fogColor");
        fogStart = createParameter!float("fogStart");
        fogEnd = createParameter!float("fogEnd");
        
        ambientEnergy = createParameter!float("ambientEnergy");
        ambientVector = createParameter!Color4f("ambientVector");
        ambientTexture = createParameter!int("ambientTexture");
        ambientTextureCube = createParameter!int("ambientTextureCube");
        ambientSubroutine = createParameterSubroutine("ambient", ShaderType.Fragment);
        ambientSubroutineCubemap = ambientSubroutine.getIndex("ambientCubemap");
        ambientSubroutineEquirectangularMap = ambientSubroutine.getIndex("ambientEquirectangularMap");
        ambientSubroutineColor = ambientSubroutine.getIndex("ambientColor");
    }
    
    ~this()
    {
        vs.free();
        fs.free();
    }
    
    override void bindParameters(GraphicsState* state)
    {
        Material mat = state.material;
        
        modelViewMatrix = &state.modelViewMatrix;
        projectionMatrix = &state.projectionMatrix;
        normalMatrix = &state.normalMatrix;
        viewMatrix = &state.viewMatrix;
        invViewMatrix = &state.invViewMatrix;
        prevModelViewMatrix = &state.prevModelViewMatrix;
        textureMatrix = &mat.textureTransformation;
        
        cameraPosition = state.cameraPosition;
        
        // Sun
        Light sun = mat.sun;
        if (sun is null)
            sun = state.environment.sun;
        
        if (sun)
        {
            Vector4f sunDirHg = Vector4f(sun.directionAbsolute);
            sunDirHg.w = 0.0f;
            sunDirection = (sunDirHg * state.viewMatrix).xyz;
            sunColor = sun.color;
            sunEnergy = sun.energy;
        }
        else
        {
            Vector4f sunDirHg = Vector4f(0.0f, 0.0f, 1.0f, 0.0f);
            sunDirection = (sunDirHg * state.viewMatrix).xyz;
            sunColor = Color4f(1.0f, 1.0f, 1.0f, 1.0f);
            sunEnergy = 1.0f;
        }
        
        // Time
        _time1 += state.time.delta * waveSpeed1;
        if (_time1 >= 1.0f)
            _time1 = 0.0f;
        _time2 += state.time.delta * waveSpeed2;
        if (_time2 >= 1.0f)
            _time2 = 0.0f;
        time1 = _time1;
        time2 = _time2;
        
        _rippleTime += state.time.delta * rippleSpeed;
        if (_rippleTime >= 1.0f)
            _rippleTime = 0.0f;
        rippleTime = _rippleTime;
        
        waterDepthColor = waterColor;
        waterScatteringColor = scatteringColor;
        waterScatteringEnergy = scatteringEnergy;
        waterGloss = gloss;
        waterRelief = relief;
        waterFresnelPower = fresnelPower;
        
        // Normal textures
        glActiveTexture(GL_TEXTURE0);
        reliefNormalTexture1.bind();
        normalTexture1 = 0;

        glActiveTexture(GL_TEXTURE1);
        reliefNormalTexture2.bind();
        normalTexture2 = 1;
        
        // Textures 2, 3 - environment (equirectangular map, cube map)
        if (state.environment)
        {
            fogColor = state.environment.fogColor;
            fogStart = state.environment.fogStart;
            fogEnd = state.environment.fogEnd;
            ambientEnergy = state.environment.ambientEnergy;

            if (state.environment.ambientMap)
            {
                if (state.environment.ambientMap.isCubemap)
                {
                    glActiveTexture(GL_TEXTURE2);
                    glBindTexture(GL_TEXTURE_2D, 0);
                    ambientTexture = 2;
                    
                    glActiveTexture(GL_TEXTURE3);
                    state.environment.ambientMap.bind();
                    ambientTextureCube = 3;
                    
                    ambientSubroutine.index = ambientSubroutineCubemap;
                }
                else
                {
                    glActiveTexture(GL_TEXTURE2);
                    state.environment.ambientMap.bind();
                    ambientTexture = 2;
                    
                    glActiveTexture(GL_TEXTURE3);
                    glBindTexture(GL_TEXTURE_CUBE_MAP, 0);
                    ambientTextureCube = 3;
                    
                    ambientSubroutine.index = ambientSubroutineEquirectangularMap;
                }
            }
            else
            {
                glActiveTexture(GL_TEXTURE2);
                glBindTexture(GL_TEXTURE_2D, 0);
                ambientTexture = 2;
                
                glActiveTexture(GL_TEXTURE3);
                glBindTexture(GL_TEXTURE_CUBE_MAP, 0);
                ambientTextureCube = 3;
                
                ambientVector = state.environment.ambientColor;
                
                ambientSubroutine.index = ambientSubroutineColor;
            }
        }
        else
        {
            fogColor = Color4f(0.5f, 0.5f, 0.5f, 1.0f);
            fogStart = 0.0f;
            fogEnd = 1000.0f;
            ambientEnergy = 1.0f;
            ambientVector = Color4f(0.5f, 0.5f, 0.5f, 1.0f);
            
            glActiveTexture(GL_TEXTURE2);
            glBindTexture(GL_TEXTURE_2D, 0);
            ambientTexture = 2;
            
            glActiveTexture(GL_TEXTURE3);
            glBindTexture(GL_TEXTURE_CUBE_MAP, 0);
            ambientTextureCube = 3;
            
            ambientSubroutine.index = ambientSubroutineColor;
        }
        
        super.bindParameters(state);
    }
    
    override void unbindParameters(GraphicsState* state)
    {
        super.unbindParameters(state);
        
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE1);
        glBindTexture(GL_TEXTURE_2D, 0);
        
        glActiveTexture(GL_TEXTURE2);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE3);
        glBindTexture(GL_TEXTURE_CUBE_MAP, 0);
        
        glActiveTexture(GL_TEXTURE0);
    }
}
