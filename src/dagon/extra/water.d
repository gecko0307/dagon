/*
Copyright (c) 2018-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dagon.extra.water;

import std.stdio;
import std.math;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.math.vector;
import dlib.math.matrix;
import dlib.math.transformation;
import dlib.math.interpolation;
import dlib.image.color;
import dlib.text.str;

import dagon.core.bindings;
import dagon.graphics.material;
import dagon.graphics.texture;
import dagon.graphics.light;
import dagon.graphics.shader;
import dagon.graphics.state;
import dagon.graphics.csm;
import dagon.render.deferred.gbuffer;
import dagon.resource.asset;
import dagon.resource.texture;
import dagon.extra.utils;

/*
 * Animated water shader with rain ripples
 */
class WaterShader: Shader
{
   protected:
    String vs, fs;

    ShaderParameter!Matrix4x4f modelViewMatrix;
    ShaderParameter!Matrix4x4f projectionMatrix;
    ShaderParameter!Matrix4x4f invProjectionMatrix;
    ShaderParameter!Matrix4x4f normalMatrix;
    ShaderParameter!Matrix4x4f viewMatrix;
    ShaderParameter!Matrix4x4f invViewMatrix;
    ShaderParameter!Matrix4x4f prevModelViewMatrix;
    
    ShaderParameter!Vector2f textureScale;
    
    ShaderParameter!Vector2f viewSize;
    
    ShaderParameter!Color4f wWaterColor;
    ShaderParameter!float wRainIntensity;
    ShaderParameter!float wFlowSpeed;
    ShaderParameter!float wWaveAmplitude;
    
    ShaderParameter!Vector3f sunDirection;
    ShaderParameter!Color4f sunColor;
    ShaderParameter!float sunEnergy;
    ShaderParameter!float sunScatteringG;
    ShaderParameter!float sunScatteringDensity;
    ShaderParameter!int sunScattering;
    ShaderParameter!int sunScatteringSamples;
    ShaderParameter!float sunScatteringMaxRandomStepOffset;
    ShaderParameter!int sunScatteringShadow;
    ShaderParameter!int shaded;
    
    ShaderParameter!int depthBuffer;
    
    ShaderParameter!int pRippleTexture;
    ShaderParameter!Vector4f pRippleTimes;
    
    ShaderParameter!Color4f fogColor;
    ShaderParameter!float fogStart;
    ShaderParameter!float fogEnd;
    
    ShaderParameter!float ambientEnergy;
    ShaderParameter!Color4f ambientVector;
    ShaderParameter!int ambientTexture;
    ShaderParameter!int ambientTextureCube;
    ShaderSubroutine ambientSubroutine;
    GLuint ambientSubroutineCubemap,
           ambientSubroutineEquirectangularMap,
           ambientSubroutineColor;

    ShaderParameter!int shadowTextureArray;
    ShaderParameter!float shadowResolution;
    ShaderParameter!Matrix4x4f shadowMatrix1;
    ShaderParameter!Matrix4x4f shadowMatrix2;
    ShaderParameter!Matrix4x4f shadowMatrix3;
    ShaderSubroutine shadowMapSubroutine;
    GLuint shadowMapSubroutineCascaded,
           shadowMapSubroutineNone;

    ShaderParameter!int pNormalTexture1;
    ShaderParameter!int pNormalTexture2;
    
    ShaderParameter!float time;

    Matrix4x4f defaultShadowMatrix;
    GLuint defaultShadowTexture;

   public:
    GBuffer gbuffer;
    Texture rippleTexture;
    Texture normalTexture1;
    Texture normalTexture2;

    Color4f waterColor = Color4f(0.02f, 0.02f, 0.08f, 0.9f);
    float rainIntensity = 0.1f;
    float flowSpeed = 0.08f;
    float waveAmplitude = 0.3f;

    this(GBuffer gbuffer, AssetManager assetManager, Owner owner)
    {
        vs = Shader.load("data/__internal/shaders/Water/Water.vert.glsl");
        fs = Shader.load("data/__internal/shaders/Water/Water.frag.glsl");

        auto prog = New!ShaderProgram(vs, fs, this);
        super(prog, owner);
        
        modelViewMatrix = createParameter!Matrix4x4f("modelViewMatrix");
        projectionMatrix = createParameter!Matrix4x4f("projectionMatrix");
        invProjectionMatrix = createParameter!Matrix4x4f("invProjectionMatrix");
        normalMatrix = createParameter!Matrix4x4f("normalMatrix");
        viewMatrix = createParameter!Matrix4x4f("viewMatrix");
        invViewMatrix = createParameter!Matrix4x4f("invViewMatrix");
        prevModelViewMatrix = createParameter!Matrix4x4f("prevModelViewMatrix");
        
        textureScale = createParameter!Vector2f("textureScale");
        
        viewSize = createParameter!Vector2f("viewSize");
        
        wWaterColor = createParameter!Color4f("waterColor");
        wRainIntensity = createParameter!float("rainIntensity");
        wFlowSpeed = createParameter!float("flowSpeed");
        wWaveAmplitude = createParameter!float("waveAmplitude");
        
        sunDirection = createParameter!Vector3f("sunDirection");
        sunColor = createParameter!Color4f("sunColor");
        sunEnergy = createParameter!float("sunEnergy");
        sunScatteringG = createParameter!float("sunScatteringG");
        sunScatteringDensity = createParameter!float("sunScatteringDensity");
        sunScattering = createParameter!int("sunScattering");
        sunScatteringSamples = createParameter!int("sunScatteringSamples");
        sunScatteringMaxRandomStepOffset = createParameter!float("sunScatteringMaxRandomStepOffset");
        sunScatteringShadow = createParameter!int("sunScatteringShadow");
        shaded = createParameter!int("shaded");
        
        depthBuffer = createParameter!int("depthBuffer");
        
        pRippleTexture = createParameter!int("rippleTexture");
        pRippleTimes = createParameter!Vector4f("rippleTimes");
        
        fogColor = createParameter!Color4f("fogColor");
        fogStart = createParameter!float("fogStart");
        fogEnd = createParameter!float("fogEnd");
        
        ambientEnergy = createParameter!float("ambientEnergy");
        ambientVector = createParameter!Color4f("ambientVector");
        ambientTexture = createParameter!int("ambientTexture");
        ambientTextureCube = createParameter!int("ambientTextureCube");
        ambientSubroutine = createParameterSubroutine("ambient", ShaderType.Fragment);
        ambientSubroutineCubemap = ambientSubroutine.getIndex("ambientCubemap");
        ambientSubroutineEquirectangularMap = ambientSubroutine.getIndex("ambientEquirectangularMap");
        ambientSubroutineColor = ambientSubroutine.getIndex("ambientColor");
        
        shadowTextureArray = createParameter!int("shadowTextureArray");
        shadowResolution = createParameter!float("shadowResolution");
        shadowMatrix1 = createParameter!Matrix4x4f("shadowMatrix1");
        shadowMatrix2 = createParameter!Matrix4x4f("shadowMatrix2");
        shadowMatrix3 = createParameter!Matrix4x4f("shadowMatrix3");
        shadowMapSubroutine = createParameterSubroutine("shadowMap", ShaderType.Fragment);
        shadowMapSubroutineCascaded = shadowMapSubroutine.getIndex("shadowMapCascaded");
        shadowMapSubroutineNone = shadowMapSubroutine.getIndex("shadowMapNone");
        
        pNormalTexture1 = createParameter!int("normalTexture1");
        pNormalTexture2 = createParameter!int("normalTexture2");
        
        time = createParameter!float("time");

        this.gbuffer = gbuffer;

        TextureAsset rippleTextureAsset = textureAsset(assetManager, "data/__internal/textures/ripples.png");
        rippleTexture = rippleTextureAsset.texture;

        TextureAsset normalTexture1Asset = textureAsset(assetManager, "data/__internal/textures/water_normal1.png");
        normalTexture1 = normalTexture1Asset.texture;

        TextureAsset normalTexture2Asset = textureAsset(assetManager, "data/__internal/textures/water_normal2.png");
        normalTexture2 = normalTexture2Asset.texture;

        defaultShadowMatrix = Matrix4x4f.identity;

        glGenTextures(1, &defaultShadowTexture);
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D_ARRAY, defaultShadowTexture);
        glTexImage3D(GL_TEXTURE_2D_ARRAY, 0, GL_DEPTH_COMPONENT24, 1, 1, 3, 0, GL_DEPTH_COMPONENT, GL_FLOAT, null);
        glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_COMPARE_MODE, GL_COMPARE_REF_TO_TEXTURE);
        glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_COMPARE_FUNC, GL_LEQUAL);
        glBindTexture(GL_TEXTURE_2D_ARRAY, 0);
    }

    ~this()
    {
        if (glIsFramebuffer(defaultShadowTexture))
            glDeleteFramebuffers(1, &defaultShadowTexture);

        vs.free();
        fs.free();
    }

    override void bindParameters(GraphicsState* state)
    {
        auto mat = state.material;
        
        modelViewMatrix = &state.modelViewMatrix;
        projectionMatrix = &state.projectionMatrix;
        invProjectionMatrix = &state.invProjectionMatrix;
        normalMatrix = &state.normalMatrix;
        viewMatrix = &state.viewMatrix;
        invViewMatrix = &state.invViewMatrix;
        prevModelViewMatrix = &state.prevModelViewMatrix;

        textureScale = mat.textureScale;

        viewSize = state.resolution;

        // Water props
        wWaterColor = waterColor;
        wRainIntensity = rainIntensity;
        wFlowSpeed = flowSpeed;
        wWaveAmplitude = waveAmplitude;

        // Sun
        Light sun = mat.sun;
        if (sun is null)
            sun = state.environment.sun;
        if (sun)
        {
            Vector4f sunDirHg = Vector4f(sun.directionAbsolute);
            sunDirHg.w = 0.0;
            sunDirection = (sunDirHg * state.viewMatrix).xyz;
            sunColor = sun.color;
            sunEnergy = sun.energy;
            sunScatteringG = 1.0f - sun.scattering;
            sunScatteringDensity = sun.mediumDensity;
            sunScattering = sun.scatteringEnabled;
            sunScatteringSamples = sun.scatteringSamples;
            sunScatteringMaxRandomStepOffset = sun.scatteringMaxRandomStepOffset;
            sunScatteringShadow = sun.scatteringUseShadow;
        }
        else
        {
            Vector4f sunDirHg = Vector4f(0.0f, 0.0f, 1.0f, 0.0f);
            sunDirection = (sunDirHg * state.viewMatrix).xyz;
            sunColor = Color4f(1.0f, 1.0f, 1.0f, 1.0f);
            sunEnergy = 1.0f;
            sunScattering = false;
            sunScatteringG = 0.0f;
            sunScatteringDensity = 1.0f;
            sunScatteringSamples = 1;
            sunScatteringMaxRandomStepOffset = 0.0f;
            sunScatteringShadow = false;
        }
        
        shaded = !mat.shadeless;

        // Texture 0 - depth texture (for smooth coast transparency)
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, gbuffer.depthTexture);
        depthBuffer = 0;

        // Ripple parameters
        glActiveTexture(GL_TEXTURE1);
        rippleTexture.bind();
        pRippleTexture = 1;

        float rippleTimesX = frac((state.time.elapsed) * 1.6);
        float rippleTimesY = frac((state.time.elapsed * 0.85 + 0.2) * 1.6);
        float rippleTimesZ = frac((state.time.elapsed * 0.93 + 0.45) * 1.6);
        float rippleTimesW = frac((state.time.elapsed * 1.13 + 0.7) * 1.6);
        pRippleTimes = Vector4f(rippleTimesX, rippleTimesY, rippleTimesZ, rippleTimesW);

        // Environment
        if (state.environment)
        {
            fogColor = state.environment.fogColor;
            fogStart = state.environment.fogStart;
            fogEnd = state.environment.fogEnd;
            ambientEnergy = state.environment.ambientEnergy;

            if (state.environment.ambientMap)
            {
                glActiveTexture(GL_TEXTURE2);
                state.environment.ambientMap.bind();
                if (state.environment.ambientMap.isCubemap)
                {
                    ambientTextureCube = 2;
                    ambientSubroutine.index = ambientSubroutineCubemap;
                }
                else
                {
                    ambientTexture = 2;
                    ambientSubroutine.index = ambientSubroutineEquirectangularMap;
                }
            }
            else
            {
                ambientVector = state.environment.ambientColor;
                ambientSubroutine.index = ambientSubroutineColor;
            }
        }
        else
        {
            fogColor = Color4f(0.5f, 0.5f, 0.5f, 1.0f);
            fogStart = 0.0f;
            fogEnd = 1000.0f;
            ambientEnergy = 1.0f;
            ambientVector = Color4f(0.5f, 0.5f, 0.5f, 1.0f);
            ambientSubroutine.index = ambientSubroutineColor;
        }

        // Shadow map
        if (sun)
        {
            if (sun.shadowEnabled)
            {
                CascadedShadowMap csm = cast(CascadedShadowMap)state.light.shadowMap;
                
                glActiveTexture(GL_TEXTURE3);
                glBindTexture(GL_TEXTURE_2D_ARRAY, csm.depthTexture);
                shadowTextureArray = 3;
                shadowResolution = cast(float)csm.resolution;
                shadowMatrix1 = &csm.area[0].shadowMatrix;
                shadowMatrix2 = &csm.area[1].shadowMatrix;
                shadowMatrix3 = &csm.area[2].shadowMatrix;
                shadowMapSubroutine.index = shadowMapSubroutineCascaded;
            }
            else
            {
                glActiveTexture(GL_TEXTURE3);
                glBindTexture(GL_TEXTURE_2D_ARRAY, defaultShadowTexture);
                shadowTextureArray = 3;
                shadowMatrix1 = &defaultShadowMatrix;
                shadowMatrix2 = &defaultShadowMatrix;
                shadowMatrix3 = &defaultShadowMatrix;
                shadowMapSubroutine.index = shadowMapSubroutineNone;
            }
        }
        else
        {
            glActiveTexture(GL_TEXTURE3);
            glBindTexture(GL_TEXTURE_2D_ARRAY, defaultShadowTexture);
            shadowTextureArray = 3;
            shadowMatrix1 = &defaultShadowMatrix;
            shadowMatrix2 = &defaultShadowMatrix;
            shadowMatrix3 = &defaultShadowMatrix;
            shadowMapSubroutine.index = shadowMapSubroutineNone;
        }

        // Normal maps
        glActiveTexture(GL_TEXTURE4);
        normalTexture1.bind();
        pNormalTexture1 = 4;

        glActiveTexture(GL_TEXTURE5);
        normalTexture2.bind();
        pNormalTexture2 = 5;

        time = cast(float)state.time.elapsed;

        super.bindParameters(state);
    }

    override void unbindParameters(GraphicsState* state)
    {
        super.unbindParameters(state);

        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE1);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE2);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE3);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE4);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE5);
        glBindTexture(GL_TEXTURE_2D, 0);

        glActiveTexture(GL_TEXTURE0);
    }
}
