/*
Copyright (c) 2025 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module gscript.vm;

import std.stdio;
import std.conv;
import std.traits;
import std.algorithm;
import std.array;
import std.ascii;

import dlib.core.memory;
import dlib.core.ownership;
import dlib.container.dict;

import gscript.arena;
import gscript.instructions;
import gscript.dynamic;
import gscript.stdlib.array;
import gscript.stdlib.str;
import gscript.stdlib.io;
import gscript.stdlib.time;

interface GsObject
{
    GsDynamic get(string key);
    void set(string key, GsDynamic value);
    bool contains(string key);
    void setPrototype(GsObject);
    
    final GsDynamic opIndex(string key)
    {
        if (contains(key))
            return get(key);
        else
            return GsDynamic();
    }
    
    final T opIndexAssign(T)(T value, string key)
    {
        set(key, GsDynamic(value));
        return value;
    }
}

class GsArenaObject: GsObject
{
    GsArena arena;
    GsObject prototype;
    Dict!(GsDynamic, string) storage;
    
    this(GsArena arena)
    {
        this.arena = arena;
        storage = dict!(GsDynamic, string);
    }
    
    ~this()
    {
        Delete(storage);
    }
    
    GsDynamic get(string key)
    {
        auto v = key in storage;
        if (v)
            return *v;
        else
        {
            if (prototype)
                return prototype.get(key);
            else
                return GsDynamic();
        }
    }
    
    void set(string key, GsDynamic value)
    {
        storage[key] = value;
    }
    
    bool contains(string key)
    {
        if ((key in storage) !is null)
            return true;
        else
        {
            if (prototype)
                return prototype.contains(key);
            else
                return false;
        }
    }
    
    void setPrototype(GsObject proto)
    {
        prototype = proto;
    }
}

struct GsCallFrame
{
    GsDynamic[128] parameters;
    GsDynamic[128] localVariables;
    size_t numParameters;
}

class GsVirtualMachine: Owner, GsObject
{
  protected:
    GsDynamic[] stack;
    GsInstruction[] instructions;
    size_t[] callStack;            // Call stack for subroutine return addresses
    GsCallFrame[] callFrames;      // Stack of call frames
    size_t ip;                     // Instruction pointer
    size_t sp;                     // Stack pointer
    size_t cp;                     // Call stack pointer

    Dict!(size_t, string) jumpTable;  // Function table mapping names to instruction indices
    
    Dict!(GsDynamic, string) globals; // Built-in variables
    
    // Standard library
    GsGlobalArray globArray;
    GsGlobalStr globStr;
    GsGlobalIO globIO;
    GsGlobalTime globTime;
    
    size_t callDepth = 1;
    
  public:
    GsArena heap;

    this(Owner owner)
    {
        super(owner);
        
        heap = New!GsArena(1024 * 10, this);
        
        stack = New!(GsDynamic[])(256);
        callStack = New!(size_t[])(256);
        callFrames = New!(GsCallFrame[])(256);
        ip = 0;
        sp = 0;
        cp = 0;
        
        jumpTable = dict!(size_t, string);
        
        globals = dict!(GsDynamic, string);
        
        globArray = heap.create!GsGlobalArray(heap);
        globals["array"] = GsDynamic(globArray);
        
        globStr = heap.create!GsGlobalStr(heap);
        globals["string"] = GsDynamic(globStr);
        
        globIO = heap.create!GsGlobalIO(heap);
        globals["io"] = GsDynamic(globIO);
        
        globTime = heap.create!GsGlobalTime(heap);
        globals["time"] = GsDynamic(globTime);
    }
    
    ~this()
    {
        Delete(stack);
        Delete(callStack);
        Delete(callFrames);
        Delete(jumpTable);
        Delete(globals);
    }
    
    GsDynamic get(string key)
    {
        auto v = key in globals;
        if (v)
            return *v;
        else
            return GsDynamic(cast(double)0.0);
    }

    void set(string key, GsDynamic value)
    {
        globals[key] = value;
    }

    bool contains(string key)
    {
        return (key in globals) !is null;
    }
    
    void setPrototype(GsObject proto)
    {
        // No-op
    }

    // Stack manipulation methods
    GsDynamic pop()
    {
        if (sp == 0)
        {
            fatality("Fatality: stack underflow");
        }
        return stack[--sp];
    }

    GsDynamic peek()
    {
        if (sp == 0)
        {
            fatality("Fatality: stack is empty");
        }
        return stack[sp - 1];
    }

    void push(GsDynamic value)
    {
        if (sp >= stack.length)
        {
            fatality("Fatality: stack overflow");
        }
        stack[sp++] = value;
    }
    
    GsObject createObject()
    {
        return heap.create!GsArenaObject(heap);
    }
    
    GsDynamic[] createArray(size_t len)
    {
        return heap.create!(GsDynamic[])(len);
    }
    
    bool hasLabel(string name)
    {
        return (name in jumpTable) != null;
    }
    
    void call(string jumpLabel, GsDynamic[] args)
    {
        if (jumpLabel in jumpTable)
        {
            auto callFrame = &callFrames[0];
            for(size_t i = 0; i < args.length; i++)
            {
                callFrame.parameters[i] = args[i];
            }
            callFrame.numParameters = args.length;
            callDepth = 0;
            run(jumpTable[jumpLabel], 0);
        }
        else
        {
            writeln("Error: unknown jump label \"", jumpLabel, "\"");
        }
    }

    void load(GsInstruction[] instructions)
    {
        this.instructions = instructions;
        
        // Populate the function table with label indices
        foreach(i, instrunction; instructions)
        {
            if (instrunction.type == GsInstructionType.LABEL)
            {
                jumpTable[instrunction.operand.asString] = i;
            }
        }
        
        finalize();
    }
    
    void fatality(A...)(string fmt, A args)
    {
        writefln(fmt, args);
        finalize();
    }
    
    void finalize()
    {
        ip = instructions.length - 1;
    }
    
    void run(size_t initialIp = 0, size_t initialCallDepth = 1)
    {
        ip = initialIp;
        sp = 0;
        cp = 0;
        GsCallFrame* callFrame = &callFrames[cp];
        callDepth = initialCallDepth;
        
        while (ip < instructions.length)
        {
            auto instruction = instructions[ip++];
            switch (instruction.type)
            {
                case GsInstructionType.LABEL:
                    break;
                case GsInstructionType.PUSH:
                    push(instruction.operand);
                    break;
                case GsInstructionType.POP:
                    pop();
                    break;
                case GsInstructionType.ADD:
                    auto b = pop();
                    auto a = pop();
                    if (a.type == GsDynamicType.Number && b.type == GsDynamicType.Number)
                        push(GsDynamic(a.asNumber + b.asNumber));
                    else
                    {
                        fatality("Fatality: addition of %s and %s", a.type, b.type);
                        return;
                    }
                    break;
                case GsInstructionType.SUB:
                    auto b = pop();
                    auto a = pop();
                    if (a.type == GsDynamicType.Number && b.type == GsDynamicType.Number)
                        push(GsDynamic(a.asNumber - b.asNumber));
                    else
                    {
                        fatality("Fatality: subtraction of %s and %s", a.type, b.type);
                        return;
                    }
                    break;
                case GsInstructionType.MUL:
                    auto b = pop();
                    auto a = pop();
                    if (a.type == GsDynamicType.Number && b.type == GsDynamicType.Number)
                        push(GsDynamic(a.asNumber * b.asNumber));
                    else
                    {
                        fatality("Fatality: multiplication of %s and %s", a.type, b.type);
                        return;
                    }
                    break;
                case GsInstructionType.DIV:
                    auto b = pop();
                    auto a = pop();
                    if (a.type == GsDynamicType.Number && b.type == GsDynamicType.Number)
                        push(GsDynamic(a.asNumber / b.asNumber));
                    else
                    {
                        fatality("Fatality: division of %s and %s", a.type, b.type);
                        return;
                    }
                    break;
                case GsInstructionType.NEG:
                    auto a = pop();
                    if (a.type == GsDynamicType.Number)
                        push(GsDynamic(-a.asNumber));
                    else
                    {
                        fatality("Fatality: negation of %s", a.type);
                        return;
                    }
                    break;
                case GsInstructionType.MOD:
                    auto b = pop();
                    auto a = pop();
                    if (a.type == GsDynamicType.Number && b.type == GsDynamicType.Number)
                        push(GsDynamic(a.asNumber % b.asNumber));
                    else
                    {
                        fatality("Fatality: modulo of %s and %s", a.type, b.type);
                        return;
                    }
                    break;
                case GsInstructionType.POW:
                    auto b = pop();
                    auto a = pop();
                    if (a.type == GsDynamicType.Number && b.type == GsDynamicType.Number)
                        push(GsDynamic(a.asNumber ^^ b.asNumber));
                    else
                    {
                        fatality("Fatality: power of %s and %s", a.type, b.type);
                        return;
                    }
                    break;
                case GsInstructionType.BITWISE_AND:
                    auto b = pop();
                    auto a = pop();
                    if (a.type == GsDynamicType.Number && b.type == GsDynamicType.Number)
                        push(GsDynamic(cast(long)a.asNumber & cast(long)b.asNumber));
                    else
                    {
                        fatality("Fatality: bitwise AND of %s and %s", a.type, b.type);
                        return;
                    }
                    break;
                case GsInstructionType.BITWISE_OR:
                    auto b = pop();
                    auto a = pop();
                    if (a.type == GsDynamicType.Number && b.type == GsDynamicType.Number)
                        push(GsDynamic(cast(long)a.asNumber | cast(long)b.asNumber));
                    else
                    {
                        fatality("Fatality: bitwise OR of %s and %s", a.type, b.type);
                        return;
                    }
                    break;
                case GsInstructionType.BITWISE_XOR:
                    auto b = pop();
                    auto a = pop();
                    if (a.type == GsDynamicType.Number && b.type == GsDynamicType.Number)
                        push(GsDynamic(cast(long)a.asNumber ^ cast(long)b.asNumber));
                    else
                    {
                        fatality("Fatality: bitwise XOR of %s and %s", a.type, b.type);
                        return;
                    }
                    break;
                case GsInstructionType.AND:
                    auto b = pop();
                    auto a = pop();
                    if (a.type == GsDynamicType.Number && b.type == GsDynamicType.Number)
                        push(GsDynamic(a.asNumber && b.asNumber));
                    else
                    {
                        fatality("Fatality: logical AND of %s and %s", a.type, b.type);
                        return;
                    }
                    break;
                case GsInstructionType.OR:
                    auto b = pop();
                    auto a = pop();
                    if (a.type == GsDynamicType.Number && b.type == GsDynamicType.Number)
                        push(GsDynamic(a.asNumber || b.asNumber));
                    else
                    {
                        fatality("Fatality: logical OR of %s and %s", a.type, b.type);
                        return;
                    }
                    break;
                case GsInstructionType.NOT:
                    auto a = pop();
                    if (a.type == GsDynamicType.Number)
                        push(GsDynamic(!a.asNumber));
                    else
                    {
                        fatality("Fatality: logical NOT of %s", a.type);
                        return;
                    }
                    break;
                case GsInstructionType.CAT:
                    auto b = pop();
                    auto a = pop();
                    if (a.type == GsDynamicType.String && b.type == GsDynamicType.String)
                    {
                        push(GsDynamic(heap.cat(a.toString(), b.toString())));
                    }
                    else if (a.type == GsDynamicType.Array && b.type == GsDynamicType.Array)
                    {
                        GsDynamic[] newArr = heap.cat(a.asArray, b.asArray);
                        push(GsDynamic(newArr));
                    }
                    else if (a.type == GsDynamicType.Array && b.type != GsDynamicType.Array)
                    {
                        GsDynamic[] newArr = heap.cat(a.asArray, b);
                        push(GsDynamic(newArr));
                    }
                    else if (a.type != GsDynamicType.Array && b.type == GsDynamicType.Array)
                    {
                        GsDynamic[] newArr = heap.cat(a, b.asArray);
                        push(GsDynamic(newArr));
                    }
                    else
                    {
                        GsDynamic[] newArr = heap.create!(GsDynamic[])(2);
                        newArr[0] = a;
                        newArr[0] = b;
                        push(GsDynamic(newArr));
                    }
                    break;
                case GsInstructionType.EQ:
                    auto b = pop();
                    auto a = pop();
                    push(GsDynamic(a == b));
                    break;
                case GsInstructionType.LESS:
                    auto b = pop().asNumber;
                    auto a = pop().asNumber;
                    push(GsDynamic(a < b));
                    break;
                case GsInstructionType.GREATER:
                    auto b = pop().asNumber;
                    auto a = pop().asNumber;
                    push(GsDynamic(a > b));
                    break;
                case GsInstructionType.NEQ:
                    auto b = pop();
                    auto a = pop();
                    push(GsDynamic(a != b));
                    break;
                case GsInstructionType.LESS_EQ:
                    auto b = pop().asNumber;
                    auto a = pop().asNumber;
                    push(GsDynamic(a <= b));
                    break;
                case GsInstructionType.GREATER_EQ:
                    auto b = pop().asNumber;
                    auto a = pop().asNumber;
                    push(GsDynamic(a >= b));
                    break;
                case GsInstructionType.JMP:
                    ip = jumpTable[instruction.operand.asString];
                    break;
                case GsInstructionType.JMP_IF:
                    if (cast(bool)pop().asNumber)
                        ip = jumpTable[instruction.operand.asString];
                    break;
                case GsInstructionType.JMP_IF_NOT:
                    if (!cast(bool)pop().asNumber)
                        ip = jumpTable[instruction.operand.asString];
                    break;
                case GsInstructionType.INDEX_GET:
                    size_t index = cast(size_t)pop().asNumber;
                    auto arrayParam = pop();
                    if (arrayParam.type == GsDynamicType.Array)
                    {
                        auto array = arrayParam.asArray;
                        if (index >= 0 && index < array.length)
                        {
                            push(array[index]);
                            break;
                        }
                        else
                        {
                            fatality("Fatality: index is outside array capability");
                            return;
                        }
                    }
                    else if (arrayParam.type == GsDynamicType.String)
                    {
                        auto str = arrayParam.asString;
                        if (index >= 0 && index < str.length)
                        {
                            push(GsDynamic(cast(double)str[index]));
                            break;
                        }
                        else
                        {
                            fatality("Fatality: index is outside string length");
                            return;
                        }
                    }
                    else
                    {
                        fatality("Fatality: attempting to index %s which is not an array", arrayParam.type);
                        return;
                    }
                case GsInstructionType.INDEX_SET:
                    size_t index = cast(size_t)pop().asNumber;
                    auto arrayParam = pop();
                    if (arrayParam.type == GsDynamicType.Array)
                    {
                        auto array = arrayParam.asArray;
                        auto value = pop();
                        if (index >= 0 && index < array.length)
                            array[index] = value;
                        else
                        {
                            fatality("Fatality: index is outside array capability");
                            return;
                        }
                        push(value);
                        break;
                    }
                    else
                    {
                        fatality("Fatality: attempting to index %s which is not an array", arrayParam.type);
                        return;
                    }
                case GsInstructionType.LENGTH:
                    auto array = pop();
                    push(GsDynamic(array.asArray.length));
                    break;
                case GsInstructionType.PRINT:
                    writeln(pop());
                    break;
                case GsInstructionType.GLOBAL:
                    push(GsDynamic(this));
                    break;
                case GsInstructionType.ARRAY:
                    size_t len = cast(size_t)pop().asNumber;
                    auto arr = createArray(len);
                    for (size_t i = 0; i < len; i++)
                    {
                        arr[$ - 1 - i] = pop();
                    }
                    push(GsDynamic(arr));
                    break;
                case GsInstructionType.CALL:
                    size_t numParams = cast(size_t)instruction.operand.asNumber;
                    
                    auto func = pop();
                    
                    GsNativeMethod nativeMethod;
                    GsNativeFunc nativeFuncPtr;
                    bool useNativeMethod = false;
                    bool useNativeFunc = false;
                    
                    if (func.type == GsDynamicType.NativeMethod)
                    {
                        nativeMethod = func.asNativeMethod;
                        useNativeMethod = true;
                    }
                    else if (func.type == GsDynamicType.NativeFunction)
                    {
                        nativeFuncPtr = func.asNativeFunction;
                        useNativeFunc = true;
                    }
                    else
                    {
                        if (func.type == GsDynamicType.String)
                        {
                            string funcName = func.asString;
                            if (funcName in jumpTable)
                            {
                                callStack[cp] = ip; // Push the current instruction pointer onto the call stack
                                // Push a new call frame
                                cp++;
                                callFrame = &callFrames[cp];
                                for(size_t i = 0; i < callFrame.parameters.length; i++)
                                {
                                    if (i < numParams)
                                        callFrame.parameters[numParams - 1 - i] = pop();
                                    else
                                        callFrame.parameters[i] = GsDynamic();
                                }
                                callFrame.numParameters = numParams;
                                
                                ip = jumpTable[funcName]; // Jump to the function's starting instruction
                                
                                callDepth++;
                                
                                break;
                            }
                            else
                            {
                                fatality("Fatality: undefined jump label \"%s\"", funcName);
                                return;
                            }
                        }
                        else
                        {
                            fatality("Fatality: attempting to call %s, which is not a function", func.type);
                            return;
                        }
                    }
                    
                    // Native call: push a new call frame
                    cp++;
                    callFrame = &callFrames[cp];
                    for(size_t i = 0; i < callFrame.parameters.length; i++)
                    {
                        if (i < numParams)
                            callFrame.parameters[numParams - 1 - i] = pop();
                        else
                            callFrame.parameters[i] = GsDynamic();
                    }
                    callFrame.numParameters = numParams;
                    
                    GsDynamic result;
                    if (useNativeMethod)
                        result = nativeMethod(callFrame.parameters[0..numParams]);
                    else if (useNativeFunc)
                        result = nativeFuncPtr(callFrame.parameters[0..numParams]);
                    
                    cp--;
                    callFrame = &callFrames[cp];
                    push(result);
                    
                    break;
                case GsInstructionType.RET:
                    if (callDepth > 0)
                    {
                        cp--;
                        ip = callStack[cp]; // Pop the return address from the call stack
                        callFrame = &callFrames[cp];
                        callDepth--;
                    }
                    else
                    {
                        finalize();
                        return;
                    }
                    break;
                case GsInstructionType.STORE_VAR:
                    size_t vIndex = cast(size_t)instruction.operand.asNumber;
                    callFrames[cp].localVariables[vIndex] = peek(); // Store a value into a local variable
                    break;
                case GsInstructionType.LOAD_VAR:
                    size_t vIndex = cast(size_t)instruction.operand.asNumber;
                    push(callFrames[cp].localVariables[vIndex]); // Load a local variable onto the stack
                    break;
                case GsInstructionType.STORE_ARG:
                    size_t vIndex = cast(size_t)instruction.operand.asNumber;
                    callFrames[cp].parameters[vIndex] = peek(); // Store a stack value into a parameter
                    break;
                case GsInstructionType.LOAD_ARG:
                    size_t vIndex = cast(size_t)instruction.operand.asNumber;
                    push(callFrames[cp].parameters[vIndex]); // Load a parameter onto the stack
                    break;
                case GsInstructionType.LOAD_ARGS:
                    auto frame = &callFrames[cp];
                    push(GsDynamic(frame.parameters[0..frame.numParameters])); // Load all parameters onto the stack
                    break;
                case GsInstructionType.GLOBAL_STORE_VAR:
                    size_t vIndex = cast(size_t)instruction.operand.asNumber;
                    callFrames[0].localVariables[vIndex] = peek(); // Store a value into a global variable
                    break;
                case GsInstructionType.GLOBAL_LOAD_VAR:
                    size_t vIndex = cast(size_t)instruction.operand.asNumber;
                    push(callFrames[0].localVariables[vIndex]); // Load a global variable onto the stack
                    break;
                case GsInstructionType.NEW:
                    auto obj = createObject();
                    push(GsDynamic(obj));
                    break;
                case GsInstructionType.REUSE:
                    auto param = pop();
                    if (param.type == GsDynamicType.Object)
                    {
                        auto newObj = createObject();
                        newObj.setPrototype(param.asObject);
                        push(GsDynamic(newObj));
                    }
                    else
                    {
                        fatality("Fatality: attempting to reuse non-object");
                        return;
                    }
                    break;
                case GsInstructionType.GET:
                    auto key = instruction.operand.asString;
                    auto param = pop();
                    if (param.type == GsDynamicType.Object)
                    {
                        push(param.asObject.get(key));
                    }
                    else
                    {
                        fatality("Fatality: attempting to read member \"", key, "\" of non-object");
                        return;
                    }
                    break;
                case GsInstructionType.SET:
                    auto key = instruction.operand.asString;
                    auto param = pop();
                    auto value = pop();
                    if (param.type == GsDynamicType.Object)
                    {
                        param.asObject.set(key, value);
                        push(value);
                        break;
                    }
                    else
                    {
                        fatality("Fatality: attempting to write member \"", key, "\" of non-object");
                        return;
                    }
                case GsInstructionType.INIT_SET:
                    auto key = instruction.operand.asString;
                    auto value = pop();
                    auto param = peek();
                    if (param.type == GsDynamicType.Object)
                    {
                        param.asObject.set(key, value);
                        break;
                    }
                    else
                    {
                        fatality("Fatality: attempting to write member \"", key, "\" of non-object");
                        return;
                    }
                case GsInstructionType.CONTAINS:
                    auto key = instruction.operand.asString;
                    auto param = pop();
                    if (param.type == GsDynamicType.Object)
                    {
                        push(GsDynamic(param.asObject.contains(key)));
                    }
                    else
                    {
                        fatality("Fatality: attempting to read member \"", key, "\" of non-object");
                        return;
                    }
                    break;
                case GsInstructionType.HALT:
                    finalize();
                    return;
                default:
                    fatality("Fatality: unknown instruction: ", instruction.type);
                    return;
            }
        }
        
        finalize();
    }
}
