""" SoLoud D wrapper generator """

import soloud_codegen

fo = open("binddynamic.d", "w")

C_TO_D_TYPES = {
    "string":"string",
    "int":"int",
    "void":"void",
    "const unsigned char *":"const(ubyte)*",
    "const char *":"const(char)*",
    "char *":"char*",
    "unsigned int":"uint",
    "float":"float",
    "double":"double",
    "float *":"float[]",
    "File *":"SoloudObject",
    "unsigned char *":"ubyte*",
    "unsigned char":"ubyte",
    "short *":"short[]"
}

for soloud_type in soloud_codegen.soloud_type:
    C_TO_D_TYPES[soloud_type + " *"] = "SoloudObject"

def has_ex_variant(funcname):
    """ Checks if this function has an "Ex" variant """
    if funcname[-2::] == "Ex":
        # Already an Ex..
        return False
    for func in soloud_codegen.soloud_func:
        if func[1] == (funcname + "Ex"):
            return True
    return False

# Forward declare ALL THE CLASSES
for soloud_type in soloud_codegen.soloud_type:
    #fo.write("public class %s;\n"%(soloud_type))
    pass

def external_pointer_fix(param):
    if param == "SoloudObject":
        return "int*"
    return param

function_signatures = ""
function_decls = ""
function_loaders = ""

for x in soloud_codegen.soloud_type:
    first = True
    for y in soloud_codegen.soloud_func:
        if (x + "_") == y[1][0:len(x)+1:]:
            if first:
                # Declare creator and destroyer
                function_signatures += ('    alias @nogc nothrow int* function() da_%s_create;\n'%(x))
                function_decls += ('    da_%s_create %s_create;\n'%(x, x))
                function_loaders += ('    lib.bindSymbol(cast(void**)&%s_create, \"%s_create\");\n'%(x, x))
                
                function_signatures += ('    alias @nogc nothrow int* function(int* aObjHandle) da_%s_destroy;\n'%(x))
                function_decls += ('    da_%s_destroy %s_destroy;\n'%(x, x))
                function_loaders += ('    lib.bindSymbol(cast(void**)&%s_destroy, \"%s_destroy\");\n'%(x, x))
                
                first = False

            funcname = y[1][len(x)+1::]
            # If the function has the name "Ex", remove the subfix
            if funcname[-2::] == "Ex":
                funcname = funcname[:len(funcname)-2]
            # Skip generating functions that have an Ex variant
            if funcname == "create" or funcname == "destroy" or has_ex_variant(y[1]):
                pass # omit create/destroy, handled by __exit__ / close
            else:
                ret = C_TO_D_TYPES[y[0]]
                function_signatures += ('    alias @nogc nothrow %s function(int* aObjHandle'%(ret))
                
                for z in y[2]:
                    if len(z) > 1:
                        if z[1] == 'a'+x:
                            pass # skip the 'self' pointer
                        else:
                            function_signatures += ', '
                            function_signatures += external_pointer_fix(C_TO_D_TYPES[z[0]]) + ' ' + z[1]
                function_signatures += ') da_%s;\n' % y[1]
                
                function_decls += '    da_%s %s;\n' % (y[1], y[1])
                function_loaders += ('    lib.bindSymbol(cast(void**)&%s, \"%s\");\n'%(y[1], y[1]))

fo.write(
"""/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module bindbc.soloud.binddynamic;

import bindbc.loader;
import bindbc.soloud.types;
"""
)

fo.write(
"""
extern(C)
{
%s
}
""" % function_signatures
)

fo.write(
"""
__gshared
{
%s
}
""" % function_decls
)

fo.write(
"""
private
{
    SharedLib lib;
    SLSupport loadedVersion;
}

void unloadOpenCL()
{
    if (lib != invalidHandle)
    {
        lib.unload();
    }
}

SLSupport loadedSoloudVersion() { return loadedVersion; }
bool isSoloudLoaded() { return lib != invalidHandle; }

SLSupport loadSoloud()
{
    version(Windows)
    {
        version(X86)
        {
            const(char)[][2] libNames =
            [
                \"soloud.dll\",
                \"soloud_x86.dll\"
            ];
        }
        else version(X86_64)
        {
            const(char)[][2] libNames =
            [
                \"soloud.dll\",
                \"soloud_x64.dll\"
            ];
        }
    }
    else version(OSX)
    {
        const(char)[][1] libNames =
        [
            \"libsoloud.dylib\"
        ];
    }
    else version(Posix)
    {
        const(char)[][2] libNames =
        [
            \"libsoloud.so.1\",
            \"libsoloud.so\"
        ];
    }
    else static assert(0, \"bindbc-soloud is not yet supported on this platform.\");

    SLSupport ret;
    foreach(name; libNames)
    {
        ret = loadSoloud(name.ptr);
        if (ret != SLSupport.noLibrary)
            break;
    }
    return ret;
}

"""
)

fo.write(
"""
SLSupport loadSoloud(const(char)* libName)
{
    lib = load(libName);
    if(lib == invalidHandle)
    {
        return SLSupport.noLibrary;
    }

    auto errCount = errorCount();
    loadedVersion = SLSupport.badLibrary;

    %s
    
    loadedVersion = SLSupport.sl20200207;

    if (errorCount() != errCount)
        return SLSupport.badLibrary;

    return loadedVersion;
}
""" % function_loaders
)

fo.close()

print("soloud.d generated")
