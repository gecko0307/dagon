/*
Copyright (c) 2025 Timur Gafarov.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module bindbc.ktx.signatures;

import std.stdio;
import bindbc.ktx.types;

extern(C) @nogc nothrow:

// ktxTexture functions
alias f_ktxTexture_CreateFromStdioStream = KTX_error_code function(FILE* stdioStream, ktxTextureCreateFlags createFlags, ktxTexture** newTex);
alias f_ktxTexture_CreateFromNamedFile = KTX_error_code function(const(char)* filename, ktxTextureCreateFlags createFlags, ktxTexture** newTex);
alias f_ktxTexture_CreateFromMemory = KTX_error_code function(const(ktx_uint8_t)* bytes, ktx_size_t size, ktxTextureCreateFlags createFlags, ktxTexture** newTex);
alias f_ktxTexture_CreateFromStream = KTX_error_code function(ktxStream* stream, ktxTextureCreateFlags createFlags, ktxTexture** newTex);
alias f_ktxTexture_IterateLevelFaces = KTX_error_code function(ktxTexture* tex, PFNKTXITERCB iterCb, void* userdata);

// ktxTexture1 functions
alias f_ktxTexture1_CreateFromStdioStream = KTX_error_code function(FILE* stdioStream, ktxTextureCreateFlags createFlags, ktxTexture1** newTex);
alias f_ktxTexture1_CreateFromNamedFile = KTX_error_code function(const(char)* filename, ktxTextureCreateFlags createFlags, ktxTexture1** newTex);
alias f_ktxTexture1_CreateFromMemory = KTX_error_code function(const(ktx_uint8_t)* bytes, ktx_size_t size, ktxTextureCreateFlags createFlags, ktxTexture1** newTex);
alias f_ktxTexture1_CreateFromStream = KTX_error_code function(ktxStream* stream, ktxTextureCreateFlags createFlags, ktxTexture1** newTex);
alias f_ktxTexture1_Destroy = void function(ktxTexture1* tex);
alias f_ktxTexture1_NeedsTranscoding = ktx_bool_t function(ktxTexture1* tex);

// ktxTexture2 functions
alias f_ktxTexture2_CreateFromStdioStream = KTX_error_code function(FILE* stdioStream, ktxTextureCreateFlags createFlags, ktxTexture2** newTex);
alias f_ktxTexture2_CreateFromNamedFile = KTX_error_code function(const(char)* filename, ktxTextureCreateFlags createFlags, ktxTexture2** newTex);
alias f_ktxTexture2_CreateFromMemory = KTX_error_code function(const(ktx_uint8_t)* bytes, ktx_size_t size, ktxTextureCreateFlags createFlags, ktxTexture2** newTex);
alias f_ktxTexture2_CreateFromStream = KTX_error_code function(ktxStream* stream, ktxTextureCreateFlags createFlags, ktxTexture2** newTex);
alias f_ktxTexture2_Destroy = void function(ktxTexture2* tex);
alias f_ktxTexture2_NeedsTranscoding = ktx_bool_t function(ktxTexture2* tex);
alias f_ktxTexture2_TranscodeBasis = KTX_error_code function(ktxTexture2* tex, ktx_transcode_fmt_e fmt, ktx_transcode_flags transcodeFlags);
alias f_ktxTexture2_GetImageOffset = KTX_error_code function(ktxTexture2* tex, ktx_uint32_t level, ktx_uint32_t layer, ktx_uint32_t faceSlice, ktx_size_t* pOffset);
alias f_ktxTexture2_GetNumComponents = ktx_uint32_t function(ktxTexture2* tex);
