/*
Copyright (c) 2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module dagon.ext.assimp;

import std.stdio;
import std.conv;
import std.string;

import dlib.core.ownership;
import dlib.core.memory;
import dlib.core.stream;
import dlib.math.vector;
import dlib.math.matrix;
import dlib.container.array;
import dlib.filesystem.filesystem;

import dagon.core.logger;
import dagon.graphics.entity;
import dagon.graphics.drawable;
import dagon.graphics.mesh;
import dagon.graphics.material;
import dagon.graphics.state;
import dagon.resource.scene;
import dagon.resource.asset;

import loader = bindbc.loader.sharedlib;
public import bindbc.assimp;

class AssimpMesh: Mesh
{
    Material material;
    
    this(Owner owner)
    {
        super(owner);
    }
}

class AssimpMeshGroup: Owner, Drawable
{
    Array!AssimpMesh meshes;
    
    this(Owner owner)
    {
        super(owner);
    }
    
    ~this()
    {
        meshes.free();
    }
    
    void add(AssimpMesh m)
    {
        meshes.append(m);
    }
    
    void render(GraphicsState* state)
    {
        GraphicsState newState = *state;
        foreach(i, mesh; meshes)
        {
            if (mesh.material)
                mesh.material.bind(&newState);

            newState.shader.bindParameters(&newState);
            mesh.render(&newState);
            newState.shader.unbindParameters(&newState);

            if (mesh.material)
                mesh.material.unbind(&newState);
        }
    }
}

class AssimpNode: Owner
{
    string name;
    Entity entity;
    AssimpNode parent;
    AssimpNode[] children;
    AssimpMesh[] meshes;
    Matrix4x4f transformation;
    
    this(Owner owner)
    {
        super(owner);
        transformation = Matrix4x4f.identity;
        entity = New!Entity(this);
    }
    
    ~this()
    {
        if (children.length)
            Delete(children);
        
        if (meshes.length)
            Delete(meshes);
    }
}

Matrix4x4f fromAssimpMatrix(aiMatrix4x4 m)
{
    return matrixf(
        m.a1, m.a2, m.a3, m.a4,
        m.b1, m.b2, m.b3, m.b4,
        m.c1, m.c2, m.c3, m.c4,
        m.d1, m.d2, m.d3, m.d4
    );
}

/*
 * Asset that loads models using Assimp library
 */
class AssimpAsset: Asset
{
    Entity rootEntity;
    AssimpNode rootNode;
    Array!AssimpNode nodes;
    Array!AssimpMesh meshes;
    Array!Material materials;
    
    uint loaderOption = aiPostProcessSteps.Triangulate;
    
    this(Owner owner)
    {
        super(owner);
    }
    
    override bool loadThreadSafePart(string filename, InputStream istrm, ReadOnlyFileSystem fs, AssetManager mngr)
    {
        size_t dataSize = istrm.size;
        ubyte[] data = New!(ubyte[])(dataSize);
        istrm.readBytes(data.ptr, dataSize);
        
        const(aiScene*) scene = aiImportFileFromMemory(
            cast(const(char)*)data.ptr,
            cast(uint)dataSize,
            loaderOption,
            filename.toStringz);
        
        bool result;
        if (scene)
        {
            for (uint i = 0; i < scene.mNumMaterials; i++)
            {
                readMaterial(scene.mMaterials[i]);
            }
            
            for (uint i = 0; i < scene.mNumMeshes; i++)
            {
                readMesh(scene.mMeshes[i]);
            }
            
            auto rootNode = readNode(scene.mRootNode);
            rootEntity = rootNode.entity;
            
            aiReleaseImport(scene);
            result = true;
        }
        else
        {
            logError("Failed to load \"", filename, "\". ", aiGetErrorString().to!string);
            result = false;
        }
        
        Delete(data);
        
        return result;
    }
    
    protected AssimpNode readNode(const(aiNode)* node, AssimpNode parent = null)
    {
        AssimpNode n = New!AssimpNode(this);
        auto name = node.mName.data[0..node.mName.length];
        
        n.transformation = fromAssimpMatrix(node.mTransformation);
        n.parent = parent;
        
        if (node.mNumChildren > 0)
        {
            n.children = New!(AssimpNode[])(node.mNumChildren);
            foreach(i, c; n.children)
            {
                n.children[i] = readNode(node.mChildren[i], n);
                n.entity.addChild(n.children[i].entity);
            }
        }
        
        if (node.mNumMeshes > 0)
        {
            auto meshGroup = New!AssimpMeshGroup(n.entity);
            n.entity.drawable = meshGroup;
            
            n.meshes = New!(AssimpMesh[])(node.mNumMeshes);
            foreach(i, m; n.meshes)
            {
                n.meshes[i] = meshes[i];
                meshGroup.add(meshes[i]);
            }
        }
        
        nodes.append(n);
        
        return n;
    }
    
    protected Material readMaterial(const(aiMaterial)* material)
    {
        Material mat = New!Material(this);
        
        // TODO: read material properties
        
        materials.append(mat);
        
        return mat;
    }
    
    protected AssimpMesh readMesh(const(aiMesh)* mesh)
    {
        AssimpMesh m = New!AssimpMesh(this);
        auto name = mesh.mName.data[0..mesh.mName.length];
        
        bool needGenNormals = false;
        
        m.vertices = New!(Vector3f[])(mesh.mNumVertices);
        
        if (mesh.mNormals is null)
        {
            needGenNormals = true;
            logWarning("Mesh \"", name, "\" has no normals (they will be generated)");
        }
        else
        {
            m.normals = New!(Vector3f[])(mesh.mNumVertices);
        }
        
        if (mesh.mTextureCoords[0] is null)
        {
            logWarning("Mesh \"", name, "\" has no texcoords");
        }
        else
        {
            m.texcoords = New!(Vector2f[])(mesh.mNumVertices);
        }
        
        m.indices = New!(uint[3][])(mesh.mNumFaces);
        
        for (uint i = 0; i < mesh.mNumVertices; ++i)
        {
            m.vertices[i] = *cast(Vector3f*)&mesh.mVertices[i];
            
            if (mesh.mNormals !is null)
                m.normals[i] = *cast(Vector3f*)&mesh.mNormals[i];
            
            if (mesh.mTextureCoords[0] !is null)
            {
                m.texcoords[i].x = mesh.mTextureCoords[0][i].x;
                m.texcoords[i].y = mesh.mTextureCoords[0][i].y;
            }
        }
        
        for (uint i = 0; i < mesh.mNumFaces; ++i)
        {
            auto face = mesh.mFaces[i];
            foreach (j; 0..face.mNumIndices)
            {
                m.indices[i][j] = face.mIndices[j];
            }
        }
        
        if (mesh.mMaterialIndex < materials.length)
        {
            m.material = materials[mesh.mMaterialIndex];
        }
        
        if (needGenNormals)
            m.generateNormals();
        
        m.calcBoundingBox();
        m.dataReady = true;
        
        meshes.append(m);
        
        return m;
    }
    
    override bool loadThreadUnsafePart()
    {
        foreach(m; meshes)
        {
            m.prepareVAO();
        }
        
        return true;
    }
    
    override void release()
    {
        nodes.free();
        meshes.free();
        materials.free();
    }
}

AssimpAsset addAssimpAsset(Scene scene, string filename, bool preload = false)
{
    AssimpAsset assimpAsset;
    if (scene.assetManager.assetExists(filename))
        assimpAsset = cast(AssimpAsset)scene.assetManager.getAsset(filename);
    else
    {
        assimpAsset = New!AssimpAsset(scene.assetManager);
        scene.addAsset(assimpAsset, filename, preload);
    }
    return assimpAsset;
}

AssimpSupport loadAssimpLibrary()
{
    AssimpSupport assimpVersion = loadAssimp();
    
    if (loader.errors.length)
    {
        logError("Assimp loader errors:");
        foreach(info; loader.errors)
        {
            logError(to!string(info.error), ": ", to!string(info.message));
        }
    }
    
    return assimpVersion;
}
