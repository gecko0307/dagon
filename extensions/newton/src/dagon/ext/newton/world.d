/*
Copyright (c) 2019-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dagon.ext.newton.world;

import std.stdio;
import std.string;
import std.conv;
import dlib.core.ownership;
import dlib.core.memory;
import dlib.math.vector;
import bindbc.newton;
import dagon.core.event;
import dagon.ext.newton.shape;
import dagon.ext.newton.rigidbody;

extern(C)
{
    // Built-in Newton callbacks
    
    dFloat newtonWorldRayFilterCallback(
        const(NewtonBody)* nbody,
        const(NewtonCollision)* shapeHit,
        const(dFloat)* hitContact,
        const(dFloat)* hitNormal,
        dLong collisionID,
        void* userData,
        dFloat intersectParam)
    {
        NewtonRaycaster raycaster = cast(NewtonRaycaster)userData;
        NewtonRigidBody b = cast(NewtonRigidBody)NewtonBodyGetUserData(nbody);
        if (raycaster)
        {
            if (b && b.raycastable)
            {
                Vector3f p = Vector3f(hitContact[0], hitContact[1], hitContact[2]);
                Vector3f n = Vector3f(hitNormal[0], hitNormal[1], hitNormal[2]);
                return raycaster.onRayHit(b, p, n, intersectParam);
            }
            else
            {
                return 1.0f;
            }
        }
        
        return 0.0f;
    }

    uint newtonWorldRayPrefilterCallback(
        const(NewtonBody)* nbody,
        const(NewtonCollision)* collision,
        void* userData)
    {
        return 1;
    }
    
    void newtonSensorContactsProcess(
        const(NewtonJoint)* contactJoint,
        dFloat timestep,
        int threadIndex)
    {
        void* nextContact;
        uint numContacts = 0;
        for (void* contact = NewtonContactJointGetFirstContact(contactJoint); contact; contact = nextContact)
        {
            nextContact = NewtonContactJointGetNextContact(contactJoint, contact);
            NewtonContactJointRemoveContact(contactJoint, contact);
            numContacts++;
        }
        
        if (numContacts)
        {
            NewtonBody* b0 = NewtonJointGetBody0(contactJoint);
            NewtonBody* b1 = NewtonJointGetBody1(contactJoint);
            NewtonRigidBody body0 = cast(NewtonRigidBody)NewtonBodyGetUserData(b0);
            NewtonRigidBody body1 = cast(NewtonRigidBody)NewtonBodyGetUserData(b1);
            
            if (body0 && body0.isSensor)
            {
                body0.onSensorCollision(body1);
            }
            else if (body1 && body1.isSensor)
            {
                body1.onSensorCollision(body0);
            }
        }
    }
    
    void newtonKinematicContactsProcess(
        const(NewtonJoint)* contactJoint,
        dFloat timestep,
        int threadIndex)
    {
        NewtonBody* b0 = NewtonJointGetBody0(contactJoint);
        NewtonBody* b1 = NewtonJointGetBody1(contactJoint);
        NewtonRigidBody body0 = cast(NewtonRigidBody)NewtonBodyGetUserData(b0);
        NewtonRigidBody body1 = cast(NewtonRigidBody)NewtonBodyGetUserData(b1);
        
        void* nextContact;
        uint numContacts = 0;
        for (void* contact = NewtonContactJointGetFirstContact(contactJoint); contact; contact = nextContact)
        {
            if (body0)
                body0.onContact(body1, contact);
            else if (body1)
                body1.onContact(body0, contact);
            
            nextContact = NewtonContactJointGetNextContact(contactJoint, contact);
            numContacts++;
        }
    }
    
    int newtonSensorOnAABBOverlapCallback(
        const NewtonJoint* contact, 
        dFloat timestep,
        int threadIndex)
    {
        return 1;
    }
    
    int newtonSensorOnAABBOverlapCancelCallback(
        const NewtonJoint* contact, 
        dFloat timestep,
        int threadIndex)
    {
        return 0;
    }
    
    int aabbBodyIterator(const NewtonBody* body_, void* userData)
    {
        NewtonRigidBody nbody = cast(NewtonRigidBody)NewtonBodyGetUserData(body_);
        NewtonBodyEnumerator bodyEnumerator = cast(NewtonBodyEnumerator)userData;
        if (nbody && bodyEnumerator)
            return bodyEnumerator.receive(nbody);
        else
            return 0;
    }
}

interface NewtonRaycaster
{
    /*
        Callback should return parametric distance (0.0 to 1.0) above which Newton won't search anymore 
        for intersection points. For example, if t is returned, the engine immediately stops searching for new hits.
    */
    float onRayHit(NewtonRigidBody nbody, Vector3f hitPoint, Vector3f hitNormal, float t);
}

interface NewtonBodyEnumerator
{
    int receive(NewtonRigidBody nbody);
}

class NewtonPhysicsWorld: Owner
{
    EventManager eventManager;
    NewtonWorld* newtonWorld;
    int defaultGroupId;
    int kinematicGroupId;
    int sensorGroupId;

    this(EventManager eventManager, Owner o)
    {
        super(o);
        eventManager = eventManager;
        newtonWorld = NewtonCreate();
        defaultGroupId = NewtonMaterialGetDefaultGroupID(newtonWorld);
        kinematicGroupId = createGroupId();
        sensorGroupId = createGroupId();
        NewtonMaterialSetDefaultElasticity(newtonWorld, defaultGroupId, kinematicGroupId, 0.0f);
        NewtonMaterialSetDefaultFriction(newtonWorld, defaultGroupId, kinematicGroupId, 0.5f, 0.0f);
        NewtonMaterialSetCollisionCallback(newtonWorld, sensorGroupId, defaultGroupId, null, &newtonSensorContactsProcess);
        NewtonMaterialSetCollisionCallback(newtonWorld, kinematicGroupId, sensorGroupId, &newtonSensorOnAABBOverlapCancelCallback, null);
        NewtonMaterialSetCollisionCallback(newtonWorld, kinematicGroupId, defaultGroupId, null, &newtonKinematicContactsProcess);
    }
    
    ~this()
    {
        NewtonDestroyAllBodies(newtonWorld);
        NewtonMaterialDestroyAllGroupID(newtonWorld);
        NewtonDestroy(newtonWorld);
    }
    
    int createGroupId()
    {
        return NewtonMaterialCreateGroupID(newtonWorld);
    }

    void loadPlugins(string dir)
    {
        NewtonLoadPlugins(newtonWorld, dir.toStringz);
        void* p = NewtonGetPreferedPlugin(newtonWorld);
        writeln("Selected plugin: ", NewtonGetPluginString(newtonWorld, p).to!string);
    }

    void update(double dt)
    {
        NewtonUpdate(newtonWorld, dt);
    }

    NewtonRigidBody createDynamicBody(NewtonCollisionShape shape, float mass)
    {
        NewtonRigidBody b = New!NewtonRigidBody(shape, mass, this, this);
        b.dynamic = true;
        // TODO: store a list of bodies
        return b;
    }

    NewtonRigidBody createStaticBody(NewtonCollisionShape shape)
    {
        auto b = createDynamicBody(shape, 0.0f);
        b.dynamic = false;
        return b;
    }

    void raycast(Vector3f pstart, Vector3f pend, NewtonRaycaster raycaster)
    {
        NewtonWorldRayCast(newtonWorld, pstart.arrayof.ptr, pend.arrayof.ptr, &newtonWorldRayFilterCallback, cast(void*)raycaster, &newtonWorldRayPrefilterCallback, 0);
    }
    
    void forEachBodyInAABBDo(Vector3f p0, Vector3f p1, NewtonBodyEnumerator bodyEnumerator)
    {
        NewtonWorldForEachBodyInAABBDo(newtonWorld, p0.arrayof.ptr, p1.arrayof.ptr, &aabbBodyIterator, cast(void*)bodyEnumerator);
    }
}
