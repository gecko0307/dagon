/*
Copyright (c) 2019-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dagon.ext.newton.character;

import std.math;
import dlib.core.ownership;
import dlib.core.memory;
import dlib.math.vector;
import dlib.math.matrix;
import dlib.math.transformation;
import dlib.math.quaternion;
import dagon.core.event;
import dagon.core.time;
import dagon.graphics.entity;

import bindbc.newton;
import dagon.ext.newton.world;
import dagon.ext.newton.shape;
import dagon.ext.newton.rigidbody;

class NewtonCharacterComponent: EntityComponent, NewtonRaycaster
{
    NewtonPhysicsWorld world;
    NewtonSphereShape lowerShape;
    NewtonSphereShape upperShape;
    NewtonCompoundShape shape;
    NewtonRigidBody rbody;
    
    Vector3f gravity = Vector3f(0.0f, -20.0f, 0.0f);
    
    Vector3f targetVelocity = Vector3f(0.0f, 0.0f, 0.0f);
    Matrix4x4f prevTransformation;
    
    float mass;
    float height;
    float halfHeight;
    float shapeRadius;
    float minEyeHeight;
    float maxEyeHeight;
    float eyeHeight;
    float targetEyeHeight;
    float crouchSpeed;
    
    bool onGround = false;
    bool groundContact = false;
    bool isJumping = false;
    bool isFalling = false;
    bool isCrouching = false;
    bool isForcefullyCrouching = false;
    
    Vector3f groundPosition = Vector3f(0.0f, 0.0f, 0.0f);
    Vector3f groundContactPosition = Vector3f(0.0f, 0.0f, 0.0f);
    Vector3f groundContactNormal = Vector3f(0.0f, 0.0f, 0.0f);
    Vector3f ceilingPosition = Vector3f(0.0f, 0.0f, 0.0f);
    float maxRaycastDistance = 100.0f;
    protected float closestHitParam = 1.0f;
    
    this(NewtonPhysicsWorld world, Entity e, float height, float radius, float mass)
    {
        super(world.eventManager, e);
        this.world = world;
        this.height = height;
        this.mass = mass;
        this.halfHeight = height * 0.5f;
        shapeRadius = radius;
        minEyeHeight = height * 0.5f;
        maxEyeHeight = height;
        eyeHeight = maxEyeHeight;
        targetEyeHeight = eyeHeight;
        crouchSpeed = 6.0f;
        lowerShape = New!NewtonSphereShape(shapeRadius, world);
        lowerShape.setTransformation(translationMatrix(Vector3f(0.0f, shapeRadius, 0.0f)));
        upperShape = New!NewtonSphereShape(shapeRadius, world);
        upperShape.setTransformation(translationMatrix(Vector3f(0.0f, height - shapeRadius, 0.0f)));
        NewtonCollisionShape[2] shapes = [lowerShape, upperShape];
        shape = New!NewtonCompoundShape(shapes, world);
        
        rbody = world.createDynamicBody(shape, mass);
        rbody.groupId = world.kinematicGroupId;
        rbody.raycastable = false;
        rbody.enableRotation = false;
        
        Quaternionf rot = e.rotation;
        rbody.transformation =
            translationMatrix(e.position) *
            rot.toMatrix4x4;
        NewtonBodySetMatrix(rbody.newtonBody, rbody.transformation.arrayof.ptr);
        prevTransformation = Matrix4x4f.identity;
        
        rbody.createUpVectorConstraint(Vector3f(0.0f, 1.0f, 0.0f));
        rbody.gravity = gravity;
        NewtonBodySetAutoSleep(rbody.newtonBody, false);
        
        rbody.contactCallback = &onContact;
    }
    
    void onContact(NewtonRigidBody selfBody, NewtonRigidBody otherBody, const void* contact)
    {
        if (contact && !groundContact)
        {
            NewtonMaterial* mat = NewtonContactGetMaterial(contact);
            Vector3f contactPoint;
            Vector3f contactNormal;
            NewtonMaterialGetContactPositionAndNormal(mat, selfBody.newtonBody, contactPoint.arrayof.ptr, contactNormal.arrayof.ptr);
            
            float groundProj = dot(contactNormal, Vector3f(0.0f, 1.0f, 0.0f));
            if (groundProj > 0.2f)
            {
                groundContact = true;
                groundPosition = contactPoint;
                groundContactPosition = contactPoint;
                groundContactNormal = contactNormal;
            }
        }
    }
    
    float onRayHit(NewtonRigidBody nbody, Vector3f hitPoint, Vector3f hitNormal, float t)
    {
        if (t < closestHitParam)
        {
            closestHitParam = t;
            return t;
        }
        else
        {
            return 1.0f;
        }
    }
    
    bool floorRaycast(Vector3f pstart, Vector3f pend)
    {
        closestHitParam = 1.0f;
        world.raycast(pstart, pend, this);
        groundPosition = pstart + (pend - pstart).normalized * maxRaycastDistance * closestHitParam;
        return (closestHitParam < 1.0f);
    }
    
    bool ceilingRaycast(Vector3f pstart, Vector3f pend)
    {
        closestHitParam = 1.0f;
        world.raycast(pstart, pend, this);
        ceilingPosition = pstart + (pend - pstart).normalized * maxRaycastDistance * closestHitParam;
        return (closestHitParam < 1.0f);
    }
    
    void updateVelocity()
    {
        Vector3f velocityChange = targetVelocity - rbody.velocity;
        velocityChange.y = 0.0f;
        rbody.velocity = rbody.velocity + velocityChange;
        
        targetVelocity = Vector3f(0.0f, 0.0f, 0.0f);
    }
    
    override void update(Time t)
    {
        rbody.update(t.delta);

        entity.prevTransformation = prevTransformation;

        entity.position = rbody.position.xyz;
        entity.transformation = rbody.transformation * scaleMatrix(entity.scaling);
        entity.invTransformation = entity.transformation.inverse;
        entity.rotation = rbody.rotation;

        entity.absoluteTransformation = entity.transformation;
        entity.invAbsoluteTransformation = entity.invTransformation;
        entity.prevAbsoluteTransformation = entity.prevTransformation;

        prevTransformation = entity.transformation;
        
        onGround = groundContact;
        groundContact = false;
        
        Vector3f raycastSource = entity.position;
        raycastSource.y += halfHeight;
        
        // Ground raycast
        if (floorRaycast(raycastSource, raycastSource + Vector3f(0.0f, -maxRaycastDistance, 0.0f)))
        {
            onGround = onGround || (raycastSource.y - groundPosition.y) <= halfHeight;
        }
        
        if (!onGround)
        {
            float verticalSpeed = rbody.velocity.y;
            isJumping = verticalSpeed >  2.0f;
            isFalling = verticalSpeed < -2.0f;
        }
        else
        {
            isJumping = false;
            isFalling = false;
        }
        
        // Head raycast
        bool shouldCrouch = false;
        if (ceilingRaycast(raycastSource, raycastSource + Vector3f(0.0f, maxRaycastDistance, 0.0f)))
        {
            shouldCrouch = (ceilingPosition.y - raycastSource.y) <= halfHeight;
        }
        
        if (shouldCrouch)
        {
            if (!isCrouching && !isForcefullyCrouching)
            {
                isForcefullyCrouching = true;
                NewtonBodySetCollision(rbody.newtonBody, lowerShape.newtonCollision);
            }
            
            targetEyeHeight = minEyeHeight;
        }
        else
        {
            if (!isCrouching && isForcefullyCrouching)
            {
                isForcefullyCrouching = false;
                NewtonBodySetCollision(rbody.newtonBody, shape.newtonCollision);
                targetEyeHeight = maxEyeHeight;
            }
        }
        
        eyeHeight += (targetEyeHeight - eyeHeight) * crouchSpeed * t.delta;
    }
    
    void move(Vector3f direction, float speed)
    {
        targetVelocity += direction * speed;
    }
    
    void jump(float height)
    {
        if (onGround && !isCrouching && !isForcefullyCrouching)
        {
            onGround = false;
            float jumpSpeed = sqrt(2.0f * height * -rbody.gravity.y);
            Vector3f v = rbody.velocity;
            v.y = jumpSpeed;
            rbody.velocity = v;
        }
    }
    
    Vector3f position()
    {
        return rbody.position.xyz;
    }
    
    Vector3f eyePoint()
    {
        return rbody.position.xyz + Vector3f(0.0f, eyeHeight, 0.0f);
    }
    
    void crouch(bool mode)
    {
        isCrouching = mode;
        if (isCrouching)
        {
            NewtonBodySetCollision(rbody.newtonBody, lowerShape.newtonCollision);
            targetEyeHeight = minEyeHeight;
        }
        else
        {
            NewtonBodySetCollision(rbody.newtonBody, shape.newtonCollision);
            targetEyeHeight = maxEyeHeight;
        }
    }
    
    void enableGravity(bool mode)
    {
        if (mode)
            rbody.gravity = gravity;
        else
            rbody.gravity = Vector3f(0.0f, 0.0f, 0.0f);
    }
}

NewtonCharacterComponent makeCharacter(Entity entity, NewtonPhysicsWorld world, float height, float radius, float mass)
{
    return New!NewtonCharacterComponent(world, entity, height, radius, mass);
}
