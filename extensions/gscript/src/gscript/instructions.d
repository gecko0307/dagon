/*
Copyright (c) 2025 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module gscript.instructions;

import std.conv;
import std.traits;

import gscript.dynamic;

enum GsInstructionType: ubyte
{
    LABEL = 0,       // Define a label
    PUSH = 1,        // Push a value onto the stack
    POP = 2,         // Pop a value from the stack
    ADD = 3,
    SUB = 4,
    MUL = 5,
    DIV = 6,
    NEG = 7,
    MOD = 8,
    POW = 9,
    AND = 10,
    OR = 11,
    BITWISE_AND = 12,
    BITWISE_OR = 13,
    BITWISE_XOR = 14,
    NOT = 15,
    CAT = 16,
    EQ = 17,
    NEQ = 18,
    LESS = 19,
    GREATER = 20,
    LESS_EQ = 21,
    GREATER_EQ = 22,
    JMP = 23,          // unconditional jump
    JMP_IF = 24,       // conditional jump if true
    JMP_IF_NOT = 25,   // conditional jump if false
    INDEX_GET = 26,    // INDEX_GET          - gets an element of an array
    INDEX_SET = 27,    // INDEX_SET          - sets an element of an array
    LENGTH = 28,       // LENGTH             - pop array and push its length
    PRINT = 29,        // PRINT              - print the top value on the stack
    HALT = 30,         // HALT               - stop execution
    CALL = 31,         // CALL X             - pop a subroutine name/function/delegate and call it using N arguments
    RET = 32,          // RET                - return from a subroutine
    LOAD_VAR = 33,     // LOAD_VAR N         - push a local variable N onto the stack
    STORE_VAR = 34,    // STORE_VAR N        - pop a value from the stack and store it as a local variable N
    LOAD_ARG = 35,     // LOAD_ARG N         - push an argument N onto the stack
    STORE_ARG = 36,    // STORE_ARG N        - pop a value from the stack and store it as an argument N
    NEW = 37,          // NEW                - create a new object and push it onto the stack
    GET = 38,          // GET "X"            - pop an object, get the value of object's property X and push it onto the stack
    SET = 39,          // SET "X"            - pop an object, then a value. Set the object's property X to the value. Push the value back
    CONTAINS = 40,     // CONTAINS "X"       - pop an object and push true if a property X exists in the object, false otherwise
    GLOBAL = 41,
    ARRAY = 42,
    GLOBAL_LOAD_VAR = 43,
    GLOBAL_STORE_VAR = 44,
    INIT_SET = 45,     // INIT_SET "X"       - pop a value, then peek an object. Set the object's property X to the value
    REUSE = 46,        // REUSE              - pop an object, create a derived object and push it onto the stack
    LOAD_ARGS = 47,    // LOAD_ARGS          - push all available arguments as an array slice onto the stack
    SPAWN = 48         // SPAWN              - pop a subroutine name and spawn a new thread that runs this subroutine
}

enum GsOperandType: ubyte
{
    None = 0,
    Double = 1,
    String = 2
}

struct GsInstruction
{
    GsInstructionType type;
    GsDynamic operand;
    
    GsOperandType operandType()
    {
        if (operand.type == GsDynamicType.Undefined)
            return GsOperandType.None;
        else if (operand.type == GsDynamicType.String)
            return GsOperandType.String;
        else if (operand.type == GsDynamicType.Number)
            return GsOperandType.Double;
        else
            return GsOperandType.None;
    }
    
    string toString()
    {
        if (operand.type == GsDynamicType.Undefined)
            return type.to!string;
        else
        {
            if (operand.type == GsDynamicType.String)
                return type.to!string ~ " \"" ~ operand.to!string ~ "\"";
            else
                return type.to!string ~ " " ~ operand.to!string;
        }
    }
}
